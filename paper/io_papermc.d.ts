declare module 'io.papermc.paper.world' {
import { Map } from 'java.util';
import { Enum } from 'java.lang';
export class MoonPhase extends Enum<MoonPhase> {
  static readonly FULL_MOON: MoonPhase;
  static readonly WANING_GIBBOUS: MoonPhase;
  static readonly LAST_QUARTER: MoonPhase;
  static readonly WANING_CRESCENT: MoonPhase;
  static readonly NEW_MOON: MoonPhase;
  static readonly WAXING_CRESCENT: MoonPhase;
  static readonly FIRST_QUARTER: MoonPhase;
  static readonly WAXING_GIBBOUS: MoonPhase;
  static valueOf(name: string): MoonPhase;
  static values(): MoonPhase[];
  static getPhase(day: number): MoonPhase;
}

}
declare module 'io.papermc.paper.datacomponent.item.WritableBookContent' {
import { List } from 'java.util';
import { Filtered } from 'io.papermc.paper.text';
import { WritableBookContent } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link WritableBookContent}.
*/
export class Builder extends DataComponentBuilder<WritableBookContent> {
  /**
   * Adds a page that can be written to for this builder.
   *
   * @param page page
   * @return the builder for chaining
   * @see #pages()
  */
  addPage(page: string): Builder;
  /**
   * Adds pages that can be written to for this builder.
   *
   * @param pages pages
   * @return the builder for chaining
   * @see #pages()
  */
  addPages(pages: string[]): Builder;
  /**
   * Adds a filterable page that can be written to for this builder.
   *
   * @param page page
   * @return the builder for chaining
   * @see #pages()
  */
  addFilteredPage(page: Filtered<string>): Builder;
  /**
   * Adds filterable pages that can be written to for this builder.
   *
   * @param pages pages
   * @return the builder for chaining
   * @see #pages()
  */
  addFilteredPages(pages: Filtered<string>[]): Builder;
}

}
declare module 'io.papermc.paper.registry.data.GameEventRegistryEntry' {
import { GameEventRegistryEntry } from 'io.papermc.paper.registry.data';
import { RegistryBuilder } from 'io.papermc.paper.registry';
import { GameEvent } from 'org.bukkit';
/**
 * A mutable builder for the {@link GameEventRegistryEntry} plugins may change in applicable registry events.
 * 
 * The following values are required for each builder:
 * 
 *     {@link #range(int)}
 * 
*/
export class Builder extends GameEventRegistryEntry {
  /**
   * Sets the range in which this game event should notify its listeners.
   *
   * @param range the range of blocks.
   * @return this builder instance.
   * @see GameEventRegistryEntry#range()
   * @see GameEvent#getRange()
  */
  range(range: number): Builder;
}
export interface Builder extends GameEventRegistryEntry, RegistryBuilder<GameEvent> {}

}
declare module 'io.papermc.paper.datacomponent.item.consumable' {
import { PotionEffect, PotionEffectType } from 'org.bukkit.potion';
import { Key } from 'net.kyori.adventure.key';
import { Enum } from 'java.lang';
import { List } from 'java.util';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { ClearAllStatusEffects, ApplyStatusEffects, PlaySound, TeleportRandomly, RemoveStatusEffects } from 'io.papermc.paper.datacomponent.item.consumable.ConsumeEffect';
/**
 * Represents the hand animation that is used when a player is consuming this item.
*/
export class ItemUseAnimation extends Enum<ItemUseAnimation> {
  static readonly NONE: ItemUseAnimation;
  static readonly EAT: ItemUseAnimation;
  static readonly DRINK: ItemUseAnimation;
  static readonly BLOCK: ItemUseAnimation;
  static readonly BOW: ItemUseAnimation;
  static readonly SPEAR: ItemUseAnimation;
  static readonly CROSSBOW: ItemUseAnimation;
  static readonly SPYGLASS: ItemUseAnimation;
  static readonly TOOT_HORN: ItemUseAnimation;
  static readonly BRUSH: ItemUseAnimation;
  static readonly BUNDLE: ItemUseAnimation;
  static valueOf(name: string): ItemUseAnimation;
  static values(): ItemUseAnimation[];
}
/**
 * Effect that occurs when consuming an item.
*/
export class ConsumeEffect {
  /**
   * Creates a consume effect that randomly teleports the entity on consumption.
   *
   * @param diameter diameter of random teleportation
   * @return the effect instance
  */
  static teleportRandomlyEffect(diameter: number): TeleportRandomly;
  /**
   * Creates a consume effect that removes status effects on consumption.
   *
   * @param effects the potion effects to remove
   * @return the effect instance
  */
  static removeEffects(effects: RegistryKeySet<PotionEffectType>): RemoveStatusEffects;
  /**
   * Creates a consume effect that plays a sound on consumption.
   *
   * @param key the key sound effect to play
   * @return the effect instance
  */
  static playSoundConsumeEffect(key: Key): PlaySound;
  /**
   * Creates a consume effect that clears all status effects.
   *
   * @return the effect instance
  */
  static clearAllStatusEffects(): ClearAllStatusEffects;
  /**
   * Creates a consume effect that gives potion effects on consumption.
   *
   * @param effects     the potion effects to apply
   * @param probability the probability of these effects being applied, between 0 and 1 inclusive
   * @return the effect instance
  */
  static applyStatusEffects(effects: PotionEffect[], probability: number): ApplyStatusEffects;
}

}
declare module 'io.papermc.paper.datacomponent.item.SuspiciousStewEffects' {
import { Collection } from 'java.util';
import { SuspiciousStewEffects } from 'io.papermc.paper.datacomponent.item';
import { SuspiciousEffectEntry } from 'io.papermc.paper.potion';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link SuspiciousStewEffects}.
*/
export class Builder extends DataComponentBuilder<SuspiciousStewEffects> {
  /**
   * Adds an effect applied to this builder.
   *
   * @param entry effect
   * @return the builder for chaining
   * @see #effects()
  */
  add(entry: SuspiciousEffectEntry): Builder;
  /**
   * Adds effects applied to this builder.
   *
   * @param entries effect
   * @return the builder for chaining
   * @see #effects()
  */
  addAll(entries: Collection<SuspiciousEffectEntry>): Builder;
}

}
declare module 'io.papermc.paper.datapack.DatapackRegistrar' {
import { Component } from 'net.kyori.adventure.text';
import { Position } from 'io.papermc.paper.datapack.Datapack';
/**
 * Configures additional, optional, details about a datapack.
*/
export class Configurer {
  /**
   * Changes the title of the datapack from the default which
   * is just the "id" in the `registerPack` methods.
   *
   * @param title the new title
   * @return the configurer for chaining
  */
  title(title: Component): Configurer;
  /**
   * Sets whether this pack is going to be automatically enabled on server starts even if previously disabled.
   * Defaults to false.
   *
   * @param autoEnableOnServerStart true to ensure the pack is enabled on server starts.
   * @return the configurer for chaining
  */
  autoEnableOnServerStart(autoEnableOnServerStart: boolean): Configurer;
  /**
   * Configures the position in the
   * load order of this datapack.
   *
   * @param fixed won't move around in the load order as packs are added/removed
   * @param position try to insert at the top of the order or bottom
   * @return the configurer for chaining
  */
  position(fixed: boolean, position: Position): Configurer;
}

}
declare module 'io.papermc.paper.plugin.configuration' {
import { List } from 'java.util';
import { PluginLoadOrder } from 'org.bukkit.plugin';
import { PermissionDefault, Permission } from 'org.bukkit.permissions';
/**
 * This class acts as an abstraction for a plugin configuration.
*/
export class PluginMeta {
  /**
   * Provides the name of the plugin. This name uniquely identifies the plugin amongst all loaded plugins on the
   * server.
   * 
   * Will only contain alphanumeric characters, underscores, hyphens,
   *     and periods: [a-zA-Z0-9_\-\.].
   * Typically used for identifying the plugin data folder.
   * The name also acts as the token referenced in {@link #getPluginDependencies()},
   * {@link #getPluginSoftDependencies()}, and {@link #getLoadBeforePlugins()}.
   * 
   * 
   * In the plugin.yml, this entry is named name.
   * 
   * Example:name: MyPlugin
   *
   * @return the name of the plugin
  */
  get name(): string;
  /**
   * Returns the display name of the plugin, including the version.
   *
   * @return a descriptive name of the plugin and respective version
  */
  get displayName(): string;
  /**
   * Provides the fully qualified class name of the main class for the plugin.
   * A subtype of {@link JavaPlugin} is expected at this location.
   *
   * @return the fully qualified class name of the plugin's main class.
  */
  get mainClass(): string;
  /**
   * Returns the phase of the server startup logic that the plugin should be loaded.
   *
   * @return the plugin load order
   * @see PluginLoadOrder for further details regards the available load orders.
  */
  get loadOrder(): PluginLoadOrder;
  /**
   * Provides the version of this plugin as defined by the plugin.
   * There is no inherit format defined/enforced for the version of a plugin, however a common approach
   * might be semantic versioning.
   *
   * @return the string representation of the plugin's version
  */
  get version(): string;
  /**
   * Provides the prefix that should be used for the plugin logger.
   * The logger prefix allows plugins to overwrite the usual default of the logger prefix, which is the name of the
   * plugin.
   *
   * @return the specific overwrite of the logger prefix as defined by the plugin. If the plugin did not define a
   *     custom logger prefix, this method will return null
  */
  get loggerPrefix(): string | null;
  /**
   * Provides a list of dependencies that are required for this plugin to load.
   * The list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the
   * dependencies.
   * 
   * If any of the dependencies defined by this list are not installed on the server, this plugin will fail to load.
   *
   * @return an immutable list of required dependency names
  */
  get pluginDependencies(): string[];
  /**
   * Provides a list of dependencies that are used but not required by this plugin.
   * The list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the soft
   * dependencies.
   * 
   * If these dependencies are installed on the server, they will be loaded first and supplied as dependencies to this
   * plugin, however the plugin will load even if these dependencies are not installed.
   *
   * @return immutable list of soft dependencies
  */
  get pluginSoftDependencies(): string[];
  /**
   * Provides a list of plugins that should be loaded before this plugin is loaded.
   * The list holds the unique identifiers, following the constraints laid out in {@link #getName()}, of the
   * plugins that should be loaded before the plugin described by this plugin meta.
   * 
   * The plugins referenced in the list provided by this method are not considered dependencies of this plugin and
   * are hence not available to the plugin at runtime. They merely load before this plugin.
   *
   * @return immutable list of plugins to load before this plugin
  */
  get loadBeforePlugins(): string[];
  /**
   * Returns the list of plugins/dependencies that this plugin provides.
   * The list holds the unique identifiers, following the constraints laid out in {@link #getName()}, for each plugin
   * it provides the expected classes for.
   *
   * @return immutable list of provided plugins/dependencies
  */
  get providedPlugins(): string[];
  /**
   * Provides the list of authors that are credited with creating this plugin.
   * The author names are in no particular format.
   *
   * @return an immutable list of the plugin's authors
  */
  get authors(): string[];
  /**
   * Provides a list of contributors that contributed to the plugin but are not considered authors.
   * The names of the contributors are in no particular format.
   *
   * @return an immutable list of the plugin's contributors
  */
  get contributors(): string[];
  /**
   * Gives a human-friendly description of the functionality the plugin
   * provides.
   *
   * @return description or null if the plugin did not define a human readable description.
  */
  get description(): string | null;
  /**
   * Provides the website for the plugin or the plugin's author.
   * The defined string value is not guaranteed to be in the form of a url.
   *
   * @return a string representation of the website that serves as the main hub for this plugin/its author.
  */
  get website(): string | null;
  get permissions(): Permission[];
  get permissionDefault(): PermissionDefault;
  /**
   * Gets the api version that this plugin supports.
   * Nullable if this version is not specified, and should be
   * considered legacy (spigot plugins only)
   *
   * @return the version string made up of the major and minor version (e.g. 1.18 or 1.19). Minor versions like 1.18.2
   * are unified to their major release version (in this example 1.18)
  */
  get aPIVersion(): string | null;
}

}
declare module 'io.papermc.paper.datapack.Datapack' {
import { Enum } from 'java.lang';
export class Compatibility extends Enum<Compatibility> {
  static readonly TOO_OLD: Compatibility;
  static readonly TOO_NEW: Compatibility;
  static readonly COMPATIBLE: Compatibility;
  static valueOf(name: string): Compatibility;
  static values(): Compatibility[];
}
/**
 * Position of the pack in the load order.
*/
export class Position extends Enum<Position> {
  static readonly TOP: Position;
  static readonly BOTTOM: Position;
  static valueOf(name: string): Position;
  static values(): Position[];
}

}
declare module 'io.papermc.paper.datacomponent.item.UseCooldown' {
import { Key } from 'net.kyori.adventure.key';
import { UseCooldown } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
export class Builder extends DataComponentBuilder<UseCooldown> {
  /**
   * Sets a unique resource location for this cooldown group.
   * 
   * This allows items to share cooldowns with other items in the same cooldown group.
   * 
   *
   * @param key the unique resource location; can be null
   * @return the builder for chaining
   * @see #cooldownGroup()
  */
  cooldownGroup(key: Key | null): Builder;
}

}
declare module 'io.papermc.paper.block.fluid' {
import { Cloneable } from 'java.lang';
import { Vector } from 'org.bukkit.util';
import { Fluid, Location } from 'org.bukkit';
/**
 * A representation of a fluid in a specific state of data.
 * This type is not linked to a specific location and hence mostly resembles a {@link org.bukkit.block.data.BlockData}.
*/
export class FluidData extends Cloneable {
  /**
   * Gets the fluid type of this fluid data.
   *
   * @return the fluid type
  */
  get fluidType(): Fluid;
  /**
   * Returns a copy of this FluidData.
   *
   * @return a copy of the fluid data
  */
  clone(): FluidData;
  /**
   * Computes the direction of the flow of the liquid at the given location as a vector.
   * 
   * This method requires the passed location's chunk to be loaded.
   * If said chunk is not loaded when this method is called, the chunk will first be loaded prior to the computation
   * which leads to a potentially slow sync chunk load.
   *
   * @param location - the location to check the liquid flow
   * @return the flow direction vector at the given location
  */
  computeFlowDirection(location: Location): Vector;
  /**
   * Returns the level of liquid this fluid data holds.
   *
   * @return the amount as an integer, between 0 and 8
  */
  get level(): number;
  /**
   * Computes the height of the fluid in the world.
   * 
   * This method requires the passed location's chunk to be loaded.
   * If said chunk is not loaded when this method is called, the chunk will first be loaded prior to the computation
   * which leads to a potentially slow sync chunk load.
   *
   * @param location the location at which to check the high of this fluid data.
   * @return the height as a float value
  */
  computeHeight(location: Location): number;
  /**
   * Returns whether this fluid is a source block
   *
   * @return true if the fluid is a source block, false otherwise
  */
  isSource(): boolean;
}

}
declare module 'io.papermc.paper.event.player.PlayerBedFailEnterEvent' {
import { Enum } from 'java.lang';
export class FailReason extends Enum<FailReason> {
  /**
   * The world doesn't allow sleeping (ex. Nether or The End). Entering
   * the bed is prevented and the bed explodes.
  */
  static readonly NOT_POSSIBLE_HERE: FailReason;
  /**
   * Entering the bed is prevented due to it not being night nor
   * thundering currently.
   * 
   * If the event is forcefully allowed during daytime, the player will
   * enter the bed (and set its bed location), but might get immediately
   * thrown out again.
  */
  static readonly NOT_POSSIBLE_NOW: FailReason;
  /**
   * Entering the bed is prevented due to the player being too far away.
  */
  static readonly TOO_FAR_AWAY: FailReason;
  /**
   * Bed is obstructed.
  */
  static readonly OBSTRUCTED: FailReason;
  /**
   * Entering the bed is prevented due to there being some other problem.
  */
  static readonly OTHER_PROBLEM: FailReason;
  /**
   * Entering the bed is prevented due to there being monsters nearby.
  */
  static readonly NOT_SAFE: FailReason;
  static valueOf(name: string): FailReason;
  static values(): FailReason[];
}

}
declare module 'io.papermc.paper.command.brigadier.argument' {
import { Component } from 'net.kyori.adventure.text';
import { LookAnchor } from 'io.papermc.paper.entity';
import { Key } from 'net.kyori.adventure.key';
import { Collection, UUID } from 'java.util';
import { CompletableFuture } from 'java.util.concurrent';
import { ArgumentType } from 'com.mojang.brigadier.arguments';
import { IntegerRangeProvider, DoubleRangeProvider } from 'io.papermc.paper.command.brigadier.argument.range';
import { PlayerSelectorArgumentResolver, EntitySelectorArgumentResolver } from 'io.papermc.paper.command.brigadier.argument.resolvers.selector';
import { Style, NamedTextColor } from 'net.kyori.adventure.text.format';
import { ItemStack } from 'org.bukkit.inventory';
import { GameMode, HeightMap, NamespacedKey, World } from 'org.bukkit';
import { CommandSourceStack } from 'io.papermc.paper.command.brigadier';
import { ItemStackPredicate } from 'io.papermc.paper.command.brigadier.argument.predicate';
import { BlockState } from 'org.bukkit.block';
import { TypedKey, RegistryKey } from 'io.papermc.paper.registry';
import { StructureRotation, Mirror } from 'org.bukkit.block.structure';
import { SignedMessage } from 'net.kyori.adventure.chat';
import { Suggestions, SuggestionsBuilder } from 'com.mojang.brigadier.suggestion';
import { StringReader } from 'com.mojang.brigadier';
import { CommandContext } from 'com.mojang.brigadier.context';
import { FinePositionResolver, BlockPositionResolver, RotationResolver, PlayerProfileListResolver } from 'io.papermc.paper.command.brigadier.argument.resolvers';
import { DisplaySlot, Criteria } from 'org.bukkit.scoreboard';
/**
 * A resolver for a {@link SignedMessage}
 *
 * @see ArgumentTypes#signedMessage()
*/
export class SignedMessageResolver {
  /**
   * Gets the string content of the message
   *
   * @return string content
  */
  content(): string;
  /**
   * Resolves this signed message. This will the {@link CommandContext}
   * and signed arguments sent by the client.
   * 
   * In the case that signed message information isn't provided, a "system"
   * signed message will be returned instead.
   *
   * @param argumentName argument name
   * @param context the command context
   * @return a completable future for the {@link SignedMessage}
   * @throws CommandSyntaxException syntax exception
  */
  resolveSignedMessage(argumentName: string, context: CommandContext<CommandSourceStack>): CompletableFuture<SignedMessage>;
}
/**
 * An argument type that wraps around a native-to-vanilla argument type.
 * This argument receives special handling in that the native argument type will
 * be sent to the client for possible client-side completions and syntax validation.
 * 
 * When implementing this class, you have to create your own parsing logic from a
 * {@link StringReader}. If only want to convert from the native type (`N`) to the custom
 * type (`T`), implement {@link Converted} instead.
 *
 * @param  custom type
 * @param  type with an argument native to vanilla Minecraft (from {@link ArgumentTypes})
*/
export class CustomArgumentType<T> extends ArgumentType<T> {
  /**
   * Parses the argument into the custom type (`T`). Keep in mind
   * that this parsing will be done on the server. This means that if
   * you throw a {@link CommandSyntaxException} during parsing, this
   * will only show up to the user after the user has executed the command
   * not while they are still entering it.
   *
   * @param reader string reader input
   * @return parsed value
   * @throws CommandSyntaxException if an error occurs while parsing
   * @see #parse(StringReader, Object)
  */
  parse(reader: StringReader): T;
  /**
   * Parses the argument into the custom type (`T`). Keep in mind
   * that this parsing will be done on the server. This means that if
   * you throw a {@link CommandSyntaxException} during parsing, this
   * will only show up to the user after the user has executed the command
   * not while they are still entering it.
   * 
   * This method provides the command source for additional context when parsing. You
   * may have to do your own `instanceof` checks for {@link io.papermc.paper.command.brigadier.CommandSourceStack}.
   *
   * @param reader string reader input
   * @param source source of the command
   * @return parsed value
   * @throws CommandSyntaxException if an error occurs while parsing
  */
  parse<S>(reader: StringReader, source: S): T;
  /**
   * Gets the native type that this argument uses,
   * the type that is sent to the client.
   *
   * @return native argument type
  */
  get nativeType(): ArgumentType<N>;
  /**
   * Cannot be controlled by the server.
   * Returned in cases where there are multiple arguments in the same node.
   * This helps differentiate and tell the player what the possible inputs are.
   *
   * @return client set examples
  */
  get examples(): Collection<string>;
  /**
   * Provides a list of suggestions to show to the client.
   *
   * @param context command context
   * @param builder suggestion builder
   * @return suggestions
   * @param  context type
  */
  listSuggestions<S>(context: CommandContext<S>, builder: SuggestionsBuilder): CompletableFuture<Suggestions>;
}
/**
 * Vanilla Minecraft includes several custom {@link ArgumentType}s that are recognized by the client.
 * Many of these argument types include client-side completions and validation, and some include command signing context.
 *
 * This class allows creating instances of these types for use in plugin commands, with friendly API result types.
 *
 * {@link CustomArgumentType} is provided for customizing parsing or result types server-side, while sending the vanilla argument type to the client.
*/
export class ArgumentTypes {
  /**
   * Represents a selector that can capture any
   * single entity.
   *
   * @return argument that takes one entity
  */
  static entity(): ArgumentType<EntitySelectorArgumentResolver>;
  /**
   * Represents a selector that can capture multiple
   * entities.
   *
   * @return argument that takes multiple entities
  */
  static entities(): ArgumentType<EntitySelectorArgumentResolver>;
  /**
   * Represents a selector that can capture a
   * singular player entity.
   *
   * @return argument that takes one player
  */
  static player(): ArgumentType<PlayerSelectorArgumentResolver>;
  /**
   * Represents a selector that can capture multiple
   * player entities.
   *
   * @return argument that takes multiple players
  */
  static players(): ArgumentType<PlayerSelectorArgumentResolver>;
  /**
   * A selector argument that provides a list
   * of player profiles.
   *
   * @return player profile argument
  */
  static playerProfiles(): ArgumentType<PlayerProfileListResolver>;
  /**
   * A block position argument.
   *
   * @return block position argument
  */
  static blockPosition(): ArgumentType<BlockPositionResolver>;
  /**
   * A fine position argument.
   *
   * @return fine position argument
   * @see #finePosition(boolean) to center whole numbers
  */
  static finePosition(): ArgumentType<FinePositionResolver>;
  /**
   * A fine position argument.
   *
   * @param centerIntegers if whole numbers should be centered (+0.5)
   * @return fine position argument
  */
  static finePosition(centerIntegers: boolean): ArgumentType<FinePositionResolver>;
  /**
   * A rotation argument.
   *
   * @return rotation argument
  */
  static rotation(): ArgumentType<RotationResolver>;
  /**
   * A blockstate argument which will provide rich parsing for specifying
   * the specific block variant and then the block entity NBT if applicable.
   *
   * @return argument
  */
  static blockState(): ArgumentType<BlockState>;
  /**
   * An ItemStack argument which provides rich parsing for
   * specifying item material and item NBT information.
   *
   * @return argument
  */
  static itemStack(): ArgumentType<ItemStack>;
  /**
   * An item predicate argument.
   *
   * @return argument
  */
  static itemPredicate(): ArgumentType<ItemStackPredicate>;
  /**
   * An argument for parsing {@link NamedTextColor}s.
   *
   * @return argument
  */
  static namedColor(): ArgumentType<NamedTextColor>;
  /**
   * A component argument.
   *
   * @return argument
  */
  static component(): ArgumentType<Component>;
  /**
   * A style argument.
   *
   * @return argument
  */
  static style(): ArgumentType<Style>;
  /**
   * A signed message argument.
   * This argument can be resolved to retrieve the underlying
   * signed message.
   *
   * @return argument
  */
  static signedMessage(): ArgumentType<SignedMessageResolver>;
  /**
   * A scoreboard display slot argument.
   *
   * @return argument
  */
  static scoreboardDisplaySlot(): ArgumentType<DisplaySlot>;
  /**
   * A namespaced key argument.
   *
   * @return argument
  */
  static namespacedKey(): ArgumentType<NamespacedKey>;
  static key(): ArgumentType<Key>;
  /**
   * An inclusive range of integers that may be unbounded on either end.
   *
   * @return argument
  */
  static integerRange(): ArgumentType<IntegerRangeProvider>;
  /**
   * An inclusive range of doubles that may be unbounded on either end.
   *
   * @return argument
  */
  static doubleRange(): ArgumentType<DoubleRangeProvider>;
  /**
   * A world argument.
   *
   * @return argument
  */
  static world(): ArgumentType<World>;
  /**
   * A game mode argument.
   *
   * @return argument
  */
  static gameMode(): ArgumentType<GameMode>;
  /**
   * An argument for getting a heightmap type.
   *
   * @return argument
  */
  static heightMap(): ArgumentType<HeightMap>;
  /**
   * A uuid argument.
   *
   * @return argument
  */
  static uuid(): ArgumentType<UUID>;
  /**
   * An objective criteria argument
   *
   * @return argument
  */
  static objectiveCriteria(): ArgumentType<Criteria>;
  /**
   * An entity anchor argument.
   *
   * @return argument
  */
  static entityAnchor(): ArgumentType<LookAnchor>;
  /**
   * A time argument, returning the number of ticks.
   * Examples:
   * 
   *  "1d"
   *  "5s"
   *  "2"
   *  "6t"
   * 
   *
   * @return argument
  */
  static time(): ArgumentType<number>;
  /**
   * A time argument, returning the number of ticks.
   * Examples:
   * 
   *  "1d"
   *  "5s"
   *  "2"
   *  "6t"
   * 
   *
   * @param mintime The minimum time required for this argument.
   * @return argument
  */
  static time(mintime: number): ArgumentType<number>;
  /**
   * A template mirror argument
   *
   * @return argument
   * @see Mirror
  */
  static templateMirror(): ArgumentType<Mirror>;
  /**
   * A template rotation argument.
   *
   * @return argument
   * @see StructureRotation
  */
  static templateRotation(): ArgumentType<StructureRotation>;
  /**
   * An argument for a resource in a {@link org.bukkit.Registry}.
   *
   * @param registryKey the registry's key
   * @return argument
   * @param  the registry value type
  */
  static resource<T>(registryKey: RegistryKey<T>): ArgumentType<T>;
  /**
   * An argument for a typed key for a {@link org.bukkit.Registry}.
   *
   * @param registryKey the registry's key
   * @return argument
   * @param  the registry value type
   * @see RegistryArgumentExtractor#getTypedKey(com.mojang.brigadier.context.CommandContext, RegistryKey, String)
  */
  static resourceKey<T>(registryKey: RegistryKey<T>): ArgumentType<TypedKey<T>>;
}
/**
 * Utilities for extracting registry-related arguments from a {@link CommandContext}.
*/
export class RegistryArgumentExtractor {
  /**
   * Gets a typed key argument from a command context.
   *
   * @param context the command context
   * @param registryKey the registry key for the typed key
   * @param name the argument name
   * @return the typed key argument
   * @param  the value type
   * @param  the sender type
   * @throws IllegalArgumentException if the registry key doesn't match the typed key
  */
  static getTypedKey<T>(context: CommandContext<S>, registryKey: RegistryKey<T>, name: string): TypedKey<T>;
}

}
declare module 'io.papermc.paper.datacomponent.item.ResolvableProfile' {
import { Collection, UUID } from 'java.util';
import { ResolvableProfile } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ProfileProperty } from 'com.destroystokyo.paper.profile';
/**
 * Builder for {@link ResolvableProfile}.
*/
export class Builder extends DataComponentBuilder<ResolvableProfile> {
  /**
   * Sets the name for this profile. Must be 16-or-less
   * characters and not contain invalid characters.
   *
   * @param name the name
   * @return the builder for chaining
   * @see #name()
  */
  name(name: string | null): Builder;
  /**
   * Sets the UUID for this profile.
   *
   * @param uuid the UUID
   * @return the builder for chaining
   * @see #uuid()
  */
  uuid(uuid: UUID | null): Builder;
  /**
   * Adds a property to this profile.
   *
   * @param property the property
   * @return the builder for chaining
   * @see #properties()
  */
  addProperty(property: ProfileProperty): Builder;
  /**
   * Adds properties to this profile.
   *
   * @param properties the properties
   * @return the builder for chaining
   * @see #properties()
  */
  addProperties(properties: Collection<ProfileProperty>): Builder;
}

}
declare module 'io.papermc.paper.datacomponent' {
import { Component } from 'net.kyori.adventure.text';
import { Key } from 'net.kyori.adventure.key';
import { List } from 'java.util';
import { MapPostProcessing } from 'io.papermc.paper.item';
import { ItemContainerContents, UseRemainder, CustomModelData, UseCooldown, MapItemColor, ResolvableProfile, BlockItemDataProperties, ItemLore, ChargedProjectiles, OminousBottleAmplifier, LodestoneTracker, ItemAdventurePredicate, BannerPatternLayers, PotionContents, BundleContents, MapId, Fireworks, PotDecorations, Tool, WrittenBookContent, Repairable, WritableBookContent, DamageResistant, FoodProperties, MapDecorations, Unbreakable, Consumable, ItemEnchantments, ItemAttributeModifiers, SuspiciousStewEffects, DyedItemColor, JukeboxPlayable, SeededContainerLoot, ItemArmorTrim, Equippable, Enchantable, DeathProtection } from 'io.papermc.paper.datacomponent.item';
import { NonValued, Valued } from 'io.papermc.paper.datacomponent.DataComponentType';
import { ItemRarity } from 'org.bukkit.inventory';
import { MusicInstrument, DyeColor, FireworkEffect, Keyed } from 'org.bukkit';
/**
 * Base builder type for all component builders.
 *
 * @param  built component type
*/
export class DataComponentBuilder<C> {
  /**
   * Builds the immutable component value.
   *
   * @return a new component value
  */
  build(): C;
}
export class DataComponentType extends Keyed {
  /**
   * Checks if this data component type is persistent, or
   * that it will be saved with any itemstack it's attached to.
   *
   * @return `true` if persistent, `false` otherwise
  */
  isPersistent(): boolean;
}
/**
 * All the different types of data that {@link org.bukkit.inventory.ItemStack ItemStacks}
 * and {@link org.bukkit.inventory.ItemType ItemTypes} can have.
*/
export class DataComponentTypes {
  /**
   * Controls the maximum stacking size of this item.
   * 
   * Values greater than 1 are mutually exclusive with the {@link #MAX_DAMAGE} component.
  */
  static readonly MAX_STACK_SIZE: Valued<number>;
  /**
   * Controls the maximum amount of damage than an item can take,
   * if not present, the item cannot be damaged.
   * 
   * Mutually exclusive with the {@link #MAX_STACK_SIZE} component greater than 1.
   *
   * @see #DAMAGE
  */
  static readonly MAX_DAMAGE: Valued<number>;
  /**
   * The amount of durability removed from an item,
   * for damageable items (with the {@link #MAX_DAMAGE} component), has an implicit default value of: `0`.
   *
   * @see #MAX_DAMAGE
  */
  static readonly DAMAGE: Valued<number>;
  /**
   * If set, the item will not lose any durability when used.
  */
  static readonly UNBREAKABLE: Valued<Unbreakable>;
  /**
   * Custom name override for an item (as set by renaming with an Anvil).
   *
   * @see #ITEM_NAME
  */
  static readonly CUSTOM_NAME: Valued<Component>;
  /**
   * When present, replaces default item name with contained chat component.
   * 
   * Differences from {@link #CUSTOM_NAME}:
   * 
   * can't be changed or removed in Anvil
   * is not styled with italics when displayed to player
   * does not show labels where applicable
   *      (for example: banner markers, names in item frames)
   * 
   *
   * @see #CUSTOM_NAME
  */
  static readonly ITEM_NAME: Valued<Component>;
  static readonly ITEM_MODEL: Valued<Key>;
  /**
   * Additional lines to include in an item's tooltip.
  */
  static readonly LORE: Valued<ItemLore>;
  /**
   * Controls the color of the item name.
  */
  static readonly RARITY: Valued<ItemRarity>;
  /**
   * Controls the enchantments on an item.
   * 
   * If not present on a non-enchantment book, this item will not work in an anvil.
   *
   * @see #STORED_ENCHANTMENTS
  */
  static readonly ENCHANTMENTS: Valued<ItemEnchantments>;
  /**
   * Controls which blocks a player in Adventure mode can place on with this item.
  */
  static readonly CAN_PLACE_ON: Valued<ItemAdventurePredicate>;
  /**
   * Controls which blocks a player in Adventure mode can break with this item.
  */
  static readonly CAN_BREAK: Valued<ItemAdventurePredicate>;
  /**
   * Holds attribute modifiers applied to any item,
   * if not set, has an implicit default value based on the item type's
   * default attributes (e.g. attack damage for weapons).
  */
  static readonly ATTRIBUTE_MODIFIERS: Valued<ItemAttributeModifiers>;
  /**
   * Controls the minecraft:custom_model_data property in the item model.
  */
  static readonly CUSTOM_MODEL_DATA: Valued<CustomModelData>;
  /**
   * If set, disables 'additional' tooltip part which comes from the item type
   * (e.g. content of a shulker).
  */
  static readonly HIDE_ADDITIONAL_TOOLTIP: NonValued;
  /**
   * If set, it will completely hide whole item tooltip (that includes item name).
  */
  static readonly HIDE_TOOLTIP: NonValued;
  /**
   * The additional experience cost required to modify an item in an Anvil.
   * If not present, has an implicit default value of: `0`.
  */
  static readonly REPAIR_COST: Valued<number>;
  /**
   * Overrides the enchantment glint effect on an item.
   * If not present, default behaviour is used.
  */
  static readonly ENCHANTMENT_GLINT_OVERRIDE: Valued<boolean>;
  /**
   * Marks that a projectile item would be intangible when fired
   * (i.e. can only be picked up by a creative mode player).
  */
  static readonly INTANGIBLE_PROJECTILE: NonValued;
  /**
   * Controls potential food benefits gained when consuming the item the component is applied on.
   * Requires the {@link #CONSUMABLE} component to allow consumption in the first place.
  */
  static readonly FOOD: Valued<FoodProperties>;
  static readonly CONSUMABLE: Valued<Consumable>;
  static readonly USE_REMAINDER: Valued<UseRemainder>;
  static readonly USE_COOLDOWN: Valued<UseCooldown>;
  /**
   * If present, this item will not take damage from the specified damage types.
  */
  static readonly DAMAGE_RESISTANT: Valued<DamageResistant>;
  /**
   * Controls the behavior of the item as a tool.
  */
  static readonly TOOL: Valued<Tool>;
  static readonly ENCHANTABLE: Valued<Enchantable>;
  static readonly EQUIPPABLE: Valued<Equippable>;
  static readonly REPAIRABLE: Valued<Repairable>;
  static readonly GLIDER: NonValued;
  static readonly TOOLTIP_STYLE: Valued<Key>;
  static readonly DEATH_PROTECTION: Valued<DeathProtection>;
  /**
   * Stores list of enchantments and their levels for an Enchanted Book.
   * Unlike {@link #ENCHANTMENTS}, the effects provided by enchantments
   * do not apply from this component.
   * 
   * If not present on an Enchanted Book, it will not work in an anvil.
   * 
   * Has an undefined behaviour if present on an item that is not an Enchanted Book
   * (currently the presence of this component allows enchantments from {@link #ENCHANTMENTS}
   * to be applied as if this item was an Enchanted Book).
   *
   * @see #ENCHANTMENTS
  */
  static readonly STORED_ENCHANTMENTS: Valued<ItemEnchantments>;
  /**
   * Represents a color applied to a dyeable item (in the {@link io.papermc.paper.registry.keys.tags.ItemTypeTagKeys#DYEABLE} item tag).
  */
  static readonly DYED_COLOR: Valued<DyedItemColor>;
  /**
   * Represents the tint of the decorations on the {@link org.bukkit.inventory.ItemType#FILLED_MAP} item.
  */
  static readonly MAP_COLOR: Valued<MapItemColor>;
  /**
   * References the shared map state holding map contents and markers for a {@link org.bukkit.inventory.ItemType#FILLED_MAP}.
  */
  static readonly MAP_ID: Valued<MapId>;
  /**
   * Holds a list of markers to be placed on a {@link org.bukkit.inventory.ItemType#FILLED_MAP} (used for Explorer Maps).
  */
  static readonly MAP_DECORATIONS: Valued<MapDecorations>;
  /**
   * Internal map item state used in the map crafting recipe.
  */
  static readonly MAP_POST_PROCESSING: Valued<MapPostProcessing>;
  /**
   * Holds all projectiles that have been loaded into a Crossbow.
   * If not present, the Crossbow is not charged.
  */
  static readonly CHARGED_PROJECTILES: Valued<ChargedProjectiles>;
  /**
   * Holds all items stored inside a Bundle.
   * If removed, items cannot be added to the Bundle.
  */
  static readonly BUNDLE_CONTENTS: Valued<BundleContents>;
  /**
   * Holds the contents of a potion (Potion, Splash Potion, Lingering Potion),
   * or potion applied to a Tipped Arrow.
  */
  static readonly POTION_CONTENTS: Valued<PotionContents>;
  /**
   * Holds the effects that will be applied when consuming Suspicious Stew.
  */
  static readonly SUSPICIOUS_STEW_EFFECTS: Valued<SuspiciousStewEffects>;
  /**
   * Holds the contents in a Book and Quill.
  */
  static readonly WRITABLE_BOOK_CONTENT: Valued<WritableBookContent>;
  /**
   * Holds the contents and metadata of a Written Book.
  */
  static readonly WRITTEN_BOOK_CONTENT: Valued<WrittenBookContent>;
  /**
   * Holds the trims applied to an item in recipes
  */
  static readonly TRIM: Valued<ItemArmorTrim>;
  /**
   * Holds the instrument type used by a Goat Horn.
  */
  static readonly INSTRUMENT: Valued<MusicInstrument>;
  /**
   * Controls the amplifier amount for an Ominous Bottle's Bad Omen effect.
  */
  static readonly OMINOUS_BOTTLE_AMPLIFIER: Valued<OminousBottleAmplifier>;
  static readonly JUKEBOX_PLAYABLE: Valued<JukeboxPlayable>;
  /**
   * List of recipes that should be unlocked when using the Knowledge Book item.
  */
  static readonly RECIPES: Valued<Key[]>;
  /**
   * If present, specifies that the Compass is a Lodestone Compass.
  */
  static readonly LODESTONE_TRACKER: Valued<LodestoneTracker>;
  /**
   * Stores the explosion crafted in a Firework Star.
  */
  static readonly FIREWORK_EXPLOSION: Valued<FireworkEffect>;
  /**
   * Stores all explosions crafted into a Firework Rocket, as well as flight duration.
  */
  static readonly FIREWORKS: Valued<Fireworks>;
  /**
   * Controls the skin displayed on a Player Head.
  */
  static readonly PROFILE: Valued<ResolvableProfile>;
  /**
   * Controls the sound played by a Player Head when placed on a Note Block.
  */
  static readonly NOTE_BLOCK_SOUND: Valued<Key>;
  /**
   * Stores the additional patterns applied to a Banner or Shield.
  */
  static readonly BANNER_PATTERNS: Valued<BannerPatternLayers>;
  /**
   * Stores the base color for a Shield.
  */
  static readonly BASE_COLOR: Valued<DyeColor>;
  /**
   * Stores the Sherds applied to each side of a Decorated Pot.
  */
  static readonly POT_DECORATIONS: Valued<PotDecorations>;
  /**
   * Holds the contents of container blocks (Chests, Shulker Boxes) in item form.
  */
  static readonly CONTAINER: Valued<ItemContainerContents>;
  /**
   * Holds block state properties to apply when placing a block.
  */
  static readonly BLOCK_DATA: Valued<BlockItemDataProperties>;
  /**
   * Holds the unresolved loot table and seed of a container-like block.
  */
  static readonly CONTAINER_LOOT: Valued<SeededContainerLoot>;
}

}
declare module 'io.papermc.paper.registry.tag' {
import { Keyed as net_kyori_adventure_key_Keyed, Key } from 'net.kyori.adventure.key';
import { RegistryKey } from 'io.papermc.paper.registry';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { Keyed } from 'org.bukkit';
/**
 * A named {@link RegistryKeySet} which are created
 * via the datapack tag system.
 *
 * @param 
 * @see org.bukkit.Tag
 * @see org.bukkit.Registry#getTag(TagKey)
*/
export class Tag<T> extends RegistryKeySet<T> {
  /**
   * Get the identifier for this named set.
   *
   * @return the tag key identifier
  */
  tagKey(): TagKey<T>;
}
export class TagKey<T> extends net_kyori_adventure_key_Keyed {
  /**
   * Creates a new tag key for a registry.
   *
   * @param registryKey the registry for the tag
   * @param key         the specific key for the tag
   * @param          the registry value type
   * @return a new tag key
  */
  static create<T>(registryKey: RegistryKey<T>, key: Key): TagKey<T>;
  /**
   * Creates a new tag key for a registry.
   *
   * @param registryKey the registry for the tag
   * @param key         the string version of a {@link Key} that will be passed to {@link Key#key(String)} for parsing.
   * @param          the registry value type
   * @return a new tag key
   * @see Key#key(String)
  */
  static create<T>(registryKey: RegistryKey<T>, key: string): TagKey<T>;
  /**
   * Get the registry key for this tag key.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
}

}
declare module 'io.papermc.paper.plugin.provider.util' {
import { Runnable, ClassLoader, Class } from 'java.lang';
/**
 * An internal utility type that holds logic for loading a provider-like type from a classloaders.
 * Provides, at least in the context of this utility, define themselves as implementations of a specific parent
 * interface/type, e.g. {@link org.bukkit.plugin.java.JavaPlugin} and implement a no-args constructor.
*/
export class ProviderUtil {
  /**
   * Loads the class found at the provided fully qualified class name from the passed classloader, creates a new
   * instance of it using the no-args constructor, that should exist as per this method contract, and casts it to the
   * provided parent type.
   *
   * @param clazz     the fully qualified name of the class to load
   * @param classType the parent type that the created object found at the `clazz` name should be cast to
   * @param loader    the loader from which the class should be loaded
   * @param        the generic type of the parent class the created object will be cast to
   * @return the object instantiated from the class found at the provided FQN, cast to the parent type
  */
  static loadClass<T>(clazz: string, classType: Class<T>, loader: ClassLoader): T;
  /**
   * Loads the class found at the provided fully qualified class name from the passed classloader, creates a new
   * instance of it using the no-args constructor, that should exist as per this method contract, and casts it to the
   * provided parent type.
   *
   * @param clazz     the fully qualified name of the class to load
   * @param classType the parent type that the created object found at the `clazz` name should be cast to
   * @param loader    the loader from which the class should be loaded
   * @param onError   a runnable that is executed before any unknown exception is raised through a sneaky throw.
   * @param        the generic type of the parent class the created object will be cast to
   * @return the object instantiated from the class found at the provided fully qualified class name, cast to the
   * parent type
  */
  static loadClass<T>(clazz: string, classType: Class<T>, loader: ClassLoader, onError: Runnable | null): T;
}

}
declare module 'io.papermc.paper.datacomponent.item.ItemContainerContents' {
import { List } from 'java.util';
import { ItemContainerContents } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ItemStack } from 'org.bukkit.inventory';
export class Builder extends DataComponentBuilder<ItemContainerContents> {
  /**
   * Adds an item stack to the container.
   *
   * @param stack the item stack
   * @return the builder for chaining
   * @see #contents()
  */
  add(stack: ItemStack): Builder;
  /**
   * Adds item stacks to the container.
   *
   * @param stacks the item stacks
   * @return the builder for chaining
   * @see #contents()
  */
  addAll(stacks: ItemStack[]): Builder;
}

}
declare module 'io.papermc.paper.datacomponent.item.Fireworks' {
import { List } from 'java.util';
import { Fireworks } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { FireworkEffect } from 'org.bukkit';
/**
 * Builder for {@link Fireworks}.
*/
export class Builder extends DataComponentBuilder<Fireworks> {
  /**
   * Sets the number of gunpowder used in this builder.
   *
   * @param duration duration
   * @return the builder for chaining
   * @see #flightDuration()
  */
  flightDuration(duration: number): Builder;
  /**
   * Adds an explosion to this builder.
   *
   * @param effect effect
   * @return the builder for chaining
   * @see #effects()
  */
  addEffect(effect: FireworkEffect): Builder;
  /**
   * Adds explosions to this builder.
   *
   * @param effects effects
   * @return the builder for chaining
   * @see #effects()
  */
  addEffects(effects: FireworkEffect[]): Builder;
}

}
declare module 'io.papermc.paper.plugin.provider.entrypoint' {
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
/**
 * A dependency context is a read-only abstraction of a type/concept that can resolve dependencies between plugins.
 * 
 * This may for example be the server wide plugin manager itself, capable of validating if a dependency exists between
 * two {@link PluginMeta} instances, however the implementation is not limited to such a concrete use-case.
*/
export class DependencyContext {
  /**
   * Computes if the passed {@link PluginMeta} defined the passed dependency as a transitive dependency.
   * A transitive dependency, as implied by its name, may not have been configured directly by the passed plugin
   * but could also simply be a dependency of a dependency.
   * 
   * A simple example of this method would be
   * {@code
   * dependencyContext.isTransitiveDependency(pluginMetaA, pluginMetaC);
   * }
   * which would return `true` if `pluginMetaA` directly or indirectly depends on `pluginMetaC`.
   *
   * @param plugin the plugin meta this computation should consider the requester of the dependency status for the
   *               passed potential dependency.
   * @param depend the potential transitive dependency of the `plugin` parameter.
   * @return a simple boolean flag indicating if `plugin` considers `depend` as a transitive dependency.
  */
  isTransitiveDependency(plugin: PluginMeta, depend: PluginMeta): boolean;
  /**
   * Computes if this dependency context is aware of a dependency that provides/matches the passed identifier.
   * 
   * A dependency in this methods context is any dependable artefact. It does not matter if anything actually depends
   * on said artefact, its mere existence as a potential dependency is enough for this method to consider it a
   * dependency. If this dependency context is hence aware of an artefact with the matching identifier, this
   * method returns `true`.
   *
   * @param pluginIdentifier the unique identifier of the dependency with which to probe this dependency context.
   * @return a plain boolean flag indicating if this dependency context is aware of a potential dependency with the
   * passed identifier.
  */
  hasDependency(pluginIdentifier: string): boolean;
}

}
declare module 'io.papermc.paper.datapack' {
import { Component } from 'net.kyori.adventure.text';
import { Registrar } from 'io.papermc.paper.plugin.lifecycle.event.registrar';
import { Set, Collection, Map } from 'java.util';
import { URI } from 'java.net';
import { Compatibility } from 'io.papermc.paper.datapack.Datapack';
import { Configurer } from 'io.papermc.paper.datapack.DatapackRegistrar';
import { Consumer } from 'java.util.function';
import { Path } from 'java.nio.file';
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
import { FeatureFlag } from 'org.bukkit';
/**
 * The registrar for datapacks. The event for this registrar
 * is called anytime the game tries to discover datapacks at any of the
 * configured locations. This means that if a datapack should stay available to the server,
 * it must always be discovered whenever this event fires.
 * 
 * An example of a plugin loading a datapack from within its own jar is below,
 * assuming the datapack is included under `resources/pack` folder:
 * {@code
 * public class YourPluginBootstrap implements PluginBootstrap {
 *     @Override
 *     public void bootstrap(BootstrapContext context) {
 *         final LifecycleEventManager manager = context.getLifecycleManager();
 *         manager.registerEventHandler(LifecycleEvents.DATAPACK_DISCOVERY, event -> {
 *             DatapackRegistrar registrar = event.registrar();
 *             try {
 *                 final URI uri = Objects.requireNonNull(
 *                     YourPluginBootstrap.class.getResource("/pack")
 *                 ).toURI();
 *                 registrar.discoverPack(uri, "packId");
 *             } catch (final URISyntaxException | IOException e) {
 *                 throw new RuntimeException(e);
 *             }
 *         });
 *     }
 * }
 * }
 *
 * @see io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents#DATAPACK_DISCOVERY
*/
export class DatapackRegistrar extends Registrar {
  /**
   * Checks if a datapack with the specified name has been discovered.
   *
   * @param name the name of the pack
   * @return true if the pack has been discovered
   * @see Datapack#getName()
  */
  hasPackDiscovered(name: string): boolean;
  /**
   * Gets a discovered datapack by its name.
   *
   * @param name the name of the pack
   * @return the datapack
   * @throws java.util.NoSuchElementException if the pack is not discovered
   * @see Datapack#getName()
  */
  getDiscoveredPack(name: string): DiscoveredDatapack;
  /**
   * Removes a discovered datapack by its name.
   *
   * @param name the name of the pack
   * @return true if the pack was removed
   * @see Datapack#getName()
  */
  removeDiscoveredPack(name: string): boolean;
  /**
   * Gets all discovered datapacks.
   *
   * @return an unmodifiable map of discovered packs
  */
  get discoveredPacks(): Map<string,DiscoveredDatapack>;
  /**
   * Discovers a datapack at the specified {@link URI} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param uri the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(uri: URI, id: string): DiscoveredDatapack | null;
  /**
   * Discovers a datapack at the specified {@link URI} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param uri the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @param configurer a configurer for extra options
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(uri: URI, id: string, configurer: Consumer<Configurer>): DiscoveredDatapack | null;
  /**
   * Discovers a datapack at the specified {@link Path} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param path the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(path: Path, id: string): DiscoveredDatapack | null;
  /**
   * Discovers a datapack at the specified {@link Path} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param path the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @param configurer a configurer for extra options
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(path: Path, id: string, configurer: Consumer<Configurer>): DiscoveredDatapack | null;
  /**
   * Discovers a datapack at the specified {@link URI} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param pluginMeta the plugin which will be the "owner" of this datapack
   * @param uri the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @param configurer a configurer for extra options
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(pluginMeta: PluginMeta, uri: URI, id: string, configurer: Consumer<Configurer>): DiscoveredDatapack | null;
  /**
   * Discovers a datapack at the specified {@link Path} with the id.
   * Symlinks obey the `allowed_symlinks.txt` in the server root directory.
   *
   * @param pluginMeta the plugin which will be the "owner" of this datapack
   * @param path the location of the pack
   * @param id a unique id (will be combined with plugin for the datapacks name)
   * @param configurer a configurer for extra options
   * @return the discovered datapack (or null if it failed)
   * @throws IOException if any IO error occurs
  */
  discoverPack(pluginMeta: PluginMeta, path: Path, id: string, configurer: Consumer<Configurer>): DiscoveredDatapack | null;
}
/**
 * Source of a datapack.
*/
export class DatapackSource {
  static readonly DEFAULT: DatapackSource;
  static readonly BUILT_IN: DatapackSource;
  static readonly FEATURE: DatapackSource;
  static readonly WORLD: DatapackSource;
  static readonly SERVER: DatapackSource;
  static readonly PLUGIN: DatapackSource;
  static create(name: string): DatapackSource;
}
export class DatapackManager {
  /**
   * Triggers a refresh of the available and selected datapacks. This
   * can find new datapacks, remove old ones, and update the metadata for
   * existing datapacks. Some of these changes will only take effect
   * after the next {@link org.bukkit.Server#reloadData()} or `/minecraft:reload`.
  */
  refreshPacks(): void;
  /**
   * Gets a datapack by name. May require calling {@link #refreshPacks()} before
   * to get the latest pack information.
   *
   * @param name the name/id of the datapack
   * @return the datapack, or null if not found
  */
  getPack(name: string): Datapack | null;
  /**
   * Gets the available datapacks. May require calling {@link #refreshPacks()} before
   * to get the latest pack information.
   *
   * @return all the packs known to the server
  */
  get packs(): Collection<Datapack>;
  /**
   * Gets the enabled datapacks. May require calling {@link #refreshPacks()} before
   * to get the latest pack information.
   *
   * @return all the packs which are currently enabled
  */
  get enabledPacks(): Collection<Datapack>;
}
/**
 * This is a snapshot of a datapack on the server. It
 * won't be updated as datapacks are updated.
*/
export class Datapack extends DiscoveredDatapack {
  /**
   * Gets the enabled state of this pack.
   *
   * @return whether the pack is currently enabled
  */
  isEnabled(): boolean;
  /**
   * Changes the enabled state of this pack. Will
   * cause a reload of resources (`/minecraft:reload`) if
   * any change happens.
   *
   * @param enabled true to enable, false to disable
   * @apiNote This method may be deprecated in the future as setters on a "snapshot" type are undesirable.
  */
  setEnabled(enabled: boolean): void;
  /**
   * Computes the component vanilla Minecraft uses
   * to display this datapack. Includes the {@link #getSource()},
   * {@link #getDescription()}, {@link #getName()}, and the enabled state.
   *
   * @return a new component
  */
  computeDisplayName(): Component;
}
/**
 * Represents a snapshot of a datapack that the server has found by
 * searching available sources. It may or may not be enabled and isn't
 * guaranteed to be available. This object won't be
 * updated as datapacks are updated.
 * @see DatapackRegistrar
*/
export class DiscoveredDatapack {
  /**
   * Gets the name/id of this datapack.
   *
   * @return the name of the pack
  */
  get name(): string;
  /**
   * Gets the title component of this datapack.
   *
   * @return the title
  */
  get title(): Component;
  /**
   * Gets the description component of this datapack.
   *
   * @return the description
  */
  get description(): Component;
  /**
   * Gets if this datapack is required.
   * 
   * A "required" datapack will always be enabled on server startup, even if previously disabled.
   *
   * @return true if the pack is required
  */
  isRequired(): boolean;
  /**
   * Gets the compatibility status of this pack.
   *
   * @return the compatibility of the pack
  */
  get compatibility(): Compatibility;
  /**
   * Gets the set of required features for this datapack.
   *
   * @return the set of required features
  */
  get requiredFeatures(): Set<FeatureFlag>;
  /**
   * Gets the source for this datapack.
   *
   * @return the pack source
  */
  get source(): DatapackSource;
}

}
declare module 'io.papermc.paper.ban' {
import { Class } from 'java.lang';
import { ProfileBanList, IpBanList } from 'org.bukkit.ban';
/**
 * Represents a ban-type that a {@link BanList} may track.
 * It enforces the correct return value at compile time.
*/
export class BanListType<T> {
  /**
   * Banned IP addresses
  */
  static readonly IP: BanListType<IpBanList>;
  /**
   * Banned player profiles
  */
  static readonly PROFILE: BanListType<ProfileBanList>;
  /**
   * Returns the type class of the ban list used generically
   *
   * @return the type class
  */
  typeClass(): Class<T>;
}

}
declare module 'io.papermc.paper.plugin' {
import { Set, List } from 'java.util';
import { Permissible, Permission } from 'org.bukkit.permissions';
/**
 * A permission manager implementation to keep backwards compatibility partially alive with existing plugins that used
 * the bukkit one before.
*/
export class PermissionManager {
  /**
   * Gets a {@link Permission} from its fully qualified name
   *
   * @param name Name of the permission
   * @return Permission, or null if none
  */
  getPermission(name: string): Permission | null;
  /**
   * Adds a {@link Permission} to this plugin manager.
   * 
   * If a permission is already defined with the given name of the new
   * permission, an exception will be thrown.
   *
   * @param perm Permission to add
   * @throws IllegalArgumentException Thrown when a permission with the same
   *                                  name already exists
  */
  addPermission(perm: Permission): void;
  /**
   * Removes a {@link Permission} registration from this plugin manager.
   * 
   * If the specified permission does not exist in this plugin manager,
   * nothing will happen.
   * 
   * Removing a permission registration will not remove the
   * permission from any {@link Permissible}s that have it.
   *
   * @param perm Permission to remove
  */
  removePermission(perm: Permission): void;
  /**
   * Removes a {@link Permission} registration from this plugin manager.
   * 
   * If the specified permission does not exist in this plugin manager,
   * nothing will happen.
   * 
   * Removing a permission registration will not remove the
   * permission from any {@link Permissible}s that have it.
   *
   * @param name Permission to remove
  */
  removePermission(name: string): void;
  /**
   * Gets the default permissions for the given op status
   *
   * @param op Which set of default permissions to get
   * @return The default permissions
  */
  getDefaultPermissions(op: boolean): Set<Permission>;
  /**
   * Recalculates the defaults for the given {@link Permission}.
   * 
   * This will have no effect if the specified permission is not registered
   * here.
   *
   * @param perm Permission to recalculate
  */
  recalculatePermissionDefaults(perm: Permission): void;
  /**
   * Subscribes the given Permissible for information about the requested
   * Permission, by name.
   * 
   * If the specified Permission changes in any form, the Permissible will
   * be asked to recalculate.
   *
   * @param permission  Permission to subscribe to
   * @param permissible Permissible subscribing
  */
  subscribeToPermission(permission: string, permissible: Permissible): void;
  /**
   * Unsubscribes the given Permissible for information about the requested
   * Permission, by name.
   *
   * @param permission  Permission to unsubscribe from
   * @param permissible Permissible subscribing
  */
  unsubscribeFromPermission(permission: string, permissible: Permissible): void;
  /**
   * Gets a set containing all subscribed {@link Permissible}s to the given
   * permission, by name
   *
   * @param permission Permission to query for
   * @return Set containing all subscribed permissions
  */
  getPermissionSubscriptions(permission: string): Set<Permissible>;
  /**
   * Subscribes to the given Default permissions by operator status
   * 
   * If the specified defaults change in any form, the Permissible will be
   * asked to recalculate.
   *
   * @param op          Default list to subscribe to
   * @param permissible Permissible subscribing
  */
  subscribeToDefaultPerms(op: boolean, permissible: Permissible): void;
  /**
   * Unsubscribes from the given Default permissions by operator status
   *
   * @param op          Default list to unsubscribe from
   * @param permissible Permissible subscribing
  */
  unsubscribeFromDefaultPerms(op: boolean, permissible: Permissible): void;
  /**
   * Gets a set containing all subscribed {@link Permissible}s to the given
   * default list, by op status
   *
   * @param op Default list to query for
   * @return Set containing all subscribed permissions
  */
  getDefaultPermSubscriptions(op: boolean): Set<Permissible>;
  /**
   * Gets a set of all registered permissions.
   * 
   * This set is a copy and will not be modified live.
   *
   * @return Set containing all current registered permissions
  */
  get permissions(): Set<Permission>;
  /**
   * Adds a list of permissions.
   * 
   * This is meant as an optimization for adding multiple permissions without recalculating each permission.
   *
   * @param perm permission
  */
  addPermissions(perm: Permission[]): void;
  /**
   * Clears the current registered permissinos.
   * 
   * This is used for reloading.
  */
  clearPermissions(): void;
}

}
declare module 'io.papermc.paper.datacomponent.item.Tool' {
import { Collection } from 'java.util';
import { BlockType } from 'org.bukkit.block';
import { TriState } from 'net.kyori.adventure.util';
import { Tool } from 'io.papermc.paper.datacomponent.item';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
export class Rule {
  /**
   * Blocks to match.
   *
   * @return blocks
  */
  blocks(): RegistryKeySet<BlockType>;
  /**
   * Overrides the mining speed if present and matched.
   * 
   * `true` will cause the block to mine at its most efficient speed, and drop items if the targeted block requires that.
   *
   * @return speed override
  */
  speed(): number | null;
  /**
   * Overrides whether this tool is considered 'correct' if present and matched.
   *
   * @return a tri-state
  */
  correctForDrops(): TriState;
}
/**
 * Builder for {@link Tool}.
*/
export class Builder extends DataComponentBuilder<Tool> {
  /**
   * Controls the amount of durability to remove each time a block is mined with this tool.
   *
   * @param damage durability to remove
   * @return the builder for chaining
   * @see #damagePerBlock()
  */
  damagePerBlock(damage: number): Builder;
  /**
   * Controls mining speed to use if no rules match and don't override mining speed.
   *
   * @param miningSpeed mining speed
   * @return the builder for chaining
   * @see #defaultMiningSpeed()
  */
  defaultMiningSpeed(miningSpeed: number): Builder;
  /**
   * Adds a rule to the tool that controls the breaking speed / damage per block if matched.
   *
   * @param rule rule
   * @return the builder for chaining
   * @see #rules()
  */
  addRule(rule: Rule): Builder;
  /**
   * Adds rules to the tool that control the breaking speed / damage per block if matched.
   *
   * @param rules rules
   * @return the builder for chaining
   * @see #rules()
  */
  addRules(rules: Collection<Rule>): Builder;
}

}
declare module 'io.papermc.paper.event.packet' {
import { PlayerEvent } from 'org.bukkit.event.player';
import { HandlerList } from 'org.bukkit.event';
import { ChunkEvent } from 'org.bukkit.event.world';
import { Player } from 'org.bukkit.entity';
import { Chunk } from 'org.bukkit';
/**
 * Is called when a {@link Player} receives a chunk unload packet.
 * 
 * Should only be used for packet/clientside related stuff.
 * Not intended for modifying server side.
*/
export class PlayerChunkUnloadEvent extends ChunkEvent {
  constructor(chunk: Chunk, player: Player);
  get player(): Player;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a `minecraft:client_tick_end` packet is received by the server.
*/
export class ClientTickEndEvent extends PlayerEvent {
  constructor(player: Player);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Is called when a {@link Player} receives a {@link Chunk}
 * 
 * Can for example be used for spawning a fake entity when the player receives a chunk.
 * 
 * Should only be used for packet/clientside related stuff.
 * Not intended for modifying server side state.
*/
export class PlayerChunkLoadEvent extends ChunkEvent {
  constructor(chunk: Chunk, player: Player);
  get player(): Player;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}

}
declare module 'io.papermc.paper.event.player.PlayerFailMoveEvent' {
import { Enum } from 'java.lang';
export class FailReason extends Enum<FailReason> {
  static readonly MOVED_INTO_UNLOADED_CHUNK: FailReason;
  static readonly MOVED_TOO_QUICKLY: FailReason;
  static readonly MOVED_WRONGLY: FailReason;
  static readonly CLIPPED_INTO_BLOCK: FailReason;
  static valueOf(name: string): FailReason;
  static values(): FailReason[];
}

}
declare module 'io.papermc.paper.datacomponent.item.CustomModelData' {
import { List } from 'java.util';
import { CustomModelData } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { Color } from 'org.bukkit';
/**
 * Builder for {@link CustomModelData}.
*/
export class Builder extends DataComponentBuilder<CustomModelData> {
  /**
   * Adds a float to this custom model data.
   *
   * @param f the float
   * @return the builder for chaining
   * @see #floats()
  */
  addFloat(f: number): Builder;
  /**
   * Adds multiple floats to this custom model data.
   *
   * @param floats the floats
   * @return the builder for chaining
   * @see #floats()
  */
  addFloats(floats: number[]): Builder;
  /**
   * Adds a flag to this custom model data.
   *
   * @param flag the flag
   * @return the builder for chaining
   * @see #flags()
  */
  addFlag(flag: boolean): Builder;
  /**
   * Adds multiple flags to this custom model data.
   *
   * @param flags the flags
   * @return the builder for chaining
   * @see #flags()
  */
  addFlags(flags: boolean[]): Builder;
  /**
   * Adds a string to this custom model data.
   *
   * @param string the string
   * @return the builder for chaining
   * @see #strings()
  */
  addString(string: string): Builder;
  /**
   * Adds multiple strings to this custom model data.
   *
   * @param strings the strings
   * @return the builder for chaining
   * @see #strings()
  */
  addStrings(strings: string[]): Builder;
  /**
   * Adds a color to this custom model data.
   *
   * @param color the color
   * @return the builder for chaining
   * @see #colors()
  */
  addColor(color: Color): Builder;
  /**
   * Adds multiple colors to this custom model data.
   *
   * @param colors the colors
   * @return the builder for chaining
   * @see #colors()
  */
  addColors(colors: Color[]): Builder;
}

}
declare module 'io.papermc.paper.entity' {
import { Enum } from 'java.lang';
import { Collection } from 'java.util';
import { Source } from 'net.kyori.adventure.sound.Sound';
import { TriState } from 'net.kyori.adventure.util';
import { ItemStack } from 'org.bukkit.inventory';
import { Sound, DyeColor } from 'org.bukkit';
import { LivingEntity, Entity, Item, Fish } from 'org.bukkit.entity';
/**
 * Represents an entity that can be sheared.
*/
export class Shearable extends Entity {
  /**
   * Forces the entity to be sheared and then play the effect as if it were sheared by a player.
   * This will cause the entity to be sheared, even if {@link Shearable#readyToBeSheared()} is false.
   * 
   * Some shearing behavior may cause the entity to no longer be valid
   * due to it being replaced by a different entity.
  */
  shear(): void;
  /**
   * Forces the entity to be sheared and then play the effect as if it were sheared by the provided source.
   * This will cause the entity to be sheared, even if {@link Shearable#readyToBeSheared()} is false.
   * 
   * Some shearing behavior may cause the entity to no longer be valid
   * due to it being replaced by a different entity.
   * 
   * This simulates the behavior of an actual shearing, which may cause events like EntityTransformEvent to be called
   * for mooshrooms, and EntityDropItemEvent to be called for sheep.
   *
   * @param source Sound source to play any sound effects on
  */
  shear(source: Source): void;
  /**
   * Gets if the entity would be able to be sheared or not naturally using shears.
   *
   * @return if the entity can be sheared
  */
  readyToBeSheared(): boolean;
}
/**
 * Represents a flag that can be set on teleportation that may
 * slightly modify the behavior.
 *
 * @see EntityState
 * @see Relative
*/
export class TeleportFlag {

}
/**
 * A result type used by {@link org.bukkit.entity.Player#give(ItemStack...)} and its overloads.
*/
export class PlayerGiveResult {
  /**
   * A collection of itemstacks that were not added to the player's inventory as they did not fit.
   * The collection is derived from the collections of items to add by creating copies of each stack that was not
   * fully added to the inventory and assigning the non-added count as their amount.
   * 
   * Itemstacks found here *may* also be found as item entities in the {@link #drops()} collection, as the
   * give logic may have dropped them.
   *
   * @return the unmodifiable collection of itemstacks that are leftover as they could not be added. Each element is a
   * copy of the input stack they are derived from.
  */
  leftovers(): Collection<ItemStack>;
  /**
   * A collection of item entities dropped as a result of this call to {@link org.bukkit.entity.Player#give(ItemStack...)}.
   * The item entities contained here are not guaranteed to match the {@link #leftovers()} as plugins may cancel the
   * spawning of item entities.
   *
   * @return the unmodifiable collection of dropped item entities.
  */
  drops(): Collection<Item>;
}
/**
 * Represents an entity that can be bucketed.
*/
export class Bucketable extends Entity {
  /**
   * Gets if this entity originated from a bucket.
   *
   * @return originated from bucket
  */
  isFromBucket(): boolean;
  /**
   * Sets if this entity originated from a bucket.
   *
   * @param fromBucket is from a bucket
  */
  setFromBucket(fromBucket: boolean): void;
  /**
   * Gets the base itemstack of this entity in a bucket form.
   *
   * @return bucket form
  */
  get baseBucketItem(): ItemStack;
  /**
   * Gets the sound that is played when this entity
   * is picked up in a bucket.
   * @return bucket pickup sound
  */
  get pickupSound(): Sound;
}
/**
 * Represents a fish that can school with other fish.
*/
export class SchoolableFish extends Fish {
  /**
   * Forces this fish to follow the given fish.
   *
   * @param leader fish to follow
  */
  startFollowing(leader: SchoolableFish): void;
  /**
   * Causes the fish to stop following their current
   * leader.
  */
  stopFollowing(): void;
  /**
   * Gets the amount of fish currently following this fish.
   *
   * @return school size
  */
  get schoolSize(): number;
  /**
   * Gets the maximum number of fish that will naturally follow this fish.
   *
   * @return max school size
  */
  get maxSchoolSize(): number;
  /**
   * Gets the fish that this entity is currently following.
   *
   * @return following fish
  */
  get schoolLeader(): SchoolableFish | null;
}
/**
 * Entities that can have their collars colored.
*/
export class CollarColorable extends LivingEntity {
  /**
   * Get the collar color of this entity
   *
   * @return the color of the collar
  */
  get collarColor(): DyeColor;
  /**
   * Set the collar color of this entity
   *
   * @param color the color to apply
  */
  set collarColor(collarColor: DyeColor);
}
/**
 * Represents an {@link Entity} that can experience friction with the air and ground.
*/
export class Frictional {
  /**
   * Gets the friction state of this entity.
   * When set to {@link TriState#TRUE}, the entity will always experience friction.
   * When set to {@link TriState#FALSE}, the entity will never experience friction.
   * When set to {@link TriState#NOT_SET}, the entity will fall back to Minecraft's default behaviour.
   *
   * @return the entity's friction state
  */
  get frictionState(): TriState;
  /**
   * Sets the friction state of this entity.
   * When set to {@link TriState#TRUE}, the entity will always experience friction.
   * When set to {@link TriState#FALSE}, the entity will never experience friction.
   * When set to {@link TriState#NOT_SET}, the entity will fall back to Minecraft's default behaviour.
   * 
   * Please note that changing this value will do nothing for a player.
   *
   * @param state the new friction state to set for the entity
  */
  set frictionState(frictionState: TriState);
}
/**
 * Represents what part of the entity should be used when determining where to face a position/entity.
 *
 * @see org.bukkit.entity.Player#lookAt(Position, LookAnchor)
 * @see org.bukkit.entity.Player#lookAt(Entity, LookAnchor, LookAnchor)
*/
export class LookAnchor extends Enum<LookAnchor> {
  /**
   * Represents the entity's feet.
   * @see LivingEntity#getLocation()
  */
  static readonly FEET: LookAnchor;
  /**
   * Represents the entity's eyes.
   * @see LivingEntity#getEyeLocation()
  */
  static readonly EYES: LookAnchor;
  static valueOf(name: string): LookAnchor;
  static values(): LookAnchor[];
}
/**
 * Represents flags for entity serialization.
 *
 * @see UnsafeValues#serializeEntity(Entity, EntitySerializationFlag... serializationFlags)
 * @since 1.21.4
*/
export class EntitySerializationFlag extends Enum<EntitySerializationFlag> {
  /**
   * Serialize entities that wouldn't be serialized normally
   * (e.g. dead, despawned, non-persistent, etc.).
   *
   * @see Entity#isValid()
   * @see Entity#isPersistent()
  */
  static readonly FORCE: EntitySerializationFlag;
  /**
   * Serialize misc non-saveable entities like lighting bolts, fishing bobbers, etc.
   * Note: players require a separate flag: {@link #PLAYER}.
  */
  static readonly MISC: EntitySerializationFlag;
  /**
   * Include passengers in the serialized data.
  */
  static readonly PASSENGERS: EntitySerializationFlag;
  /**
   * Allow serializing {@link Player}s.
   * Note: deserializing player data will always fail.
  */
  static readonly PLAYER: EntitySerializationFlag;
  static valueOf(name: string): EntitySerializationFlag;
  static values(): EntitySerializationFlag[];
}
/**
 * Represents an entity that can be leashed.
*/
export class Leashable extends Entity {
  /**
   * Returns whether the entity is currently leashed.
   *
   * @return whether the entity is leashed
  */
  isLeashed(): boolean;
  /**
   * Gets the entity that is currently leading this entity.
   *
   * @return the entity holding the leash
   * @throws IllegalStateException if not currently leashed
  */
  get leashHolder(): Entity;
  /**
   * Sets the leash on this entity to be held by the supplied entity.
   * 
   * This method has no effect on players.
   *
   * @param holder the entity to leash this entity to, or `null` to unleash
   * @return whether the operation was successful
  */
  set leashHolder(leashHolder: Entity | null);
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.registrar' {
import { LifecycleEvent } from 'io.papermc.paper.plugin.lifecycle.event';
import { Cause } from 'io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent';
/**
 * A lifecycle event that exposes a {@link Registrar} of some kind
 * to allow management of various things. Look at implementations of
 * {@link Registrar} for an idea of what uses this event.
 *
 * @param  registrar type
 * @see ReloadableRegistrarEvent
*/
export class RegistrarEvent<R> extends LifecycleEvent {
  /**
   * Get the registrar related to this event.
   *
   * @return the registrar
  */
  registrar(): R;
}
/**
 * A lifecycle event that exposes a {@link Registrar} that is
 * reloadable.
 *
 * @param  the registrar type
 * @see RegistrarEvent
*/
export class ReloadableRegistrarEvent<R> extends RegistrarEvent<R> {
  /**
   * Get the cause of this reload.
   *
   * @return the cause
  */
  cause(): Cause;
}
/**
 * To be implemented by types that provide ways to register types
 * either on server start or during a reload
*/
export class Registrar {

}

}
declare module 'io.papermc.paper.registry.event' {
import { LifecycleEvent } from 'io.papermc.paper.plugin.lifecycle.event';
import { Builder as io_papermc_paper_registry_data_EnchantmentRegistryEntry_Builder } from 'io.papermc.paper.registry.data.EnchantmentRegistryEntry';
import { Enchantment } from 'org.bukkit.enchantments';
import { Builder } from 'io.papermc.paper.registry.data.GameEventRegistryEntry';
import { BootstrapContext } from 'io.papermc.paper.plugin.bootstrap';
import { RegistryEntryAddEventType } from 'io.papermc.paper.registry.event.type';
import { TagKey, Tag } from 'io.papermc.paper.registry.tag';
import { Art, GameEvent, Keyed } from 'org.bukkit';
import { DamageType } from 'org.bukkit.damage';
import { Builder as io_papermc_paper_registry_data_BannerPatternRegistryEntry_Builder } from 'io.papermc.paper.registry.data.BannerPatternRegistryEntry';
import { PatternType } from 'org.bukkit.block.banner';
import { TypedKey, RegistryBuilderFactory, RegistryBuilder, RegistryKey } from 'io.papermc.paper.registry';
import { Builder as io_papermc_paper_registry_data_DamageTypeRegistryEntry_Builder } from 'io.papermc.paper.registry.data.DamageTypeRegistryEntry';
import { Consumer } from 'java.util.function';
import { Prioritizable } from 'io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType';
import { Builder as io_papermc_paper_registry_data_PaintingVariantRegistryEntry_Builder } from 'io.papermc.paper.registry.data.PaintingVariantRegistryEntry';
/**
 * Provider for registry events for a specific registry.
 * 
 * Supported events are:
 * 
 *     {@link RegistryEntryAddEvent} (via {@link #entryAdd()})
 *     {@link RegistryFreezeEvent} (via {@link #freeze()})
 * 
 *
 * @param  registry entry type
 * @param  registry entry builder type
*/
export class RegistryEventProvider<T> {
  /**
   * Gets the event type for {@link RegistryEntryAddEvent} which is fired just before
   * an object is added to a registry.
   * 
   * Can be used in {@link io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager#registerEventHandler(LifecycleEventType, LifecycleEventHandler)}
   * to register a handler for {@link RegistryEntryAddEvent}.
   *
   * @return the registry entry add event type
  */
  entryAdd(): RegistryEntryAddEventType<T,B>;
  /**
   * Gets the event type for {@link RegistryFreezeEvent} which is fired just before
   * a registry is frozen. It allows for the registration of new objects.
   * 
   * Can be used in {@link io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager#registerEventHandler(LifecycleEventType, LifecycleEventHandler)}
   * to register a handler for {@link RegistryFreezeEvent}.
   *
   * @return the registry freeze event type
  */
  freeze(): Prioritizable<BootstrapContext,RegistryFreezeEvent<T,B>>;
  /**
   * Gets the registry key associated with this event type provider.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
}
/**
 * Event object for {@link RegistryEventProvider#entryAdd()}. This
 * event is fired right before a specific entry is registered in/added to registry.
 * It provides a way for plugins to modify parts of this entry.
 *
 * @param  registry entry type
 * @param  registry entry builder type
*/
export class RegistryEntryAddEvent<T> extends RegistryEvent<T> {
  /**
   * Gets the builder for the entry being added to the registry.
   *
   * @return the object builder
  */
  builder(): B;
  /**
   * Gets the key for this entry in the registry.
   *
   * @return the key
  */
  key(): TypedKey<T>;
  /**
   * Gets or creates a tag for the given tag key. This tag
   * is then required to be filled either from the built-in or
   * custom datapack.
   *
   * @param tagKey the tag key
   * @return the tag
   * @param  the tag value type
  */
  getOrCreateTag<V>(tagKey: TagKey<V>): Tag<V>;
}
/**
 * A registry which supports registering new objects.
 *
 * @param  registry entry type
 * @param  registry entry builder type
*/
export class WritableRegistry<T> {
  /**
   * Register a new value with the specified key. This will
   * fire a {@link RegistryEntryAddEvent} for the new entry.
   *
   * @param key the entry's key (must be unique from others)
   * @param value a consumer for the entry's builder
  */
  register(key: TypedKey<T>, value: Consumer<any>): void;
  /**
   * Register a new value with the specified key. This will
   * fire a {@link RegistryEntryAddEvent} for the new entry. The
   * {@link RegistryBuilderFactory} lets you pre-fill a builder with
   * an already-existing entry's properties.
   *
   * @param key the entry's key (must be unique from others)
   * @param value a consumer of a builder factory
  */
  registerWith(key: TypedKey<T>, value: Consumer<RegistryBuilderFactory<T,B>>): void;
}
/**
 * Base type for all registry events.
 *
 * @param  registry entry type
*/
export class RegistryEvent<T> extends LifecycleEvent {
  /**
   * Get the key for the registry this event pertains to.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
}
/**
 * Event object for {@link RegistryEventProvider#freeze()}. This
 * event is fired right before a registry is frozen disallowing further changes.
 * It provides a way for plugins to add new objects to the registry.
 *
 * @param  registry entry type
 * @param  registry entry builder type
*/
export class RegistryFreezeEvent<T> extends RegistryEvent<T> {
  /**
   * Get the writable registry.
   *
   * @return a writable registry
  */
  registry(): WritableRegistry<T,B>;
  /**
   * Gets or creates a tag for the given tag key. This tag
   * is then required to be filled either from the built-in or
   * custom datapack.
   *
   * @param tagKey the tag key
   * @return the tag
   * @param  the tag value type
  */
  getOrCreateTag<V>(tagKey: TagKey<V>): Tag<V>;
}
/**
 * Holds providers for {@link RegistryEntryAddEvent} and {@link RegistryFreezeEvent}
 * handlers for each applicable registry.
*/
export class RegistryEvents {
  static readonly GAME_EVENT: RegistryEventProvider<GameEvent,Builder>;
  static readonly ENCHANTMENT: RegistryEventProvider<Enchantment,io_papermc_paper_registry_data_EnchantmentRegistryEntry_Builder>;
  static readonly PAINTING_VARIANT: RegistryEventProvider<Art,io_papermc_paper_registry_data_PaintingVariantRegistryEntry_Builder>;
  static readonly BANNER_PATTERN: RegistryEventProvider<PatternType,io_papermc_paper_registry_data_BannerPatternRegistryEntry_Builder>;
  static readonly DAMAGE_TYPE: RegistryEventProvider<DamageType,io_papermc_paper_registry_data_DamageTypeRegistryEntry_Builder>;
}

}
declare module 'io.papermc.paper.command.brigadier' {
import { Component } from 'net.kyori.adventure.text';
import { Registrar } from 'io.papermc.paper.plugin.lifecycle.event.registrar';
import { Enum } from 'java.lang';
import { Set, Collection } from 'java.util';
import { LiteralCommandNode } from 'com.mojang.brigadier.tree';
import { CommandSender } from 'org.bukkit.command';
import { Message, CommandDispatcher } from 'com.mojang.brigadier';
import { ArgumentType } from 'com.mojang.brigadier.arguments';
import { ComponentSerializer } from 'net.kyori.adventure.text.serializer';
import { LiteralArgumentBuilder, RequiredArgumentBuilder } from 'com.mojang.brigadier.builder';
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
import { Location } from 'org.bukkit';
import { Entity } from 'org.bukkit.entity';
/**
 * A component serializer for converting between {@link Message} and {@link Component}.
*/
export class MessageComponentSerializer extends ComponentSerializer<Component,Component,Message> {
  /**
   * A component serializer for converting between {@link Message} and {@link Component}.
   *
   * @return serializer instance
  */
  static message(): MessageComponentSerializer;
}
/**
 * The command source type for Brigadier commands registered using Paper API.
 * 
 * While the general use case for CommandSourceStack is similar to that of {@link CommandSender}, it provides access to
 * important additional context for the command execution.
 * Specifically, commands such as {@literal /execute} may alter the location or executor of the source stack before
 * passing it to another command.
 * The {@link CommandSender} returned by {@link #getSender()} may be a "no-op"
 * instance of {@link CommandSender} in cases where the server either doesn't
 * exist yet, or no specific sender is available. Methods on such a {@link CommandSender}
 * will either have no effect or throw an {@link UnsupportedOperationException}.
*/
export class CommandSourceStack {
  /**
   * Gets the location that this command is being executed at.
   *
   * @return a cloned location instance.
  */
  get location(): Location;
  /**
   * Gets the command sender that executed this command.
   * The sender of a command source stack is the one that initiated/triggered the execution of a command.
   * It differs to {@link #getExecutor()} as the executor can be changed by a command, e.g. {@literal /execute}.
   *
   * @return the command sender instance
  */
  get sender(): CommandSender;
  /**
   * Gets the entity that executes this command.
   * May not always be {@link #getSender()} as the executor of a command can be changed to a different entity
   * than the one that triggered the command.
   *
   * @return entity that executes this command
  */
  get executor(): Entity | null;
  /**
   * Creates a new CommandSourceStack object with a different location for redirecting commands to other nodes.
   *
   * @param location The location to create a new CommandSourceStack object with
   * @return The newly created CommandSourceStack
   * @see #getLocation()
   * @see com.mojang.brigadier.builder.ArgumentBuilder#fork(CommandNode, RedirectModifier)
  */
  withLocation(location: Location): CommandSourceStack;
  /**
   * Creates a new CommandSourceStack object with a different executor for redirecting commands to other nodes.
   *
   * @param executor The executing entity to create a new CommandSourceStack object with
   * @return The newly created CommandSourceStack
   * @see #getExecutor()
   * @see com.mojang.brigadier.builder.ArgumentBuilder#fork(CommandNode, RedirectModifier)
  */
  withExecutor(executor: Entity): CommandSourceStack;
}
/**
 * A {@link CommandRegistrationFlag} is used in {@link Commands} registration for internal purposes.
 * 
 * A command library may use this to achieve more specific customization on how their commands are registered.
 * @apiNote Stability of these flags is not promised! This api is not intended for public use.
*/
export class CommandRegistrationFlag extends Enum<CommandRegistrationFlag> {
  /**
   * @deprecated This is the default behavior now.
  */
  static readonly FLATTEN_ALIASES: CommandRegistrationFlag;
  static valueOf(name: string): CommandRegistrationFlag;
  static values(): CommandRegistrationFlag[];
}
/**
 * Implementing this interface allows for easily creating "Bukkit-style" `String[] args` commands.
 * The implementation handles converting the command to a representation compatible with Brigadier on registration, usually in the form of {@literal /commandlabel }.
*/
export class BasicCommand {
  /**
   * Executes the command with the given {@link CommandSourceStack} and arguments.
   *
   * @param commandSourceStack the commandSourceStack of the command
   * @param args the arguments of the command ignoring repeated spaces
  */
  execute(commandSourceStack: CommandSourceStack, args: string[]): void;
  /**
   * Suggests possible completions for the given command {@link CommandSourceStack} and arguments.
   *
   * @param commandSourceStack the commandSourceStack of the command
   * @param args the arguments of the command including repeated spaces
   * @return a collection of suggestions
  */
  suggest(commandSourceStack: CommandSourceStack, args: string[]): Collection<string>;
  /**
   * Checks whether a command sender can receive and run the root command.
   *
   * @param sender the command sender trying to execute the command
   * @return whether the command sender fulfills the root command requirement
   * @see #permission()
  */
  canUse(sender: CommandSender): boolean;
  /**
   * Returns the permission for the root command used in {@link #canUse(CommandSender)} by default.
   *
   * @return the permission for the root command used in {@link #canUse(CommandSender)}
  */
  permission(): string | null;
}
/**
 * The registrar for custom commands. Supports Brigadier commands and {@link BasicCommand}.
 * 
 * An example of a command being registered is below
 * {@code
 * class YourPluginClass extends JavaPlugin {
 *
 *     @Override
 *     public void onEnable() {
 *         LifecycleEventManager manager = this.getLifecycleManager();
 *         manager.registerEventHandler(LifecycleEvents.COMMANDS, event -> {
 *             final Commands commands = event.registrar();
 *             commands.register(
 *                 Commands.literal("new-command")
 *                     .executes(ctx -> {
 *                         ctx.getSource().getSender().sendPlainMessage("some message");
 *                         return Command.SINGLE_SUCCESS;
 *                     })
 *                     .build(),
 *                 "some bukkit help description string",
 *                 List.of("an-alias")
 *             );
 *         });
 *     }
 * }
 * }
 * 
 * You can also register commands in {@link PluginBootstrap} by getting the {@link LifecycleEventManager} from
 * {@link BootstrapContext}.
 * Commands registered in the {@link PluginBootstrap} will be available for datapack's
 * command function parsing.
 * Note that commands registered via {@link PluginBootstrap} with the same literals as a vanilla command will override
 * that command within all loaded datapacks.
 * 
 * The `register` methods that do not have {@link PluginMeta} as a parameter will
 * implicitly use the {@link PluginMeta} for the plugin that the {@link io.papermc.paper.plugin.lifecycle.event.handler.LifecycleEventHandler}
 * was registered with.
 *
 * @see io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents#COMMANDS
*/
export class Commands extends Registrar {
  /**
   * Utility to create a literal command node builder with the correct generic.
   *
   * @param literal literal name
   * @return a new builder instance
  */
  static literal(literal: string): LiteralArgumentBuilder<CommandSourceStack>;
  /**
   * Utility to create a required argument builder with the correct generic.
   *
   * @param name         the name of the argument
   * @param argumentType the type of the argument
   * @param           the generic type of the argument value
   * @return a new required argument builder
  */
  static argument<T>(name: string, argumentType: ArgumentType<T>): RequiredArgumentBuilder<CommandSourceStack,T>;
  /**
   * Gets the underlying {@link CommandDispatcher}.
   *
   * Note: This is a delicate API that must be used with care to ensure a consistent user experience.
   *
   * When registering commands, it should be preferred to use the {@link #register(PluginMeta, LiteralCommandNode, String, Collection) register methods}
   * over directly registering to the dispatcher wherever possible.
   * {@link #register(PluginMeta, LiteralCommandNode, String, Collection) Register methods} automatically handle
   * command namespacing, command help, plugin association with commands, and more.
   *
   * Example use cases for this method may include:
   * 
   *   Implementing integration between an external command framework and Paper (although {@link #register(PluginMeta, LiteralCommandNode, String, Collection) register methods} should still be preferred where possible)
   *   Registering new child nodes to an existing plugin command (for example an "addon" plugin to another plugin may want to do this)
   *   Retrieving existing command nodes to build redirects
   * 
   *
   * @return the dispatcher instance
  */
  get dispatcher(): CommandDispatcher<CommandSourceStack>;
  /**
   * Registers a command for the current plugin context.
   *
   * Commands have certain overriding behavior:
   * 
   *   Aliases will not override already existing commands (excluding namespaced ones)
   *   Aliases are not Brigadier redirects, they just copy the command to a different label
   *   The main command/namespaced label will override already existing commands
   * 
   *
   * @param node the built literal command node
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(node: LiteralCommandNode<CommandSourceStack>): Set<string>;
  /**
   * Registers a command for the current plugin context.
   *
   * Commands have certain overriding behavior:
   * 
   *   Aliases will not override already existing commands (excluding namespaced ones)
   *   Aliases are not Brigadier redirects, they just copy the command to a different label
   *   The main command/namespaced label will override already existing commands
   * 
   *
   * @param node        the built literal command node
   * @param description the help description for the root literal node
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(node: LiteralCommandNode<CommandSourceStack>, description: string | null): Set<string>;
  /**
   * Registers a command for the current plugin context.
   *
   * Commands have certain overriding behavior:
   * 
   *   Aliases will not override already existing commands (excluding namespaced ones)
   *   Aliases are not Brigadier redirects, they just copy the command to a different label
   *   The main command/namespaced label will override already existing commands
   * 
   *
   * @param node the built literal command node
   * @param aliases a collection of aliases to register the literal node's command to
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(node: LiteralCommandNode<CommandSourceStack>, aliases: Collection<string>): Set<string>;
  /**
   * Registers a command for the current plugin context.
   *
   * Commands have certain overriding behavior:
   * 
   *   Aliases will not override already existing commands (excluding namespaced ones)
   *   Aliases are not Brigadier redirects, they just copy the command to a different label
   *   The main command/namespaced label will override already existing commands
   * 
   *
   * @param node        the built literal command node
   * @param description the help description for the root literal node
   * @param aliases     a collection of aliases to register the literal node's command to
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(node: LiteralCommandNode<CommandSourceStack>, description: string | null, aliases: Collection<string>): Set<string>;
  /**
   * Registers a command for a plugin.
   *
   * Commands have certain overriding behavior:
   * 
   *   Aliases will not override already existing commands (excluding namespaced ones)
   *   Aliases are not Brigadier redirects, they just copy the command to a different label
   *   The main command/namespaced label will override already existing commands
   * 
   *
   * @param pluginMeta  the owning plugin's meta
   * @param node        the built literal command node
   * @param description the help description for the root literal node
   * @param aliases     a collection of aliases to register the literal node's command to
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(pluginMeta: PluginMeta, node: LiteralCommandNode<CommandSourceStack>, description: string | null, aliases: Collection<string>): Set<string>;
  /**
   * This allows configuring the registration of your command, which is not intended for public use.
   * See {@link Commands#register(PluginMeta, LiteralCommandNode, String, Collection)} for more information.
   *
   * @param pluginMeta  the owning plugin's meta
   * @param node        the built literal command node
   * @param description the help description for the root literal node
   * @param aliases     a collection of aliases to register the literal node's command to
   * @param flags       a collection of registration flags that control registration behaviour.
   * @return successfully registered root command labels (including aliases and namespaced variants)
   *
   * @apiNote This method is not guaranteed to be stable as it is not intended for public use.
   * See {@link CommandRegistrationFlag} for a more indepth explanation of this method's use-case.
  */
  registerWithFlags(pluginMeta: PluginMeta, node: LiteralCommandNode<CommandSourceStack>, description: string | null, aliases: Collection<string>, flags: Set<CommandRegistrationFlag>): Set<string>;
  /**
   * Registers a command under the same logic as {@link Commands#register(LiteralCommandNode, String, Collection)}.
   *
   * @param label        the label of the to-be-registered command
   * @param basicCommand the basic command instance to register
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(label: string, basicCommand: BasicCommand): Set<string>;
  /**
   * Registers a command under the same logic as {@link Commands#register(LiteralCommandNode, String, Collection)}.
   *
   * @param label        the label of the to-be-registered command
   * @param description  the help description for the root literal node
   * @param basicCommand the basic command instance to register
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(label: string, description: string | null, basicCommand: BasicCommand): Set<string>;
  /**
   * Registers a command under the same logic as {@link Commands#register(LiteralCommandNode, String, Collection)}.
   *
   * @param label        the label of the to-be-registered command
   * @param aliases      a collection of aliases to register the basic command under.
   * @param basicCommand the basic command instance to register
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(label: string, aliases: Collection<string>, basicCommand: BasicCommand): Set<string>;
  /**
   * Registers a command under the same logic as {@link Commands#register(LiteralCommandNode, String, Collection)}.
   *
   * @param label        the label of the to-be-registered command
   * @param description  the help description for the root literal node
   * @param aliases      a collection of aliases to register the basic command under.
   * @param basicCommand the basic command instance to register
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(label: string, description: string | null, aliases: Collection<string>, basicCommand: BasicCommand): Set<string>;
  /**
   * Registers a command under the same logic as {@link Commands#register(PluginMeta, LiteralCommandNode, String, Collection)}.
   *
   * @param pluginMeta   the owning plugin's meta
   * @param label        the label of the to-be-registered command
   * @param description  the help description for the root literal node
   * @param aliases      a collection of aliases to register the basic command under.
   * @param basicCommand the basic command instance to register
   * @return successfully registered root command labels (including aliases and namespaced variants)
  */
  register(pluginMeta: PluginMeta, label: string, description: string | null, aliases: Collection<string>, basicCommand: BasicCommand): Set<string>;
}

}
declare module 'io.papermc.paper.registry' {
import { StructureType, Structure } from 'org.bukkit.generator.structure';
import { Keyed as net_kyori_adventure_key_Keyed, Key } from 'net.kyori.adventure.key';
import { Attribute } from 'org.bukkit.attribute';
import { Enchantment } from 'org.bukkit.enchantments';
import { TrimMaterial, TrimPattern } from 'org.bukkit.inventory.meta.trim';
import { MemoryKey } from 'org.bukkit.entity.memory';
import { DataComponentType } from 'io.papermc.paper.datacomponent';
import { Type } from 'org.bukkit.entity.Cat';
import { TagKey } from 'io.papermc.paper.registry.tag';
import { Particle, Art, NamespacedKey, Fluid, JukeboxSong, GameEvent, MusicInstrument, Sound, Registry, Keyed } from 'org.bukkit';
import { MenuType, ItemType } from 'org.bukkit.inventory';
import { PotionEffectType, PotionType } from 'org.bukkit.potion';
import { Type as org_bukkit_map_MapCursor_Type } from 'org.bukkit.map.MapCursor';
import { Type as org_bukkit_entity_Villager_Type, Profession } from 'org.bukkit.entity.Villager';
import { DamageType } from 'org.bukkit.damage';
import { Class } from 'java.lang';
import { PatternType } from 'org.bukkit.block.banner';
import { Variant as org_bukkit_entity_Wolf_Variant } from 'org.bukkit.entity.Wolf';
import { Biome, BlockType } from 'org.bukkit.block';
import { Variant } from 'org.bukkit.entity.Frog';
import { EntityType } from 'org.bukkit.entity';
/**
 * Represents a reference to a server-backed registry value that may
 * change.
 *
 * @param  type of the value
*/
export class Reference<T> extends Keyed {
  /**
   * Gets the value from the registry with the key.
   *
   * @return the value
   * @throws java.util.NoSuchElementException if there is no value with this key
  */
  value(): T;
  /**
   * Gets the value from the registry with the key.
   *
   * @return the value or null if it doesn't exist
  */
  valueOrNull(): T | null;
  /**
   * Creates a reference to a registered value.
   *
   * @param registry the registry the value is located in
   * @param key the key to the value
   * @param  the type of the value
   * @return a reference
  */
  static create<T>(registry: Registry<T>, key: NamespacedKey): Reference<T>;
}
/**
 * Used for accessing different {@link Registry} instances
 * by a {@link RegistryKey}. Get the main instance of {@link RegistryAccess}
 * with {@link RegistryAccess#registryAccess()}.
*/
export class RegistryAccess {
  /**
   * Get the {@link RegistryAccess} instance for the server.
   *
   * @return the RegistryAccess instance
  */
  static registryAccess(): RegistryAccess;
  /**
   * Gets the registry based on the type.
   *
   * @param type the type
   * @return the registry or null if none found
   * @param  the type
   * @deprecated use {@link #getRegistry(RegistryKey)} with keys from {@link RegistryKey}
  */
  getRegistry<T>(type: Class<T>): Registry<T> | null;
  getRegistry<T>(registryKey: RegistryKey<T>): Registry<T>;
}
/**
 * Represents a key for a value in a specific registry.
 *
 * @param  the value type for the registry
*/
export class TypedKey<T> extends Key {
  /**
   * Gets the key for the value in the registry.
   *
   * @return the value's key
  */
  key(): Key;
  /**
   * Gets the registry key for the value this key
   * represents.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
  /**
   * Create a typed key from a key and a registry key.
   *
   * @param registryKey the registry this key is for
   * @param key the key for the value in the registry
   * @param  value type
   * @return a new key for the value key and registry key
  */
  static create<T>(registryKey: RegistryKey<T>, key: Key): TypedKey<T>;
  /**
   * Create a typed key from a string and a registry key.
   *
   * @param registryKey the registry this key is for
   * @param key         the string version of a {@link Key} that will be passed to {@link Key#key(String)} for parsing.
   * @param          value type
   * @return a new key for the value key and registry key
   * @see Key#key(String)
  */
  static create<T>(registryKey: RegistryKey<T>, key: string): TypedKey<T>;
}
/**
 * A factory to create a {@link RegistryBuilder} for a given {@link TypedKey}. For
 * each instance of this class, once either {@link #empty()} or {@link #copyFrom(TypedKey)}
 * is called once, any future calls to either method will throw an {@link IllegalStateException}.
 *
 * @param  The type of the registry
 * @param  The type of the registry builder
*/
export class RegistryBuilderFactory<T> {
  /**
   * Creates a new empty {@link RegistryBuilder}.
   *
   * @return A new empty {@link RegistryBuilder}
   * @throws IllegalStateException if this method or {@link #copyFrom(TypedKey)}) has already been called once
  */
  empty(): B;
  /**
   * Creates a new {@link RegistryBuilder} with the same properties as the given {@link TypedKey}.
   *
   * @param key The key to copy properties from
   * @return A new {@link RegistryBuilder} with the same properties as the given key
   * @throws IllegalStateException if this method or {@link #empty()} has already been called once
   * @throws IllegalArgumentException if key doesn't exist
  */
  copyFrom(key: TypedKey<T>): B;
}
/**
 * Identifier for a specific registry. For use with
 * {@link TypedKey} and the registry modification API.
 * 
 * There are 2 types of registries, identified as "built-in"
 * or "data-driven". The former are not changeable by datapacks (which
 * doesn't necessarily mean they aren't changeable in the API) and
 * are loaded first. "Data-driven" registries are all created by
 * reading in data from the vanilla and other datapacks.
 *
 * @param  the value type
*/
export class RegistryKey<T> extends net_kyori_adventure_key_Keyed {
  /**
   * Built-in registry for game events
   * @see io.papermc.paper.registry.keys.GameEventKeys
  */
  static readonly GAME_EVENT: RegistryKey<GameEvent>;
  /**
   * Built-in registry for structure types.
   * @see io.papermc.paper.registry.keys.StructureTypeKeys
  */
  static readonly STRUCTURE_TYPE: RegistryKey<StructureType>;
  /**
   * Built-in registry for potion effect types (mob effects).
   * @see io.papermc.paper.registry.keys.MobEffectKeys
  */
  static readonly MOB_EFFECT: RegistryKey<PotionEffectType>;
  /**
   * @apiNote DO NOT USE
  */
  static readonly BLOCK: RegistryKey<BlockType>;
  /**
   * @apiNote use preferably only in the context of registry entries.
   * @see io.papermc.paper.registry.keys.ItemTypeKeys
  */
  static readonly ITEM: RegistryKey<ItemType>;
  /**
   * Built-in registry for cat variants.
   * @see io.papermc.paper.registry.keys.CatVariantKeys
  */
  static readonly CAT_VARIANT: RegistryKey<Type>;
  /**
   * Built-in registry for frog variants.
   * @see io.papermc.paper.registry.keys.FrogVariantKeys
  */
  static readonly FROG_VARIANT: RegistryKey<Variant>;
  /**
   * Built-in registry for villager professions.
   * @see io.papermc.paper.registry.keys.VillagerProfessionKeys
  */
  static readonly VILLAGER_PROFESSION: RegistryKey<Profession>;
  /**
   * Built-in registry for villager types.
   * @see io.papermc.paper.registry.keys.VillagerTypeKeys
  */
  static readonly VILLAGER_TYPE: RegistryKey<org_bukkit_entity_Villager_Type>;
  /**
   * Built-in registry for map decoration types.
   * @see io.papermc.paper.registry.keys.MapDecorationTypeKeys
  */
  static readonly MAP_DECORATION_TYPE: RegistryKey<org_bukkit_map_MapCursor_Type>;
  /**
   * Built-in registry for menu types.
   * @see io.papermc.paper.registry.keys.MenuTypeKeys
  */
  static readonly MENU: RegistryKey<MenuType>;
  /**
   * Built-in registry for attributes.
   * @see io.papermc.paper.registry.keys.AttributeKeys
  */
  static readonly ATTRIBUTE: RegistryKey<Attribute>;
  /**
   * Built-in registry for fluids.
   * @see io.papermc.paper.registry.keys.FluidKeys
  */
  static readonly FLUID: RegistryKey<Fluid>;
  /**
   * Built-in registry for sound events.
   * @see io.papermc.paper.registry.keys.SoundEventKeys
  */
  static readonly SOUND_EVENT: RegistryKey<Sound>;
  /**
   * Built-in registry for data component types.
   * 
  */
  static readonly DATA_COMPONENT_TYPE: RegistryKey<DataComponentType>;
  /**
   * Data-driven registry for biomes.
   * @see io.papermc.paper.registry.keys.BiomeKeys
  */
  static readonly BIOME: RegistryKey<Biome>;
  /**
   * Data-driven registry for structures.
   * @see io.papermc.paper.registry.keys.StructureKeys
  */
  static readonly STRUCTURE: RegistryKey<Structure>;
  /**
   * Data-driven registry for trim materials.
   * @see io.papermc.paper.registry.keys.TrimMaterialKeys
  */
  static readonly TRIM_MATERIAL: RegistryKey<TrimMaterial>;
  /**
   * Data-driven registry for trim patterns.
   * @see io.papermc.paper.registry.keys.TrimPatternKeys
  */
  static readonly TRIM_PATTERN: RegistryKey<TrimPattern>;
  /**
   * Data-driven registry for damage types.
   * @see io.papermc.paper.registry.keys.DamageTypeKeys
  */
  static readonly DAMAGE_TYPE: RegistryKey<DamageType>;
  /**
   * Data-driven registry for wolf variants.
   * @see io.papermc.paper.registry.keys.WolfVariantKeys
  */
  static readonly WOLF_VARIANT: RegistryKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * Data-driven registry for enchantments.
   * @see io.papermc.paper.registry.keys.EnchantmentKeys
  */
  static readonly ENCHANTMENT: RegistryKey<Enchantment>;
  /**
   * Data-driven registry for jukebox songs.
   * @see io.papermc.paper.registry.keys.JukeboxSongKeys
  */
  static readonly JUKEBOX_SONG: RegistryKey<JukeboxSong>;
  /**
   * Data-driven registry for banner patterns.
   * @see io.papermc.paper.registry.keys.BannerPatternKeys
  */
  static readonly BANNER_PATTERN: RegistryKey<PatternType>;
  /**
   * Data-driven registry for painting variants.
   * @see io.papermc.paper.registry.keys.PaintingVariantKeys
  */
  static readonly PAINTING_VARIANT: RegistryKey<Art>;
  /**
   * Data-driven registry for instruments.
   * @see io.papermc.paper.registry.keys.InstrumentKeys
  */
  static readonly INSTRUMENT: RegistryKey<MusicInstrument>;
  static readonly ENTITY_TYPE: RegistryKey<EntityType>;
  static readonly PARTICLE_TYPE: RegistryKey<Particle>;
  static readonly POTION: RegistryKey<PotionType>;
  static readonly MEMORY_MODULE_TYPE: RegistryKey<MemoryKey<any>>;
  /**
   * Constructs a new {@link TypedKey} for this registry given the typed key's key.
   *
   * @param key the key of the typed key.
   * @return the constructed typed key.
  */
  typedKey(key: Key): TypedKey<T>;
  /**
   * Constructs a new {@link TypedKey} for this registry given the typed key's key.
   *
   * @param key the string representation of the key that will be passed to {@link Key#key(String)}.
   * @return the constructed typed key.
  */
  typedKey(key: string): TypedKey<T>;
  /**
   * Constructs a new {@link TagKey} for this registry given the tag key's key.
   *
   * @param key the key of the typed key.
   * @return the constructed tag key.
  */
  tagKey(key: Key): TagKey<T>;
  /**
   * Constructs a new {@link TagKey} for this registry given the tag key's key.
   *
   * @param key the string representation of the key that will be passed to {@link Key#key(String)}.
   * @return the constructed tag key.
  */
  tagKey(key: string): TagKey<T>;
}
/**
 * To be implemented by any type used for modifying registries.
 *
 * @param  registry value type
*/
export class RegistryBuilder<T> {

}

}
declare module 'io.papermc.paper.registry.data.DamageTypeRegistryEntry' {
import { DamageEffect, DamageScaling, DamageType, DeathMessageType } from 'org.bukkit.damage';
import { DamageTypeRegistryEntry } from 'io.papermc.paper.registry.data';
import { RegistryBuilder } from 'io.papermc.paper.registry';
/**
 * A mutable builder for the {@link DamageTypeRegistryEntry} plugins may change in applicable registry events.
 * 
 * The following values are required for each builder:
 * 
 *     {@link #messageId(String)}
 *     {@link #exhaustion(float)}
 *     {@link #damageScaling(DamageScaling)}
 * 
*/
export class Builder extends DamageTypeRegistryEntry {
  /**
   * Sets part of the death message translation key.
   *
   * @return this builder instance.
   * @see DamageTypeRegistryEntry#messageId()
   * @see DamageType#getTranslationKey()
  */
  messageId(messageId: string): Builder;
  /**
   * Sets the amount of hunger exhaustion caused by this damage type.
   *
   * @return this builder instance.
   * @see DamageTypeRegistryEntry#exhaustion()
   * @see DamageType#getExhaustion()
  */
  exhaustion(exhaustion: number): Builder;
  /**
   * Sets the {@link DamageScaling} for this damage type.
   *
   * @return this builder instance.
   * @see DamageTypeRegistryEntry#damageScaling()
   * @see DamageType#getDamageScaling()
  */
  damageScaling(scaling: DamageScaling): Builder;
  /**
   * Sets the {@link DamageEffect} for this damage type.
   *
   * @return this builder instance.
   * @see DamageTypeRegistryEntry#damageEffect()
   * @see DamageType#getDamageEffect()
  */
  damageEffect(effect: DamageEffect): Builder;
  /**
   * Sets the {@link DeathMessageType} for this damage type.
   *
   * @return this builder instance.
   * @see DamageTypeRegistryEntry#deathMessageType()
   * @see DamageType#getDeathMessageType()
  */
  deathMessageType(deathMessageType: DeathMessageType): Builder;
}
export interface Builder extends DamageTypeRegistryEntry, RegistryBuilder<DamageType> {}

}
declare module 'io.papermc.paper.datacomponent.item' {
import { Builder as io_papermc_paper_datacomponent_item_BundleContents_Builder } from 'io.papermc.paper.datacomponent.item.BundleContents';
import { Builder as io_papermc_paper_datacomponent_item_ResolvableProfile_Builder } from 'io.papermc.paper.datacomponent.item.ResolvableProfile';
import { Builder as io_papermc_paper_datacomponent_item_BlockItemDataProperties_Builder } from 'io.papermc.paper.datacomponent.item.BlockItemDataProperties';
import { SuspiciousEffectEntry } from 'io.papermc.paper.potion';
import { Builder as io_papermc_paper_datacomponent_item_WritableBookContent_Builder } from 'io.papermc.paper.datacomponent.item.WritableBookContent';
import { Builder as io_papermc_paper_datacomponent_item_SeededContainerLoot_Builder } from 'io.papermc.paper.datacomponent.item.SeededContainerLoot';
import { BuildableDataComponent } from 'io.papermc.paper.datacomponent';
import { Builder as io_papermc_paper_datacomponent_item_ItemEnchantments_Builder } from 'io.papermc.paper.datacomponent.item.ItemEnchantments';
import { TagKey } from 'io.papermc.paper.registry.tag';
import { ItemType, EquipmentSlot, ItemStack } from 'org.bukkit.inventory';
import { JukeboxSong, Color, FireworkEffect, Location } from 'org.bukkit';
import { Pattern } from 'org.bukkit.block.banner';
import { Builder as io_papermc_paper_datacomponent_item_JukeboxPlayable_Builder } from 'io.papermc.paper.datacomponent.item.JukeboxPlayable';
import { BlockType } from 'org.bukkit.block';
import { Builder as io_papermc_paper_datacomponent_item_ItemContainerContents_Builder } from 'io.papermc.paper.datacomponent.item.ItemContainerContents';
import { ConsumeEffect, ItemUseAnimation } from 'io.papermc.paper.datacomponent.item.consumable';
import { ProfileProperty, PlayerProfile } from 'com.destroystokyo.paper.profile';
import { Builder as io_papermc_paper_datacomponent_item_SuspiciousStewEffects_Builder } from 'io.papermc.paper.datacomponent.item.SuspiciousStewEffects';
import { EntityType } from 'org.bukkit.entity';
import { Builder as io_papermc_paper_datacomponent_item_Fireworks_Builder } from 'io.papermc.paper.datacomponent.item.Fireworks';
import { Key } from 'net.kyori.adventure.key';
import { Builder as io_papermc_paper_datacomponent_item_BannerPatternLayers_Builder } from 'io.papermc.paper.datacomponent.item.BannerPatternLayers';
import { CompletableFuture } from 'java.util.concurrent';
import { Enchantment } from 'org.bukkit.enchantments';
import { Builder as io_papermc_paper_datacomponent_item_ItemLore_Builder } from 'io.papermc.paper.datacomponent.item.ItemLore';
import { Builder as io_papermc_paper_datacomponent_item_Equippable_Builder } from 'io.papermc.paper.datacomponent.item.Equippable';
import { Builder } from 'io.papermc.paper.datacomponent.item.PotDecorations';
import { Builder as io_papermc_paper_datacomponent_item_Unbreakable_Builder } from 'io.papermc.paper.datacomponent.item.Unbreakable';
import { Type } from 'org.bukkit.map.MapCursor';
import { Collection, List, UUID, Map } from 'java.util';
import { Filtered } from 'io.papermc.paper.text';
import { Builder as io_papermc_paper_datacomponent_item_Consumable_Builder } from 'io.papermc.paper.datacomponent.item.Consumable';
import { Builder as io_papermc_paper_datacomponent_item_ItemArmorTrim_Builder } from 'io.papermc.paper.datacomponent.item.ItemArmorTrim';
import { Builder as io_papermc_paper_datacomponent_item_FoodProperties_Builder } from 'io.papermc.paper.datacomponent.item.FoodProperties';
import { Builder as io_papermc_paper_datacomponent_item_LodestoneTracker_Builder } from 'io.papermc.paper.datacomponent.item.LodestoneTracker';
import { PotionEffect, PotionType } from 'org.bukkit.potion';
import { TriState } from 'net.kyori.adventure.util';
import { Builder as io_papermc_paper_datacomponent_item_DeathProtection_Builder } from 'io.papermc.paper.datacomponent.item.DeathProtection';
import { Builder as io_papermc_paper_datacomponent_item_UseCooldown_Builder } from 'io.papermc.paper.datacomponent.item.UseCooldown';
import { Builder as io_papermc_paper_datacomponent_item_Tool_Builder, Rule } from 'io.papermc.paper.datacomponent.item.Tool';
import { Entry, Builder as io_papermc_paper_datacomponent_item_ItemAttributeModifiers_Builder } from 'io.papermc.paper.datacomponent.item.ItemAttributeModifiers';
import { Builder as io_papermc_paper_datacomponent_item_MapDecorations_Builder, DecorationEntry } from 'io.papermc.paper.datacomponent.item.MapDecorations';
import { Builder as io_papermc_paper_datacomponent_item_CustomModelData_Builder } from 'io.papermc.paper.datacomponent.item.CustomModelData';
import { Builder as io_papermc_paper_datacomponent_item_WrittenBookContent_Builder } from 'io.papermc.paper.datacomponent.item.WrittenBookContent';
import { ComponentLike, Component } from 'net.kyori.adventure.text';
import { Builder as io_papermc_paper_datacomponent_item_ChargedProjectiles_Builder } from 'io.papermc.paper.datacomponent.item.ChargedProjectiles';
import { BlockPredicate } from 'io.papermc.paper.block';
import { ArmorTrim } from 'org.bukkit.inventory.meta.trim';
import { Builder as io_papermc_paper_datacomponent_item_MapItemColor_Builder } from 'io.papermc.paper.datacomponent.item.MapItemColor';
import { Builder as io_papermc_paper_datacomponent_item_PotionContents_Builder } from 'io.papermc.paper.datacomponent.item.PotionContents';
import { DamageType } from 'org.bukkit.damage';
import { Builder as io_papermc_paper_datacomponent_item_DyedItemColor_Builder } from 'io.papermc.paper.datacomponent.item.DyedItemColor';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { BlockData } from 'org.bukkit.block.data';
import { Builder as io_papermc_paper_datacomponent_item_ItemAdventurePredicate_Builder } from 'io.papermc.paper.datacomponent.item.ItemAdventurePredicate';
/**
 * Holds the item types for the decorations on a flower pot.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#POT_DECORATIONS
*/
export class PotDecorations {
  static potDecorations(back: ItemType | null, left: ItemType | null, right: ItemType | null, front: ItemType | null): PotDecorations;
  static potDecorations(): Builder;
  /**
   * Get the item type for the back.
   *
   * @return the back item type.
  */
  back(): ItemType | null;
  /**
   * Get the item type for the left.
   *
   * @return the left item type.
  */
  left(): ItemType | null;
  /**
   * Get the item type for the right.
   *
   * @return the right item type.
  */
  right(): ItemType | null;
  /**
   * Get the item type for the front.
   *
   * @return the front item type.
  */
  front(): ItemType | null;
}
/**
 * Controls which blocks a player in Adventure mode can do a certain action with this item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CAN_BREAK
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CAN_PLACE_ON
*/
export class ItemAdventurePredicate extends ShownInTooltip<ItemAdventurePredicate> {
  static itemAdventurePredicate(predicates: BlockPredicate[]): ItemAdventurePredicate;
  static itemAdventurePredicate(): io_papermc_paper_datacomponent_item_ItemAdventurePredicate_Builder;
  /**
   * List of block predicates that control if the action is allowed.
   *
   * @return predicates
  */
  predicates(): BlockPredicate[];
}
/**
 * Holds the state of whether a data component should be shown
 * in an item's tooltip.
 *
 * @param  the data component type
*/
export class ShownInTooltip<T> {
  /**
   * Gets if the data component should be shown in the item's tooltip.
   *
   * @return `true` to show in the tooltip
  */
  showInTooltip(): boolean;
  /**
   * Returns a copy of this data component with the specified
   * show-in-tooltip state.
   *
   * @param showInTooltip `true` to show in the tooltip
   * @return the new data component
  */
  showInTooltip(showInTooltip: boolean): T;
}
/**
 * If present, specifies the target Lodestone that a Compass should point towards.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#LODESTONE_TRACKER
*/
export class LodestoneTracker {
  static lodestoneTracker(location: Location | null, tracked: boolean): LodestoneTracker;
  static lodestoneTracker(): io_papermc_paper_datacomponent_item_LodestoneTracker_Builder;
  /**
   * The location that the compass should point towards.
   *
   * @return location
  */
  location(): Location | null;
  /**
   * If `true`, when the Lodestone at the target position is removed, the component will be removed.
   *
   * @return tracked
  */
  tracked(): boolean;
}
/**
 * Holds a list of markers to be placed on a Filled Map (used for Explorer Maps).
 * @see io.papermc.paper.datacomponent.DataComponentTypes#MAP_DECORATIONS
*/
export class MapDecorations {
  static mapDecorations(entries: Map<string,DecorationEntry>): MapDecorations;
  static mapDecorations(): io_papermc_paper_datacomponent_item_MapDecorations_Builder;
  static decorationEntry(type: Type, x: number, z: number, rotation: number): DecorationEntry;
  /**
   * Gets the decoration entry with the given id.
   *
   * @param id id
   * @return decoration entry, or `null` if not present
  */
  decoration(id: string): DecorationEntry | null;
  /**
   * Gets the decoration entries.
   *
   * @return the decoration entries
  */
  decorations(): Map<string,DecorationEntry>;
}
/**
 * Holds the contents and metadata of a Written Book.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#WRITTEN_BOOK_CONTENT
*/
export class WrittenBookContent {
  static writtenBookContent(title: string, author: string): io_papermc_paper_datacomponent_item_WrittenBookContent_Builder;
  static writtenBookContent(title: Filtered<string>, author: string): io_papermc_paper_datacomponent_item_WrittenBookContent_Builder;
  /**
   * Title of this book.
   *
   * @return title
  */
  title(): Filtered<string>;
  /**
   * Player name of the author of this book.
   *
   * @return author
  */
  author(): string;
  /**
   * The number of times this book has been copied (0 = original).
   *
   * @return generation
  */
  generation(): number;
  /**
   * Gets the pages of this book.
   *
   * @return pages
  */
  pages(): Filtered<Component>[];
  /**
   * If the chat components in this book have already been resolved (entity selectors, scores substituted).
   * If `false`, will be resolved when opened by a player.
   *
   * @return resolved
  */
  resolved(): boolean;
}
/**
 * Holds the effects that will be applied when consuming Suspicious Stew.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#SUSPICIOUS_STEW_EFFECTS
*/
export class SuspiciousStewEffects {
  static suspiciousStewEffects(effects: Collection<SuspiciousEffectEntry>): SuspiciousStewEffects;
  static suspiciousStewEffects(): io_papermc_paper_datacomponent_item_SuspiciousStewEffects_Builder;
  /**
   * Effects that will be applied when consuming Suspicious Stew.
   *
   * @return effects
  */
  effects(): SuspiciousEffectEntry[];
}
/**
 * Holds if this item is repairable, and what item types it can be repaired with.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#REPAIRABLE
*/
export class Repairable {
  static repairable(types: RegistryKeySet<ItemType>): Repairable;
  /**
   * The types that this item is repairable to.
   *
   * @return item
  */
  types(): RegistryKeySet<ItemType>;
}
/**
 * Holds the properties for this item for when it is consumed.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CONSUMABLE
*/
export class Consumable extends BuildableDataComponent<Consumable,io_papermc_paper_datacomponent_item_Consumable_Builder> {
  static consumable(): io_papermc_paper_datacomponent_item_Consumable_Builder;
  consumeSeconds(): number;
  animation(): ItemUseAnimation;
  sound(): Key;
  hasConsumeParticles(): boolean;
  consumeEffects(): ConsumeEffect[];
}
/**
 * Holds the contents of damage types that the item entity containing this item is invincible to.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#DAMAGE_RESISTANT
*/
export class DamageResistant {
  static damageResistant(types: TagKey<DamageType>): DamageResistant;
  /**
   * The types that this damage type is invincible to.
   *
   * @return the key of the tag holding the respective damage types.
  */
  types(): TagKey<DamageType>;
}
/**
 * Holds the ominous bottle amplifier.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#OMINOUS_BOTTLE_AMPLIFIER
*/
export class OminousBottleAmplifier {
  static amplifier(amplifier: number): OminousBottleAmplifier;
  /**
   * Gets the bottle amplifier.
   *
   * @return the amplifier
  */
  amplifier(): number;
}
/**
 * If set, the item will not lose any durability when used.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#UNBREAKABLE
*/
export class Unbreakable extends ShownInTooltip<Unbreakable> {
  static unbreakable(showInTooltip: boolean): Unbreakable;
  static unbreakable(): io_papermc_paper_datacomponent_item_Unbreakable_Builder;
}
/**
 * Holds all items stored inside of a Bundle.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#BUNDLE_CONTENTS
*/
export class BundleContents {
  static bundleContents(contents: ItemStack[]): BundleContents;
  static bundleContents(): io_papermc_paper_datacomponent_item_BundleContents_Builder;
  /**
   * Lists the items that are currently stored inside of this component.
   *
   * @return items
  */
  contents(): ItemStack[];
}
/**
 * Holds the loot table and seed for a container.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CONTAINER_LOOT
*/
export class SeededContainerLoot {
  static seededContainerLoot(lootTableKey: Key, seed: number): SeededContainerLoot;
  static seededContainerLoot(lootTableKey: Key): io_papermc_paper_datacomponent_item_SeededContainerLoot_Builder;
  /**
   * Gets the loot table key.
   *
   * @return the loot table key
  */
  lootTable(): Key;
  /**
   * Gets the loot table seed.
   *
   * @return the seed
  */
  seed(): number;
}
/**
 * Holds if an item is enchantable, allowing for enchantments of the type to be seen in an enchanting table.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#ENCHANTABLE
*/
export class Enchantable {
  static enchantable(level: number): Enchantable;
  /**
   * Gets the current enchantment value level allowed,
   * a higher value allows enchantments with a higher cost to be picked.
   *
   * @return the value
   * @see Minecraft Wiki
  */
  value(): number;
}
/**
 * Sets whether this item should protect the entity upon death, and what effects should be played.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#DEATH_PROTECTION
*/
export class DeathProtection {
  static deathProtection(deathEffects: ConsumeEffect[]): DeathProtection;
  static deathProtection(): io_papermc_paper_datacomponent_item_DeathProtection_Builder;
  deathEffects(): ConsumeEffect[];
}
/**
 * Holds the trims applied to an item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#TRIM
*/
export class ItemArmorTrim extends ShownInTooltip<ItemArmorTrim> {
  static itemArmorTrim(armorTrim: ArmorTrim, showInTooltip: boolean): ItemArmorTrim;
  static itemArmorTrim(armorTrim: ArmorTrim): io_papermc_paper_datacomponent_item_ItemArmorTrim_Builder;
  /**
   * Armor trim present on this item.
   *
   * @return trim
  */
  armorTrim(): ArmorTrim;
}
/**
 * Holds the {@link BlockData} properties of a block item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#BLOCK_DATA
*/
export class BlockItemDataProperties {
  static blockItemStateProperties(): io_papermc_paper_datacomponent_item_BlockItemDataProperties_Builder;
  /**
   * Creates a new {@link BlockData} instance for the given {@link BlockType}.
   *
   * @param blockType the block type
   * @return the block data
  */
  createBlockData(blockType: BlockType): BlockData;
  /**
   * Applies the properties to the given {@link BlockData}. Doesn't
   * mutate the parameter, but returns a new instance with the properties applied.
   *
   * @param blockData the block data to apply the properties to
   * @return the block data with the properties applied
  */
  applyTo(blockData: BlockData): BlockData;
}
/**
 * Holds the pages for a writable book.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#WRITABLE_BOOK_CONTENT
*/
export class WritableBookContent {
  static writeableBookContent(): io_papermc_paper_datacomponent_item_WritableBookContent_Builder;
  /**
   * Holds the pages that can be written to for this component.
   *
   * @return pages, as filtered objects
  */
  pages(): Filtered<string>[];
}
/**
 * Holds the contents of cooldown information when an item is used.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#USE_COOLDOWN
*/
export class UseCooldown {
  /**
   * Creates a new builder for use cooldown.
   *
   * @param seconds the duration in seconds; must be positive
   * @return builder
  */
  static useCooldown(seconds: number): io_papermc_paper_datacomponent_item_UseCooldown_Builder;
  /**
   * The amount of seconds the cooldown will be active for.
   *
   * @return cooldown seconds
  */
  seconds(): number;
  /**
   * The unique resource location to identify this cooldown group.
   * 
   * This allows items to share cooldowns with other items in the same cooldown group, if present.
   *
   * @return cooldown group, or null if not present
  */
  cooldownGroup(): Key | null;
}
/**
 * Represents a color applied to a dyeable item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#DYED_COLOR
*/
export class DyedItemColor extends ShownInTooltip<DyedItemColor> {
  static dyedItemColor(color: Color, showInTooltip: boolean): DyedItemColor;
  static dyedItemColor(): io_papermc_paper_datacomponent_item_DyedItemColor_Builder;
  /**
   * Color of the item.
   *
   * @return color
  */
  color(): Color;
}
/**
 * Represents the tint of the decorations on the Filled Map item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#MAP_COLOR
*/
export class MapItemColor {
  static mapItemColor(): io_papermc_paper_datacomponent_item_MapItemColor_Builder;
  /**
   * The tint to apply.
   *
   * @return color
  */
  color(): Color;
}
/**
 * Additional lines to include in an item's tooltip.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#LORE
*/
export class ItemLore {
  static lore(lines: ComponentLike[]): ItemLore;
  static lore(): io_papermc_paper_datacomponent_item_ItemLore_Builder;
  /**
   * Lists the components that are added to an item's tooltip.
   *
   * @return component list
  */
  lines(): Component[];
  /**
   * Lists the styled components (example: italicized and purple) that are added to an item's tooltip.
   *
   * @return component list
  */
  styledLines(): Component[];
}
/**
 * Holds the food properties of an item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#FOOD
*/
export class FoodProperties extends BuildableDataComponent<FoodProperties,io_papermc_paper_datacomponent_item_FoodProperties_Builder> {
  static food(): io_papermc_paper_datacomponent_item_FoodProperties_Builder;
  /**
   * Number of food points to restore when eaten.
   *
   * @return the nutrition
  */
  nutrition(): number;
  /**
   * Amount of saturation to restore when eaten.
   *
   * @return the saturation
  */
  saturation(): number;
  /**
   * If `true`, this food can be eaten even if not hungry.
   *
   * @return can always be eaten
  */
  canAlwaysEat(): boolean;
}
/**
 * Holds player profile data that can be resolved to a {@link PlayerProfile}.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#PROFILE
*/
export class ResolvableProfile {
  static resolvableProfile(profile: PlayerProfile): ResolvableProfile;
  static resolvableProfile(): io_papermc_paper_datacomponent_item_ResolvableProfile_Builder;
  uuid(): UUID | null;
  name(): string | null;
  properties(): Collection<ProfileProperty>;
  /**
   * Produces an updated player profile based on this.
   * 
   * This tries to produce a completed profile by filling in missing
   * properties (name, unique id, textures, etc.), and updates existing
   * properties (e.g. name, textures, etc.) to their official and up-to-date
   * values. This operation does not alter the current profile, but produces a
   * new updated {@link PlayerProfile}.
   * 
   * If no player exists for the unique id or name of this profile, this
   * operation yields a profile that is equal to the current profile, which
   * might not be complete.
   * 
   * This is an asynchronous operation: Updating the profile can result in an
   * outgoing connection in another thread in order to fetch the latest
   * profile properties. The returned {@link CompletableFuture} will be
   * completed once the updated profile is available. In order to not block
   * the server's main thread, you should not wait for the result of the
   * returned CompletableFuture on the server's main thread. Instead, if you
   * want to do something with the updated player profile on the server's main
   * thread once it is available, you could do something like this:
   *      * profile.resolve().thenAcceptAsync(updatedProfile -> {
   *     // Do something with the updated profile:
   *     // ...
   * }, runnable -> Bukkit.getScheduler().runTask(plugin, runnable));
   * 
  */
  resolve(): CompletableFuture<PlayerProfile>;
}
/**
 * Holds the contents of an item container.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CONTAINER
*/
export class ItemContainerContents {
  static containerContents(contents: ItemStack[]): ItemContainerContents;
  static containerContents(): io_papermc_paper_datacomponent_item_ItemContainerContents_Builder;
  /**
   * Gets the contents of the container.
   *
   * @return the contents
  */
  contents(): ItemStack[];
}
/**
 * Stores all explosions crafted into a Firework Rocket, as well as flight duration.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#FIREWORKS
*/
export class Fireworks {
  static fireworks(effects: FireworkEffect[], flightDuration: number): Fireworks;
  static fireworks(): io_papermc_paper_datacomponent_item_Fireworks_Builder;
  /**
   * Lists the effects stored in this component.
   *
   * @return the effects
  */
  effects(): FireworkEffect[];
  /**
   * Number of gunpowder in this component.
   *
   * @return the flight duration
  */
  flightDuration(): number;
}
/**
 * Controls the behavior of the item as a tool.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#TOOL
*/
export class Tool {
  static tool(): io_papermc_paper_datacomponent_item_Tool_Builder;
  /**
   * Creates a mining rule that specifies how an item interacts with certain block types.
   *
   * This method allows you to define a rule for a set of block types, optionally setting a custom mining speed
   * and determining whether the item should correct for drops when mining these blocks.
   *
   * @param blocks          The set of block types this rule applies to.
   * @param speed           The custom mining speed multiplier for these blocks. If `null`, the default speed is used.
   * @param correctForDrops A {@link TriState} indicating how to handle item drops:
   *                        
   *                          {@link TriState#TRUE} - Items will be dropped.
   *                          {@link TriState#FALSE} - Items will not be dropped.
   *                          {@link TriState#NOT_SET} - The default drop behavior is used.
   *                        
   * @return A new {@link Rule} instance representing the mining rule.
  */
  static rule(blocks: RegistryKeySet<BlockType>, speed: number | null, correctForDrops: TriState): Rule;
  /**
   * Mining speed to use if no rules match and don't override mining speed.
   *
   * @return default mining speed
  */
  defaultMiningSpeed(): number;
  /**
   * Amount of durability to remove each time a block is mined with this tool.
   *
   * @return durability
  */
  damagePerBlock(): number;
  /**
   * List of rule entries.
   *
   * @return rules
  */
  rules(): Rule[];
}
/**
 * Holds the custom model data.
 *
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CUSTOM_MODEL_DATA
*/
export class CustomModelData {
  static customModelData(): io_papermc_paper_datacomponent_item_CustomModelData_Builder;
  /**
   * Gets the custom model data float values.
   *
   * @return the float values
  */
  floats(): number[];
  /**
   * Gets the custom model data boolean values.
   *
   * @return the boolean values
  */
  flags(): boolean[];
  /**
   * Gets the custom model data string values.
   *
   * @return the string values
  */
  strings(): string[];
  /**
   * Gets the custom model data color values.
   *
   * @return the color values
  */
  colors(): Color[];
}
/**
 * Stores a list of enchantments and their levels on an item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#ENCHANTMENTS
 * @see io.papermc.paper.datacomponent.DataComponentTypes#STORED_ENCHANTMENTS
*/
export class ItemEnchantments extends ShownInTooltip<ItemEnchantments> {
  static itemEnchantments(enchantments: Map<Enchantment,number>, showInTooltip: boolean): ItemEnchantments;
  static itemEnchantments(): io_papermc_paper_datacomponent_item_ItemEnchantments_Builder;
  /**
   * Enchantments currently present on this item.
   *
   * @return enchantments
  */
  enchantments(): Map<Enchantment,number>;
}
/**
 * Holds the contents of a potion (Potion, Splash Potion, Lingering Potion), or potion applied to a Tipped Arrow.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#POTION_CONTENTS
*/
export class PotionContents {
  static potionContents(): io_papermc_paper_datacomponent_item_PotionContents_Builder;
  /**
   * The potion type in this item: the item will inherit all effects from this.
   *
   * @return potion type, or `null` if not present
  */
  potion(): PotionType | null;
  /**
   * Overrides the visual color of the potion.
   *
   * @return color override, or `null` if not present
   * @apiNote alpha channel of the color is only relevant
   * for Tipped Arrow
  */
  customColor(): Color | null;
  /**
   * Additional list of effect instances that this item should apply.
   *
   * @return effects
  */
  customEffects(): PotionEffect[];
  /**
   * Suffix to the translation key of the potion item.
   *
   * @return translation key suffix, or `null` if not present
   * @apiNote This is used in the display of tipped arrow and potion items.
  */
  customName(): string | null;
}
/**
 * Holds the equippable properties of an item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#EQUIPPABLE
*/
export class Equippable extends BuildableDataComponent<Equippable,io_papermc_paper_datacomponent_item_Equippable_Builder> {
  /**
   * Creates a new {@link Equippable.Builder} instance.
   *
   * @param slot The slot for the new equippable to be equippable in.
   * @return a new builder
  */
  static equippable(slot: EquipmentSlot): io_papermc_paper_datacomponent_item_Equippable_Builder;
  /**
   * Gets the equipment slot this item can be equipped in.
   *
   * @return the equipment slot
  */
  slot(): EquipmentSlot;
  /**
   * Gets the equip sound key.
   *
   * @return the equip sound key
  */
  equipSound(): Key;
  /**
   * Gets the asset id if present.
   *
   * @return the asset id or null
  */
  assetId(): Key | null;
  /**
   * Gets the camera overlay key if present.
   *
   * @return the camera overlay key or null
  */
  cameraOverlay(): Key | null;
  /**
   * Gets the set of allowed entities that can equip this item.
   * May be null if all entities are allowed.
   *
   * @return the set of allowed entities
  */
  allowedEntities(): RegistryKeySet<EntityType> | null;
  /**
   * Checks if the item is dispensable.
   *
   * @return true if dispensable, false otherwise
  */
  dispensable(): boolean;
  /**
   * Checks if the item is swappable.
   *
   * @return true if swappable, false otherwise
  */
  swappable(): boolean;
  /**
   * Checks if the item takes damage when the wearer is hurt.
   *
   * @return true if it damages on hurt, false otherwise
  */
  damageOnHurt(): boolean;
}
/**
 * Holds all projectiles that have been loaded into a Crossbow.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#CHARGED_PROJECTILES
*/
export class ChargedProjectiles {
  static chargedProjectiles(projectiles: ItemStack[]): ChargedProjectiles;
  static chargedProjectiles(): io_papermc_paper_datacomponent_item_ChargedProjectiles_Builder;
  /**
   * Lists the projectiles that are currently loaded into this component.
   *
   * @return the loaded projectiles
  */
  projectiles(): ItemStack[];
}
/**
 * Holds the contents of item transformation information when an item is used.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#USE_REMAINDER
*/
export class UseRemainder {
  static useRemainder(itemStack: ItemStack): UseRemainder;
  /**
   * The item that the item that is consumed is transformed into.
   *
   * @return item
  */
  transformInto(): ItemStack;
}
/**
 * Holds the layers of patterns on a banner.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#BANNER_PATTERNS
*/
export class BannerPatternLayers {
  static bannerPatternLayers(patterns: Pattern[]): BannerPatternLayers;
  static bannerPatternLayers(): io_papermc_paper_datacomponent_item_BannerPatternLayers_Builder;
  /**
   * Gets the patterns on the banner.
   *
   * @return the patterns
  */
  patterns(): Pattern[];
}
/**
 * Holds the jukebox song for an item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#JUKEBOX_PLAYABLE
*/
export class JukeboxPlayable extends ShownInTooltip<JukeboxPlayable> {
  static jukeboxPlayable(song: JukeboxSong): io_papermc_paper_datacomponent_item_JukeboxPlayable_Builder;
  jukeboxSong(): JukeboxSong;
}
/**
 * Holds attribute modifiers applied to any item.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#ATTRIBUTE_MODIFIERS
*/
export class ItemAttributeModifiers extends ShownInTooltip<ItemAttributeModifiers> {
  static itemAttributes(): io_papermc_paper_datacomponent_item_ItemAttributeModifiers_Builder;
  /**
   * Lists the attribute modifiers that are present on this item.
   *
   * @return modifiers
  */
  modifiers(): Entry[];
}
/**
 * References the shared map state holding map contents and markers for a Filled Map.
 * @see io.papermc.paper.datacomponent.DataComponentTypes#MAP_ID
*/
export class MapId {
  static mapId(id: number): MapId;
  /**
   * The map id.
   *
   * @return id
  */
  id(): number;
}

}
declare module 'io.papermc.paper.datacomponent.item.DyedItemColor' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { DyedItemColor } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { Color } from 'org.bukkit';
/**
 * Builder for {@link DyedItemColor}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Sets the color of this builder.
   *
   * @param color color
   * @return the builder for chaining
   * @see #color()
  */
  color(color: Color): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<DyedItemColor> {}

}
declare module 'io.papermc.paper.event.entity.EntityKnockbackEvent' {
import { Enum } from 'java.lang';
/**
 * An enum to specify the cause of the knockback.
*/
export class Cause extends Enum<Cause> {
  /**
   * Knockback caused by non-entity damage.
  */
  static readonly DAMAGE: Cause;
  /**
   * Knockback caused by an attacking entity.
  */
  static readonly ENTITY_ATTACK: Cause;
  /**
   * Knockback caused by an explosion.
  */
  static readonly EXPLOSION: Cause;
  /**
   * Knockback caused by the target blocking with a shield.
  */
  static readonly SHIELD_BLOCK: Cause;
  /**
   * Knockback caused by a sweeping attack.
  */
  static readonly SWEEP_ATTACK: Cause;
  /**
   * A generic push.
  */
  static readonly PUSH: Cause;
  /**
   * Knockback with an unknown cause.
  */
  static readonly UNKNOWN: Cause;
  static valueOf(name: string): Cause;
  static values(): Cause[];
}

}
declare module 'io.papermc.paper.potion' {
import { PotionEffectType } from 'org.bukkit.potion';
import { Predicate } from 'java.util.function';
import { RecipeChoice, ItemStack } from 'org.bukkit.inventory';
import { NamespacedKey, Keyed } from 'org.bukkit';
/**
 * Represents a {@link PotionEffectType} paired with a duration.
*/
export class SuspiciousEffectEntry {
  /**
   * Gets the effect type.
   *
   * @return effect type
  */
  effect(): PotionEffectType;
  /**
   * Gets the duration for this effect instance.
   *
   * @return duration (in ticks) or {@link PotionEffect#INFINITE_DURATION}
  */
  duration(): number;
  /**
   * Creates a new instance of SuspiciousEffectEntry.
   *
   * @param effectType effect type
   * @param duration duration (in ticks) or {@link PotionEffect#INFINITE_DURATION}
   * @return new instance of an entry
  */
  static create(effectType: PotionEffectType, duration: number): SuspiciousEffectEntry;
}
/**
 * Represents a potion mix made in a Brewing Stand.
*/
export class PotionMix extends Keyed {
  /**
   * Creates a new potion mix. Add it to the server with {@link org.bukkit.potion.PotionBrewer#addPotionMix(PotionMix)}.
   *
   * @param key a unique key for the mix
   * @param result the resulting itemstack that will appear in the 3 bottom slots
   * @param input the input placed into the bottom 3 slots
   * @param ingredient the ingredient placed into the top slot
  */
  constructor(key: NamespacedKey, result: ItemStack, input: RecipeChoice, ingredient: RecipeChoice);
  /**
   * Create a {@link RecipeChoice} based on a Predicate. These RecipeChoices are only
   * valid for {@link PotionMix}, not anywhere else RecipeChoices may be used.
   *
   * @param stackPredicate a predicate for an itemstack.
   * @return a new RecipeChoice
  */
  static createPredicateChoice(stackPredicate: Predicate<any>): RecipeChoice;
  /**
   * Return the namespaced identifier for this object.
   *
   * @return this object's key
  */
  get key(): NamespacedKey;
  /**
   * Gets the resulting itemstack after the brew has finished.
   *
   * @return the result itemstack
  */
  get result(): ItemStack;
  /**
   * Gets the input for the bottom 3 slots in the brewing stand.
   *
   * @return the bottom 3 slot ingredients
  */
  get input(): RecipeChoice;
  /**
   * Gets the ingredient in the top slot of the brewing stand.
   *
   * @return the top slot input
  */
  get ingredient(): RecipeChoice;
  toString(): string;
  equals(o: any): boolean;
  hashCode(): number;
}

}
declare module 'io.papermc.paper.datacomponent.item.ItemEnchantments' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { Map } from 'java.util';
import { ItemEnchantments } from 'io.papermc.paper.datacomponent.item';
import { Enchantment } from 'org.bukkit.enchantments';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link ItemEnchantments}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Adds an enchantment with the given level to this component.
   *
   * @param enchantment enchantment
   * @param level level
   * @return the builder for chaining
   * @see #enchantments()
  */
  add(enchantment: Enchantment, level: number): Builder;
  /**
   * Adds enchantments with the given level to this component.
   *
   * @param enchantments enchantments
   * @return the builder for chaining
   * @see #enchantments()
  */
  addAll(enchantments: Map<Enchantment,number>): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<ItemEnchantments> {}

}
declare module 'io.papermc.paper.threadedregions.scheduler' {
import { Runnable } from 'java.lang';
import { CancelledState, ExecutionState } from 'io.papermc.paper.threadedregions.scheduler.ScheduledTask';
import { TimeUnit } from 'java.util.concurrent';
import { Plugin } from 'org.bukkit.plugin';
import { Consumer } from 'java.util.function';
import { World, Location } from 'org.bukkit';
/**
 * The global region task scheduler may be used to schedule tasks that will execute on the global region.
 * 
 * The global region is responsible for maintaining world day time, world game time, weather cycle,
 * sleep night skipping, executing commands for console, and other misc. tasks that do not belong to any specific region.
 * 
*/
export class GlobalRegionScheduler {
  /**
   * Schedules a task to be executed on the global region.
   * @param plugin The plugin that owns the task
   * @param run The task to execute
  */
  execute(plugin: Plugin, run: Runnable): void;
  /**
   * Schedules a task to be executed on the global region on the next tick.
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  run(plugin: Plugin, task: Consumer<ScheduledTask>): ScheduledTask;
  /**
   * Schedules a task to be executed on the global region after the specified delay in ticks.
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @param delayTicks The delay, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runDelayed(plugin: Plugin, task: Consumer<ScheduledTask>, delayTicks: number): ScheduledTask;
  /**
   * Schedules a repeating task to be executed on the global region after the initial delay with the
   * specified period.
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @param initialDelayTicks The initial delay, in ticks.
   * @param periodTicks The period, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runAtFixedRate(plugin: Plugin, task: Consumer<ScheduledTask>, initialDelayTicks: number, periodTicks: number): ScheduledTask;
  /**
   * Attempts to cancel all tasks scheduled by the specified plugin.
   * @param plugin Specified plugin.
  */
  cancelTasks(plugin: Plugin): void;
}
/**
 * Scheduler that may be used by plugins to schedule tasks to execute asynchronously from the server tick process.
*/
export class AsyncScheduler {
  /**
   * Schedules the specified task to be executed asynchronously immediately.
   * @param plugin Plugin which owns the specified task.
   * @param task Specified task.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runNow(plugin: Plugin, task: Consumer<ScheduledTask>): ScheduledTask;
  /**
   * Schedules the specified task to be executed asynchronously after the time delay has passed.
   * @param plugin Plugin which owns the specified task.
   * @param task Specified task.
   * @param delay The time delay to pass before the task should be executed.
   * @param unit The time unit for the time delay.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runDelayed(plugin: Plugin, task: Consumer<ScheduledTask>, delay: number, unit: TimeUnit): ScheduledTask;
  /**
   * Schedules the specified task to be executed asynchronously after the initial delay has passed,
   * and then periodically executed with the specified period.
   * @param plugin Plugin which owns the specified task.
   * @param task Specified task.
   * @param initialDelay The time delay to pass before the first execution of the task.
   * @param period The time between task executions after the first execution of the task.
   * @param unit The time unit for the initial delay and period.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runAtFixedRate(plugin: Plugin, task: Consumer<ScheduledTask>, initialDelay: number, period: number, unit: TimeUnit): ScheduledTask;
  /**
   * Attempts to cancel all tasks scheduled by the specified plugin.
   * @param plugin Specified plugin.
  */
  cancelTasks(plugin: Plugin): void;
}
/**
 * The region task scheduler can be used to schedule tasks by location to be executed on the region which owns the location.
 * 
 * Note: It is entirely inappropriate to use the region scheduler to schedule tasks for entities.
 * If you wish to schedule tasks to perform actions on entities, you should be using {@link Entity#getScheduler()}
 * as the entity scheduler will "follow" an entity if it is teleported, whereas the region task scheduler
 * will not.
 * 
*/
export class RegionScheduler {
  /**
   * Schedules a task to be executed on the region which owns the location.
   *
   * @param plugin The plugin that owns the task
   * @param world  The world of the region that owns the task
   * @param chunkX The chunk X coordinate of the region that owns the task
   * @param chunkZ The chunk Z coordinate of the region that owns the task
   * @param run    The task to execute
  */
  execute(plugin: Plugin, world: World, chunkX: number, chunkZ: number, run: Runnable): void;
  /**
   * Schedules a task to be executed on the region which owns the location.
   *
   * @param plugin   The plugin that owns the task
   * @param location The location at which the region executing should own
   * @param run      The task to execute
  */
  execute(plugin: Plugin, location: Location, run: Runnable): void;
  /**
   * Schedules a task to be executed on the region which owns the location on the next tick.
   *
   * @param plugin The plugin that owns the task
   * @param world  The world of the region that owns the task
   * @param chunkX The chunk X coordinate of the region that owns the task
   * @param chunkZ The chunk Z coordinate of the region that owns the task
   * @param task   The task to execute
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  run(plugin: Plugin, world: World, chunkX: number, chunkZ: number, task: Consumer<ScheduledTask>): ScheduledTask;
  /**
   * Schedules a task to be executed on the region which owns the location on the next tick.
   *
   * @param plugin   The plugin that owns the task
   * @param location The location at which the region executing should own
   * @param task     The task to execute
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  run(plugin: Plugin, location: Location, task: Consumer<ScheduledTask>): ScheduledTask;
  /**
   * Schedules a task to be executed on the region which owns the location after the specified delay in ticks.
   *
   * @param plugin     The plugin that owns the task
   * @param world      The world of the region that owns the task
   * @param chunkX     The chunk X coordinate of the region that owns the task
   * @param chunkZ     The chunk Z coordinate of the region that owns the task
   * @param task       The task to execute
   * @param delayTicks The delay, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runDelayed(plugin: Plugin, world: World, chunkX: number, chunkZ: number, task: Consumer<ScheduledTask>, delayTicks: number): ScheduledTask;
  /**
   * Schedules a task to be executed on the region which owns the location after the specified delay in ticks.
   *
   * @param plugin     The plugin that owns the task
   * @param location   The location at which the region executing should own
   * @param task       The task to execute
   * @param delayTicks The delay, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runDelayed(plugin: Plugin, location: Location, task: Consumer<ScheduledTask>, delayTicks: number): ScheduledTask;
  /**
   * Schedules a repeating task to be executed on the region which owns the location after the initial delay with the
   * specified period.
   *
   * @param plugin            The plugin that owns the task
   * @param world             The world of the region that owns the task
   * @param chunkX            The chunk X coordinate of the region that owns the task
   * @param chunkZ            The chunk Z coordinate of the region that owns the task
   * @param task              The task to execute
   * @param initialDelayTicks The initial delay, in ticks.
   * @param periodTicks       The period, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runAtFixedRate(plugin: Plugin, world: World, chunkX: number, chunkZ: number, task: Consumer<ScheduledTask>, initialDelayTicks: number, periodTicks: number): ScheduledTask;
  /**
   * Schedules a repeating task to be executed on the region which owns the location after the initial delay with the
   * specified period.
   *
   * @param plugin            The plugin that owns the task
   * @param location          The location at which the region executing should own
   * @param task              The task to execute
   * @param initialDelayTicks The initial delay, in ticks.
   * @param periodTicks       The period, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task.
  */
  runAtFixedRate(plugin: Plugin, location: Location, task: Consumer<ScheduledTask>, initialDelayTicks: number, periodTicks: number): ScheduledTask;
}
/**
 * Represents a task scheduled to a scheduler.
*/
export class ScheduledTask {
  /**
   * Returns the plugin that scheduled this task.
   * @return the plugin that scheduled this task.
  */
  get owningPlugin(): Plugin;
  /**
   * Returns whether this task executes on a fixed period, as opposed to executing only once.
   * @return whether this task executes on a fixed period, as opposed to executing only once.
  */
  isRepeatingTask(): boolean;
  /**
   * Attempts to cancel this task, returning the result of the attempt. In all cases, if the task is currently
   * being executed no attempt is made to halt the task, however any executions in the future are halted.
   * @return the result of the cancellation attempt.
  */
  cancel(): CancelledState;
  /**
   * Returns the current execution state of this task.
   * @return the current execution state of this task.
  */
  get executionState(): ExecutionState;
  /**
   * Returns whether the current execution state is {@link ExecutionState#CANCELLED} or {@link ExecutionState#CANCELLED_RUNNING}.
   * @return whether the current execution state is {@link ExecutionState#CANCELLED} or {@link ExecutionState#CANCELLED_RUNNING}.
  */
  isCancelled(): boolean;
}
/**
 * An entity can move between worlds with an arbitrary tick delay, be temporarily removed
 * for players (i.e end credits), be partially removed from world state (i.e inactive but not removed),
 * teleport between ticking regions, teleport between worlds, and even be removed entirely from the server.
 * The uncertainty of an entity's state can make it difficult to schedule tasks without worrying about undefined
 * behaviors resulting from any of the states listed previously.
 *
 * 
 * This class is designed to eliminate those states by providing an interface to run tasks only when an entity
 * is contained in a world, on the owning thread for the region, and by providing the current Entity object.
 * The scheduler also allows a task to provide a callback, the "retired" callback, that will be invoked
 * if the entity is removed before a task that was scheduled could be executed. The scheduler is also
 * completely thread-safe, allowing tasks to be scheduled from any thread context. The scheduler also indicates
 * properly whether a task was scheduled successfully (i.e scheduler not retired), thus the code scheduling any task
 * knows whether the given callbacks will be invoked eventually or not - which may be critical for off-thread
 * contexts.
 * 
*/
export class EntityScheduler {
  /**
   * Schedules a task with the given delay. If the task failed to schedule because the scheduler is retired (entity
   * removed), then returns `false`. Otherwise, either the run callback will be invoked after the specified delay,
   * or the retired callback will be invoked if the scheduler is retired.
   * Note that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove
   * other entities, load chunks, load worlds, modify ticket levels, etc.
   *
   * 
   * It is guaranteed that the run and retired callback are invoked on the region which owns the entity.
   * 
   * @param run The callback to run after the specified delay, may not be null.
   * @param retired Retire callback to run if the entity is retired before the run callback can be invoked, may be null.
   * @param delay The delay in ticks before the run callback is invoked. Any value less-than 1 is treated as 1.
   * @return `true` if the task was scheduled, which means that either the run function or the retired function
   *         will be invoked (but never both), or `false` indicating neither the run nor retired function will be invoked
   *         since the scheduler has been retired.
  */
  execute(plugin: Plugin, run: Runnable, retired: Runnable | null, delay: number): boolean;
  /**
   * Schedules a task to execute on the next tick. If the task failed to schedule because the scheduler is retired (entity
   * removed), then returns `null`. Otherwise, either the task callback will be invoked after the specified delay,
   * or the retired callback will be invoked if the scheduler is retired.
   * Note that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove
   * other entities, load chunks, load worlds, modify ticket levels, etc.
   *
   * 
   * It is guaranteed that the task and retired callback are invoked on the region which owns the entity.
   * 
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @param retired Retire callback to run if the entity is retired before the run callback can be invoked, may be null.
   * @return The {@link ScheduledTask} that represents the scheduled task, or `null` if the entity has been removed.
  */
  run(plugin: Plugin, task: Consumer<ScheduledTask>, retired: Runnable | null): ScheduledTask | null;
  /**
   * Schedules a task with the given delay. If the task failed to schedule because the scheduler is retired (entity
   * removed), then returns `null`. Otherwise, either the task callback will be invoked after the specified delay,
   * or the retired callback will be invoked if the scheduler is retired.
   * Note that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove
   * other entities, load chunks, load worlds, modify ticket levels, etc.
   *
   * 
   * It is guaranteed that the task and retired callback are invoked on the region which owns the entity.
   * 
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @param retired Retire callback to run if the entity is retired before the run callback can be invoked, may be null.
   * @param delayTicks The delay, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task, or `null` if the entity has been removed.
  */
  runDelayed(plugin: Plugin, task: Consumer<ScheduledTask>, retired: Runnable | null, delayTicks: number): ScheduledTask | null;
  /**
   * Schedules a repeating task with the given delay and period. If the task failed to schedule because the scheduler
   * is retired (entity removed), then returns `null`. Otherwise, either the task callback will be invoked after
   * the specified delay, or the retired callback will be invoked if the scheduler is retired.
   * Note that the retired callback is invoked in critical code, so it should not attempt to remove the entity, remove
   * other entities, load chunks, load worlds, modify ticket levels, etc.
   *
   * 
   * It is guaranteed that the task and retired callback are invoked on the region which owns the entity.
   * 
   * @param plugin The plugin that owns the task
   * @param task The task to execute
   * @param retired Retire callback to run if the entity is retired before the run callback can be invoked, may be null.
   * @param initialDelayTicks The initial delay, in ticks.
   * @param periodTicks The period, in ticks.
   * @return The {@link ScheduledTask} that represents the scheduled task, or `null` if the entity has been removed.
  */
  runAtFixedRate(plugin: Plugin, task: Consumer<ScheduledTask>, retired: Runnable | null, initialDelayTicks: number, periodTicks: number): ScheduledTask | null;
}

}
declare module 'io.papermc.paper.math' {
import { BlockFace } from 'org.bukkit.block';
import { Vector } from 'org.bukkit.util';
import { World, Axis, Location } from 'org.bukkit';
/**
 * Rotations is an immutable object that stores rotations
 * in degrees on each axis (X, Y, Z).
*/
export class Rotations {
  /**
   * Rotations instance with every axis set to 0
  */
  static readonly ZERO: Rotations;
  /**
   * Creates a new Rotations instance holding the provided rotations
   *
   * @param x the angle for the X axis in degrees
   * @param y the angle for the Y axis in degrees
   * @param z the angle for the Z axis in degrees
   * @return Rotations instance holding the provided rotations
  */
  static ofDegrees(x: number, y: number, z: number): Rotations;
  /**
   * Returns the angle on the X axis in degrees
   *
   * @return the angle in degrees
  */
  x(): number;
  /**
   * Returns the angle on the Y axis in degrees
   *
   * @return the angle in degrees
  */
  y(): number;
  /**
   * Returns the angle on the Z axis in degrees
   *
   * @return the angle in degrees
  */
  z(): number;
  /**
   * Returns a new Rotations instance which is the result
   * of changing the X axis to the passed angle
   *
   * @param x the angle in degrees
   * @return the resultant Rotations
  */
  withX(x: number): Rotations;
  /**
   * Returns a new Rotations instance which is the result
   * of changing the Y axis to the passed angle
   *
   * @param y the angle in degrees
   * @return the resultant Rotations
  */
  withY(y: number): Rotations;
  /**
   * Returns a new Rotations instance which is the result
   * of changing the Z axis to the passed angle
   *
   * @param z the angle in degrees
   * @return the resultant Rotations
  */
  withZ(z: number): Rotations;
  /**
   * Returns a new Rotations instance which is the result of adding
   * the x, y, z components to this Rotations
   *
   * @param x the angle to add to the X axis in degrees
   * @param y the angle to add to the Y axis in degrees
   * @param z the angle to add to the Z axis in degrees
   * @return the resultant Rotations
  */
  add(x: number, y: number, z: number): Rotations;
  /**
   * Returns a new Rotations instance which is the result of subtracting
   * the x, y, z components from this Rotations
   *
   * @param x the angle to subtract from the X axis in degrees
   * @param y the angle to subtract from the Y axis in degrees
   * @param z the angle to subtract from the Z axis in degrees
   * @return the resultant Rotations
  */
  subtract(x: number, y: number, z: number): Rotations;
}
/**
 * A position represented with doubles.
 * 
 * May see breaking changes until Experimental annotation is removed.
 *
 * @see BlockPosition
*/
export class FinePosition extends Position {
  blockX(): number;
  blockY(): number;
  blockZ(): number;
  isBlock(): boolean;
  isFine(): boolean;
  toBlock(): BlockPosition;
  offset(x: number, y: number, z: number): FinePosition;
}
/**
 * Common interface for {@link FinePosition} and {@link BlockPosition}.
 * 
 * May see breaking changes until Experimental annotation is removed.
*/
export class Position {
  static readonly FINE_ZERO: FinePosition;
  static readonly BLOCK_ZERO: BlockPosition;
  /**
   * Gets the block x value for this position
   *
   * @return the block x value
  */
  blockX(): number;
  /**
   * Gets the block x value for this position
   *
   * @return the block x value
  */
  blockY(): number;
  /**
   * Gets the block x value for this position
   *
   * @return the block x value
  */
  blockZ(): number;
  /**
   * Gets the x value for this position
   *
   * @return the x value
  */
  x(): number;
  /**
   * Gets the y value for this position
   *
   * @return the y value
  */
  y(): number;
  /**
   * Gets the z value for this position
   *
   * @return the z value
  */
  z(): number;
  /**
   * Checks of this position represents a {@link BlockPosition}
   *
   * @return true if block
  */
  isBlock(): boolean;
  /**
   * Checks if this position represents a {@link FinePosition}
   *
   * @return true if fine
  */
  isFine(): boolean;
  /**
   * Checks if each component of this position is finite.
  */
  isFinite(): boolean;
  /**
   * Returns a position offset by the specified amounts.
   *
   * @param x x value to offset
   * @param y y value to offset
   * @param z z value to offset
   * @return the offset position
  */
  offset(x: number, y: number, z: number): Position;
  /**
   * Returns a new position at the center of the block position this represents
   *
   * @return a new center position
  */
  toCenter(): FinePosition;
  /**
   * Returns the block position of this position
   * or itself if it already is a block position
   *
   * @return the block position
  */
  toBlock(): BlockPosition;
  /**
   * Converts this position to a vector
   *
   * @return a new vector
  */
  toVector(): Vector;
  /**
   * Creates a new location object at this position with the specified world
   *
   * @param world the world for the location object
   * @return a new location
  */
  toLocation(world: World): Location;
  /**
   * Creates a position at the coordinates
   *
   * @param x x coord
   * @param y y coord
   * @param z z coord
   * @return a position with those coords
  */
  static block(x: number, y: number, z: number): BlockPosition;
  /**
   * Creates a position from the location.
   *
   * @param location the location to copy the position of
   * @return a new position at that location
  */
  static block(location: Location): BlockPosition;
  /**
   * Creates a position at the coordinates
   *
   * @param x x coord
   * @param y y coord
   * @param z z coord
   * @return a position with those coords
  */
  static fine(x: number, y: number, z: number): FinePosition;
  /**
   * Creates a position from the location.
   *
   * @param location the location to copy the position of
   * @return a new position at that location
  */
  static fine(location: Location): FinePosition;
}
/**
 * A position represented with integers.
 * 
 * May see breaking changes until Experimental annotation is removed.
 *
 * @see FinePosition
*/
export class BlockPosition extends Position {
  x(): number;
  y(): number;
  z(): number;
  isBlock(): boolean;
  isFine(): boolean;
  toBlock(): BlockPosition;
  offset(x: number, y: number, z: number): BlockPosition;
  /**
   * Returns a block position offset by 1 in the direction specified.
   *
   * @param blockFace the block face to offset towards
   * @return the offset block position
  */
  offset(blockFace: BlockFace): BlockPosition;
  /**
   * Returns a block position offset in the direction specified
   * multiplied by the amount.
   *
   * @param blockFace the block face to offset towards
   * @param amount the number of times to move in that direction
   * @return the offset block position
  */
  offset(blockFace: BlockFace, amount: number): BlockPosition;
  /**
   * Returns a block position offset by the amount along
   * the specified axis.
   *
   * @param axis the axis to offset along
   * @param amount the amount to offset along that axis
   * @return the offset block position
  */
  offset(axis: Axis, amount: number): BlockPosition;
}
/**
 * Represents a rotation with specified pitch and yaw values.
*/
export class Rotation {
  /**
   * Creates a new rotation with the specified yaw and pitch values.
   *
   * @param yaw   the yaw component of the rotation, measured in degrees
   * @param pitch the pitch component of the rotation, measured in degrees
   * @return a new `Rotation` instance with the specified yaw and pitch
  */
  static rotation(yaw: number, pitch: number): Rotation;
  /**
   * Retrieves the pitch component of the rotation, measured in degrees.
   *
   * @return the pitch value in degrees
  */
  pitch(): number;
  /**
   * Retrieves the yaw component of the rotation, measured in degrees.
   *
   * @return the yaw value in degrees
  */
  yaw(): number;
}

}
declare module 'io.papermc.paper.datacomponent.item.PotDecorations' {
import { PotDecorations } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ItemType } from 'org.bukkit.inventory';
/**
 * Builder for {@link PotDecorations}.
*/
export class Builder extends DataComponentBuilder<PotDecorations> {
  /**
   * Set the {@link ItemType} for the back.
   *
   * @param back item for the back
   * @return the builder for chaining
   * @see #back()
  */
  back(back: ItemType | null): Builder;
  /**
   * Set the {@link ItemType} for the left.
   *
   * @param left item for the left
   * @return the builder for chaining
   * @see #left()
  */
  left(left: ItemType | null): Builder;
  /**
   * Set the {@link ItemType} for the right.
   *
   * @param right item for the right
   * @return the builder for chaining
   * @see #right()
  */
  right(right: ItemType | null): Builder;
  /**
   * Set the {@link ItemType} for the front.
   *
   * @param front item for the front
   * @return the builder for chaining
   * @see #front()
  */
  front(front: ItemType | null): Builder;
}

}
declare module 'io.papermc.paper.event.server.WhitelistStateUpdateEvent' {
import { Enum } from 'java.lang';
/**
 * Enum for the whitelist status changes
*/
export class WhitelistStatus extends Enum<WhitelistStatus> {
  static readonly ADDED: WhitelistStatus;
  static readonly REMOVED: WhitelistStatus;
  static valueOf(name: string): WhitelistStatus;
  static values(): WhitelistStatus[];
}

}
declare module 'io.papermc.paper.tag' {
import { Registrar } from 'io.papermc.paper.plugin.lifecycle.event.registrar';
import { Keyed } from 'net.kyori.adventure.key';
import { Collection, List, Map } from 'java.util';
import { TypedKey, RegistryKey } from 'io.papermc.paper.registry';
import { Predicate } from 'java.util.function';
import { TagKey } from 'io.papermc.paper.registry.tag';
import { EntityType } from 'org.bukkit.entity';
import { NamespacedKey } from 'org.bukkit';
/**
 * Registrar for tags after they have been flattened. Flattened
 * tags are tags which have any nested tags resolved to the tagged
 * values the nested tags point to. This registrar, being a post-flatten
 * registrar, allows for modification after that flattening has happened, when
 * tags only point to individual entries and not other nested tags.
 * 
 * An example of a custom enchant being registered to the vanilla
 * `#minecraft:in_enchanting_table` tag:
 * {@code
 * class YourBootstrapClass implements PluginBootstrap {
 *
 *     public static final TypedKey CUSTOM_POINTY_ENCHANT = EnchantmentKeys.create(Key.key("papermc:pointy"));
 *
 *     @Override
 *     public void bootstrap(BootstrapContext context) {
 *         final LifecycleEventManager manager = context.getLifecycleManager();
 *         manager.registerEventHandler(LifecycleEvents.TAGS.postFlatten(RegistryKey.ENCHANTMENT), event -> {
 *             final PostFlattenTagRegistrar registrar = event.registrar();
 *             registrar.addToTag(
 *                 EnchantmentTagKeys.IN_ENCHANTING_TABLE,
 *                 Set.of(CUSTOM_POINTY_ENCHANT)
 *             );
 *         });
 *     }
 * }
 * }
 *
 * @param  the type of value in the tag
 * @see PreFlattenTagRegistrar
*/
export class PostFlattenTagRegistrar<T> extends Registrar {
  /**
   * Get the registry key for this tag registrar.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
  /**
   * Get a copy of all tags currently held in this registrar.
   *
   * @return an immutable map of all tags
  */
  get allTags(): Map<TagKey<T>,Collection<TypedKey<T>>>;
  /**
   * Checks if this registrar has a tag with the given key.
   *
   * @param tagKey the key to check for
   * @return true if the tag exists, false otherwise
  */
  hasTag(tagKey: TagKey<T>): boolean;
  /**
   * Get the tag with the given key. Use {@link #hasTag(TagKey)} to check
   * if a tag exists first.
   *
   * @param tagKey the key of the tag to get
   * @return an immutable list of tag entries
   * @throws java.util.NoSuchElementException if the tag does not exist
   * @see #hasTag(TagKey)
  */
  getTag(tagKey: TagKey<T>): Collection<TypedKey<T>>;
  /**
   * Adds values to the given tag. If the tag does not exist, it will be created.
   *
   * @param tagKey the key of the tag to add to
   * @param values the values to add
   * @see #setTag(TagKey, Collection)
  */
  addToTag(tagKey: TagKey<T>, values: Collection<TypedKey<T>>): void;
  /**
   * Sets the values of the given tag. If the tag does not exist, it will be created.
   * If the tag does exist, it will be overwritten.
   *
   * @param tagKey the key of the tag to set
   * @param values the values to set
   * @see #addToTag(TagKey, Collection)
  */
  setTag(tagKey: TagKey<T>, values: Collection<TypedKey<T>>): void;
}
/**
 * All tags in this class are unmodifiable, attempting to modify them will throw an
 * {@link UnsupportedOperationException}.
*/
export class EntityTags {
  /**
   * Covers undead mobs
   * @see https://minecraft.wiki/wiki/Mob#Undead_mobs
  */
  static readonly UNDEADS: EntitySetTag;
  /**
   * Covers all horses
  */
  static readonly HORSES: EntitySetTag;
  /**
   * Covers all minecarts
  */
  static readonly MINECARTS: EntitySetTag;
  /**
   * Covers mobs that split into smaller mobs
  */
  static readonly SPLITTING_MOBS: EntitySetTag;
  /**
   * Covers all water based mobs
   * @see https://minecraft.wiki/wiki/Mob#Aquatic_mobs
   * @deprecated in favour of {@link org.bukkit.Tag#ENTITY_TYPES_AQUATIC}
  */
  static readonly WATER_BASED: EntitySetTag;
}
/**
 * Registrar for tags before they are flattened. Flattened
 * tags are tags which have any nested tags resolved to the tagged
 * values the nested tags point to. This registrar, being a pre-flatten
 * registrar, allows for modification before that flattening has happened, when
 * tags both point to individual entries and other nested tags.
 * 
 * An example of a tag being created in a pre-flatten registrar:
 * {@code
 * class YourBootstrapClass implements PluginBootstrap {
 *
 *     public static final TagKey AXE_PICKAXE = ItemTypeTagKeys.create(Key.key("papermc:axe_pickaxe"));
 *
 *     @Override
 *     public void bootstrap(BootstrapContext context) {
 *         final LifecycleEventManager manager = context.getLifecycleManager();
 *         manager.registerEventHandler(LifecycleEvents.TAGS.preFlatten(RegistryKey.ITEM), event -> {
 *             final PreFlattenTagRegistrar registrar = event.registrar();
 *             registrar.setTag(AXE_PICKAXE, Set.of(
 *                 TagEntry.tagEntry(ItemTypeTagKeys.PICKAXES),
 *                 TagEntry.tagEntry(ItemTypeTagKeys.AXES)
 *             ));
 *         });
 *     }
 * }
 * }
 *
 * @param  the type of value in the tag
 * @see PostFlattenTagRegistrar
*/
export class PreFlattenTagRegistrar<T> extends Registrar {
  /**
   * Get the registry key for this tag registrar.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
  /**
   * Get a copy of all tags currently held in this registrar.
   *
   * @return an immutable map of all tags
  */
  get allTags(): Map<TagKey<T>,Collection<TagEntry<T>>>;
  /**
   * Checks if this registrar has a tag with the given key.
   *
   * @param tagKey the key to check for
   * @return true if the tag exists, false otherwise
  */
  hasTag(tagKey: TagKey<T>): boolean;
  /**
   * Get the tag with the given key. Use {@link #hasTag(TagKey)} to check
   * if a tag exists first.
   *
   * @param tagKey the key of the tag to get
   * @return an immutable list of tag entries
   * @throws java.util.NoSuchElementException if the tag does not exist
   * @see #hasTag(TagKey)
  */
  getTag(tagKey: TagKey<T>): TagEntry<T>[];
  /**
   * Adds entries to the given tag. If the tag does not exist, it will be created.
   *
   * @param tagKey the key of the tag to add to
   * @param entries the entries to add
   * @see #setTag(TagKey, Collection)
  */
  addToTag(tagKey: TagKey<T>, entries: Collection<TagEntry<T>>): void;
  /**
   * Sets the entries of the given tag. If the tag does not exist, it will be created.
   * If the tag does exist, it will be overwritten.
   *
   * @param tagKey the key of the tag to set
   * @param entries the entries to set
   * @see #addToTag(TagKey, Collection)
  */
  setTag(tagKey: TagKey<T>, entries: Collection<TagEntry<T>>): void;
}
/**
 * An entry is a pre-flattened tag. Represents
 * either an individual registry entry or a whole tag.
 *
 * @param  the type of value in the tag
 * @see PreFlattenTagRegistrar
*/
export class TagEntry<T> extends Keyed {
  /**
   * Create required tag entry for a single value.
   *
   * @param entryKey the key of the entry
   * @return a new tag entry for a value
   * @param  the type of value
  */
  static valueEntry<T>(entryKey: TypedKey<T>): TagEntry<T>;
  /**
   * Create tag entry for a single value.
   *
   * @param entryKey the key of the entry
   * @param isRequired if this entry is required (see {@link #isRequired()})
   * @return a new tag entry for a value
   * @param  the type of value
  */
  static valueEntry<T>(entryKey: TypedKey<T>, isRequired: boolean): TagEntry<T>;
  /**
   * Create a required tag entry for a nested tag.
   *
   * @param tagKey they key for the tag
   * @return a new tag entry for a tag
   * @param  the type of value
  */
  static tagEntry<T>(tagKey: TagKey<T>): TagEntry<T>;
  /**
   * Create a tag entry for a nested tag.
   *
   * @param tagKey they key for the tag
   * @param isRequired if this entry is required (see {@link #isRequired()})
   * @return a new tag entry for a tag
   * @param  the type of value
  */
  static tagEntry<T>(tagKey: TagKey<T>, isRequired: boolean): TagEntry<T>;
  /**
   * Returns if this entry represents a tag.
   *
   * @return true if this entry is a tag, false if it is an individual entry
  */
  isTag(): boolean;
  /**
   * Returns if this entry is required. If an entry is required,
   * the value or tag must exist on the server in order for the tag
   * to load correctly. A missing value will prevent the tag holding
   * that missing value from being created.
   *
   * @return true if this entry is required, false if it is optional
  */
  isRequired(): boolean;
}
export class EntitySetTag extends BaseTag<EntityType,EntitySetTag> {
  constructor(key: NamespacedKey, filter: Predicate<EntityType>);
  constructor(key: NamespacedKey, ...values: EntityType[]);
  constructor(key: NamespacedKey, values: Collection<EntityType>);
  constructor(key: NamespacedKey, values: Collection<EntityType>, ...globalPredicates: Predicate[]);
}

}
declare module 'io.papermc.paper.event.world' {
import { CommandSender } from 'org.bukkit.command';
import { HandlerList, Cancellable } from 'org.bukkit.event';
import { WorldEvent } from 'org.bukkit.event.world';
import { GameRule, World } from 'org.bukkit';
/**
 * Called when a world's gamerule is changed, either by command or by api.
*/
export class WorldGameRuleChangeEvent extends WorldEvent {
  constructor(world: World, commandSender: CommandSender | null, gameRule: GameRule<any>, value: string);
  /**
   * Gets the command sender associated with this event.
   *
   * @return `null` if the gamerule was changed via api, otherwise the {@link CommandSender}.
  */
  get commandSender(): CommandSender | null;
  /**
   * Gets the game rule associated with this event.
   *
   * @return the gamerule being changed.
  */
  get gameRule(): GameRule<any>;
  /**
   * Gets the new value of the gamerule.
   *
   * @return the new value of the gamerule.
  */
  get value(): string;
  /**
   * Sets the new value of this gamerule.
   *
   * @param value the new value of the gamerule.
  */
  set value(value: string);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface WorldGameRuleChangeEvent extends WorldEvent, Cancellable {}

}
declare module 'io.papermc.paper.datacomponent.DataComponentType' {
import { DataComponentType } from 'io.papermc.paper.datacomponent';
export class Valued<T> extends DataComponentType {

}
export class NonValued extends DataComponentType {

}

}
declare module 'io.papermc.paper.datacomponent.item.Consumable' {
import { Key } from 'net.kyori.adventure.key';
import { List } from 'java.util';
import { Consumable } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ConsumeEffect, ItemUseAnimation } from 'io.papermc.paper.datacomponent.item.consumable';
/**
 * Builder for {@link Consumable}.
*/
export class Builder extends DataComponentBuilder<Consumable> {
  consumeSeconds(consumeSeconds: number): Builder;
  animation(animation: ItemUseAnimation): Builder;
  sound(sound: Key): Builder;
  hasConsumeParticles(hasConsumeParticles: boolean): Builder;
  addEffect(effect: ConsumeEffect): Builder;
  addEffects(effects: ConsumeEffect[]): Builder;
}

}
declare module 'io.papermc.paper' {
import { Key } from 'net.kyori.adventure.key';
import { DamageEffect } from 'org.bukkit.damage';
import { Instant } from 'java.time';
import { Optional, OptionalInt } from 'java.util';
import { StringRepresentation } from 'io.papermc.paper.ServerBuildInfo';
/**
 * Information about the current server build.
*/
export class ServerBuildInfo {
  /**
   * The brand id for Paper.
  */
  static readonly BRAND_PAPER_ID: Key;
  /**
   * Gets the `ServerBuildInfo`.
   *
   * @return the `ServerBuildInfo`
  */
  static buildInfo(): ServerBuildInfo;
  /**
   * Gets the brand id of the server.
   *
   * @return the brand id of the server (e.g. "papermc:paper")
  */
  brandId(): Key;
  /**
   * Checks if the current server supports the specified brand.
   *
   * @param brandId the brand to check (e.g. "papermc:folia")
   * @return `true` if the server supports the specified brand
  */
  isBrandCompatible(brandId: Key): boolean;
  /**
   * Gets the brand name of the server.
   *
   * @return the brand name of the server (e.g. "Paper")
  */
  brandName(): string;
  /**
   * Gets the Minecraft version id.
   *
   * @return the Minecraft version id (e.g. "1.20.4", "1.20.2-pre2", "23w31a")
  */
  minecraftVersionId(): string;
  /**
   * Gets the Minecraft version name.
   *
   * @return the Minecraft version name (e.g. "1.20.4", "1.20.2 Pre-release 2", "23w31a")
  */
  minecraftVersionName(): string;
  /**
   * Gets the build number.
   *
   * @return the build number
  */
  buildNumber(): OptionalInt;
  /**
   * Gets the build time.
   *
   * @return the build time
  */
  buildTime(): Instant;
  /**
   * Gets the git commit branch.
   *
   * @return the git commit branch
  */
  gitBranch(): Optional<string>;
  /**
   * Gets the git commit hash.
   *
   * @return the git commit hash
  */
  gitCommit(): Optional<string>;
  /**
   * Creates a string representation of the server build information.
   *
   * @param representation the type of representation
   * @return a string
  */
  asString(representation: StringRepresentation): string;
}
/**
 * Static bridge to the server internals.
 * 
 * Any and all methods in here are *not* to be called by plugin developers, may change at any time and may generally
 * cause issues when called under unexpected circumstances.
*/
export class InternalAPIBridge {
  /**
   * Yields the instance of this API bridge by lazily requesting it from the java service loader API.
   *
   * @return the instance.
  */
  static get(): InternalAPIBridge;
  /**
   * Creates a damage effect instance for the passed key.
   *
   * @param key the string key.
   * @return the damage effect.
  */
  getDamageEffect(key: string): DamageEffect;
}

}
declare module 'io.papermc.paper.item' {
import { Enum } from 'java.lang';
export class MapPostProcessing extends Enum<MapPostProcessing> {
  static readonly LOCK: MapPostProcessing;
  static readonly SCALE: MapPostProcessing;
  static valueOf(name: string): MapPostProcessing;
  static values(): MapPostProcessing[];
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.handler' {
import { LifecycleEvent } from 'io.papermc.paper.plugin.lifecycle.event';
/**
 * A handler for a specific event. Can be implemented
 * in a concrete class or as a lambda.
 *
 * @param  the event
*/
export class LifecycleEventHandler<E> {
  run(event: E): void;
}

}
declare module 'io.papermc.paper.registry.data' {
import { Component } from 'net.kyori.adventure.text';
import { Key } from 'net.kyori.adventure.key';
import { DamageEffect, DamageScaling, DeathMessageType } from 'org.bukkit.damage';
import { RegistryBuilderFactory } from 'io.papermc.paper.registry';
import { Consumer } from 'java.util.function';
import { Builder } from 'io.papermc.paper.registry.data.PaintingVariantRegistryEntry';
import { Art } from 'org.bukkit';
/**
 * A data-centric version-specific registry entry for the {@link DamageType} type.
*/
export class DamageTypeRegistryEntry {
  /**
   * Provides part of the death message translation key. (death.attack.<message_id>)
   * 
   * Note The translation key is only used if
   * {@link #deathMessageType()} is {@link DeathMessageType#DEFAULT}
   *
   * @return part of the translation key
  */
  messageId(): string;
  /**
   * Provides the amount of hunger exhaustion caused by this damage type.
   *
   * @return the exhaustion
  */
  exhaustion(): number;
  /**
   * Provides the {@link DamageScaling} for this damage type.
   *
   * @return the damage scaling
  */
  damageScaling(): DamageScaling;
  /**
   * Provides the {@link DamageEffect} for this damage type.
   *
   * @return the damage effect
  */
  damageEffect(): DamageEffect;
  /**
   * Provides the {@link DeathMessageType} for this damage type.
   *
   * @return the death message type
  */
  deathMessageType(): DeathMessageType;
}
/**
 * A data-centric version-specific registry entry for the {@link Art} type.
*/
export class PaintingVariantRegistryEntry {
  /**
   * Provides the width of this painting in blocks.
   *
   * @return the width.
   * @see Art#getBlockWidth()
  */
  width(): number;
  /**
   * Provides the height of this painting in blocks.
   *
   * @return the height.
   * @see Art#getBlockHeight()
  */
  height(): number;
  /**
   * Provides the title of the painting visible in the creative inventory.
   *
   * @return the title.
   * @see Art#title()
  */
  title(): Component | null;
  /**
   * Provides the author of the painting visible in the creative inventory.
   *
   * @return the author.
   * @see Art#author()
  */
  author(): Component | null;
  /**
   * Provides the asset id of the painting, which is the location of the sprite to use.
   *
   * @return the asset id.
   * @see Art#assetId()
  */
  assetId(): Key;
}
/**
 * A data-centric version-specific registry entry for the {@link PatternType} type.
*/
export class BannerPatternRegistryEntry {
  /**
   * Provides the asset id of the pattern type, which is the location of the sprite to use.
   *
   * @return the asset id.
  */
  assetId(): Key;
  /**
   * Provides the translation key for displaying the pattern inside the banner's tooltip.
   *
   * @return the translation key.
  */
  translationKey(): string;
}
/**
 * A data-centric version-specific registry entry for the {@link GameEvent} type.
*/
export class GameEventRegistryEntry {
  /**
   * Provides the range in which this game event will notify its listeners.
   *
   * @return the range of blocks, represented as an int.
   * @see GameEvent#getRange()
  */
  range(): number;
}
export class InlinedRegistryBuilderProvider {
  static instance(): InlinedRegistryBuilderProvider;
  createPaintingVariant(value: Consumer<RegistryBuilderFactory<Art,Builder>>): Art;
}

}
declare module 'io.papermc.paper.threadedregions.scheduler.ScheduledTask' {
import { Enum } from 'java.lang';
/**
 * Represents the result of attempting to cancel a task.
*/
export class CancelledState extends Enum<CancelledState> {
  /**
   * The task (repeating or not) has been successfully cancelled by the caller thread. The task is not executing
   * currently, and it will not begin execution in the future.
  */
  static readonly CANCELLED_BY_CALLER: CancelledState;
  /**
   * The task (repeating or not) is already cancelled. The task is not executing currently, and it will not
   * begin execution in the future.
  */
  static readonly CANCELLED_ALREADY: CancelledState;
  /**
   * The task is not a repeating task, and could not be cancelled because the task is being executed.
  */
  static readonly RUNNING: CancelledState;
  /**
   * The task is not a repeating task, and could not be cancelled because the task has already finished execution.
  */
  static readonly ALREADY_EXECUTED: CancelledState;
  /**
   * The caller thread successfully stopped future executions of a repeating task, but the task is currently
   * being executed.
  */
  static readonly NEXT_RUNS_CANCELLED: CancelledState;
  /**
   * The repeating task's future executions are cancelled already, but the task is currently
   * being executed.
  */
  static readonly NEXT_RUNS_CANCELLED_ALREADY: CancelledState;
  static valueOf(name: string): CancelledState;
  static values(): CancelledState[];
}
/**
 * Represents the current execution state of the task.
*/
export class ExecutionState extends Enum<ExecutionState> {
  /**
   * The task is currently not executing, but may begin execution in the future.
  */
  static readonly IDLE: ExecutionState;
  /**
   * The task is currently executing.
  */
  static readonly RUNNING: ExecutionState;
  /**
   * The task is not repeating, and the task finished executing.
  */
  static readonly FINISHED: ExecutionState;
  /**
   * The task is not executing and will not begin execution in the future. If this task is not repeating, then
   * this task was never executed.
  */
  static readonly CANCELLED: ExecutionState;
  /**
   * The task is repeating and currently executing, but future executions are cancelled and will not occur.
  */
  static readonly CANCELLED_RUNNING: ExecutionState;
  static valueOf(name: string): ExecutionState;
  static values(): ExecutionState[];
}

}
declare module 'io.papermc.paper.datacomponent.item.PotionContents' {
import { PotionEffect, PotionType } from 'org.bukkit.potion';
import { List } from 'java.util';
import { PotionContents } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { Color } from 'org.bukkit';
export class Builder extends DataComponentBuilder<PotionContents> {
  /**
   * Sets the potion type for this builder.
   *
   * @param type builder
   * @return the builder for chaining
   * @see #potion()
  */
  potion(type: PotionType | null): Builder;
  /**
   * Sets the color override for this builder.
   *
   * @param color color
   * @return the builder for chaining
   * @apiNote alpha channel of the color is supported only for Tipped Arrow
   * @see #customColor()
  */
  customColor(color: Color | null): Builder;
  /**
   * Sets the suffix to the translation key of the potion item.
   *
   * @param name name
   * @return the builder for chaining
   * @see #customName()
  */
  customName(name: string | null): Builder;
  /**
   * Adds a custom effect instance to this builder.
   *
   * @param effect effect
   * @return the builder for chaining
   * @see #customEffects()
  */
  addCustomEffect(effect: PotionEffect): Builder;
  /**
   * Adds custom effect instances to this builder.
   *
   * @param effects effects
   * @return the builder for chaining
   * @see #customEffects()
  */
  addCustomEffects(effects: PotionEffect[]): Builder;
}

}
declare module 'io.papermc.paper.registry.keys.tags' {
import { Structure } from 'org.bukkit.generator.structure';
import { Key } from 'net.kyori.adventure.key';
import { DamageType } from 'org.bukkit.damage';
import { PatternType } from 'org.bukkit.block.banner';
import { Biome, BlockType } from 'org.bukkit.block';
import { Enchantment } from 'org.bukkit.enchantments';
import { Type } from 'org.bukkit.entity.Cat';
import { TagKey } from 'io.papermc.paper.registry.tag';
import { ItemType } from 'org.bukkit.inventory';
import { EntityType } from 'org.bukkit.entity';
import { Art, Fluid, GameEvent, MusicInstrument } from 'org.bukkit';
/**
 * Vanilla keys for {@link RegistryKey#BLOCK}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BlockTypeTagKeys {
  /**
   * `#minecraft:acacia_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AIR: TagKey<BlockType>;
  /**
   * `#minecraft:all_hanging_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALL_HANGING_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:all_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALL_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:ancient_city_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANCIENT_CITY_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:animals_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANIMALS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANVIL: TagKey<BlockType>;
  /**
   * `#minecraft:armadillo_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMADILLO_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:axolotls_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTLS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:azalea_grows_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA_GROWS_ON: TagKey<BlockType>;
  /**
   * `#minecraft:azalea_root_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA_ROOT_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:badlands_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BADLANDS_TERRACOTTA: TagKey<BlockType>;
  /**
   * `#minecraft:bamboo_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:bamboo_plantable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_PLANTABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:banners`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNERS: TagKey<BlockType>;
  /**
   * `#minecraft:base_stone_nether`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASE_STONE_NETHER: TagKey<BlockType>;
  /**
   * `#minecraft:base_stone_overworld`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASE_STONE_OVERWORLD: TagKey<BlockType>;
  /**
   * `#minecraft:bats_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BATS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:beacon_base_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACON_BASE_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:beds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEDS: TagKey<BlockType>;
  /**
   * `#minecraft:bee_attractive`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_ATTRACTIVE: TagKey<BlockType>;
  /**
   * `#minecraft:bee_growables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_GROWABLES: TagKey<BlockType>;
  /**
   * `#minecraft:beehives`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEEHIVES: TagKey<BlockType>;
  /**
   * `#minecraft:big_dripleaf_placeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIG_DRIPLEAF_PLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:birch_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:blocks_wind_charge_explosions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCKS_WIND_CHARGE_EXPLOSIONS: TagKey<BlockType>;
  /**
   * `#minecraft:buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUTTONS: TagKey<BlockType>;
  /**
   * `#minecraft:camel_sand_step_sound_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMEL_SAND_STEP_SOUND_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:campfires`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMPFIRES: TagKey<BlockType>;
  /**
   * `#minecraft:candle_cakes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLE_CAKES: TagKey<BlockType>;
  /**
   * `#minecraft:candles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLES: TagKey<BlockType>;
  /**
   * `#minecraft:cauldrons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAULDRONS: TagKey<BlockType>;
  /**
   * `#minecraft:cave_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVE_VINES: TagKey<BlockType>;
  /**
   * `#minecraft:ceiling_hanging_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CEILING_HANGING_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:cherry_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:climbable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLIMBABLE: TagKey<BlockType>;
  /**
   * `#minecraft:coal_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:combination_step_sound_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMBINATION_STEP_SOUND_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:completes_find_tree_tutorial`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPLETES_FIND_TREE_TUTORIAL: TagKey<BlockType>;
  /**
   * `#minecraft:concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONCRETE_POWDER: TagKey<BlockType>;
  /**
   * `#minecraft:convertable_to_mud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONVERTABLE_TO_MUD: TagKey<BlockType>;
  /**
   * `#minecraft:copper_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:coral_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CORAL_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:coral_plants`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CORAL_PLANTS: TagKey<BlockType>;
  /**
   * `#minecraft:corals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CORALS: TagKey<BlockType>;
  /**
   * `#minecraft:crimson_stems`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STEMS: TagKey<BlockType>;
  /**
   * `#minecraft:crops`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CROPS: TagKey<BlockType>;
  /**
   * `#minecraft:crystal_sound_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRYSTAL_SOUND_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:dampens_vibrations`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAMPENS_VIBRATIONS: TagKey<BlockType>;
  /**
   * `#minecraft:dark_oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:dead_bush_may_place_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUSH_MAY_PLACE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:deepslate_ore_replaceables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_ORE_REPLACEABLES: TagKey<BlockType>;
  /**
   * `#minecraft:diamond_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT: TagKey<BlockType>;
  /**
   * `#minecraft:does_not_block_hoppers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOES_NOT_BLOCK_HOPPERS: TagKey<BlockType>;
  /**
   * `#minecraft:doors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOORS: TagKey<BlockType>;
  /**
   * `#minecraft:dragon_immune`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_IMMUNE: TagKey<BlockType>;
  /**
   * `#minecraft:dragon_transparent`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_TRANSPARENT: TagKey<BlockType>;
  /**
   * `#minecraft:dripstone_replaceable_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIPSTONE_REPLACEABLE_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:emerald_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:enchantment_power_provider`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTMENT_POWER_PROVIDER: TagKey<BlockType>;
  /**
   * `#minecraft:enchantment_power_transmitter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTMENT_POWER_TRANSMITTER: TagKey<BlockType>;
  /**
   * `#minecraft:enderman_holdable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDERMAN_HOLDABLE: TagKey<BlockType>;
  /**
   * `#minecraft:fall_damage_resetting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALL_DAMAGE_RESETTING: TagKey<BlockType>;
  /**
   * `#minecraft:features_cannot_replace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FEATURES_CANNOT_REPLACE: TagKey<BlockType>;
  /**
   * `#minecraft:fence_gates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FENCE_GATES: TagKey<BlockType>;
  /**
   * `#minecraft:fences`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FENCES: TagKey<BlockType>;
  /**
   * `#minecraft:fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE: TagKey<BlockType>;
  /**
   * `#minecraft:flower_pots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER_POTS: TagKey<BlockType>;
  /**
   * `#minecraft:flowers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWERS: TagKey<BlockType>;
  /**
   * `#minecraft:foxes_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOXES_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:frog_prefer_jump_to`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROG_PREFER_JUMP_TO: TagKey<BlockType>;
  /**
   * `#minecraft:frogs_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROGS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:geode_invalid_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GEODE_INVALID_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:goats_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOATS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:gold_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:guarded_by_piglins`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUARDED_BY_PIGLINS: TagKey<BlockType>;
  /**
   * `#minecraft:hoglin_repellents`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOGLIN_REPELLENTS: TagKey<BlockType>;
  /**
   * `#minecraft:ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ICE: TagKey<BlockType>;
  /**
   * `#minecraft:impermeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IMPERMEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_diamond_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_DIAMOND_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_gold_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_GOLD_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_iron_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_IRON_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_netherite_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_NETHERITE_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_stone_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_STONE_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:incorrect_for_wooden_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCORRECT_FOR_WOODEN_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:infiniburn_end`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFINIBURN_END: TagKey<BlockType>;
  /**
   * `#minecraft:infiniburn_nether`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFINIBURN_NETHER: TagKey<BlockType>;
  /**
   * `#minecraft:infiniburn_overworld`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFINIBURN_OVERWORLD: TagKey<BlockType>;
  /**
   * `#minecraft:inside_step_sound_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INSIDE_STEP_SOUND_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:invalid_spawn_inside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INVALID_SPAWN_INSIDE: TagKey<BlockType>;
  /**
   * `#minecraft:iron_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:jungle_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:lapis_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:lava_pool_stone_cannot_replace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA_POOL_STONE_CANNOT_REPLACE: TagKey<BlockType>;
  /**
   * `#minecraft:leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEAVES: TagKey<BlockType>;
  /**
   * `#minecraft:logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:logs_that_burn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOGS_THAT_BURN: TagKey<BlockType>;
  /**
   * `#minecraft:lush_ground_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUSH_GROUND_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:maintains_farmland`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAINTAINS_FARMLAND: TagKey<BlockType>;
  /**
   * `#minecraft:mangrove_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:mangrove_logs_can_grow_through`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LOGS_CAN_GROW_THROUGH: TagKey<BlockType>;
  /**
   * `#minecraft:mangrove_roots_can_grow_through`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_ROOTS_CAN_GROW_THROUGH: TagKey<BlockType>;
  /**
   * `#minecraft:mineable/axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINEABLE_AXE: TagKey<BlockType>;
  /**
   * `#minecraft:mineable/hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINEABLE_HOE: TagKey<BlockType>;
  /**
   * `#minecraft:mineable/pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINEABLE_PICKAXE: TagKey<BlockType>;
  /**
   * `#minecraft:mineable/shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINEABLE_SHOVEL: TagKey<BlockType>;
  /**
   * `#minecraft:mob_interactable_doors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOB_INTERACTABLE_DOORS: TagKey<BlockType>;
  /**
   * `#minecraft:mooshrooms_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOOSHROOMS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:moss_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSS_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:mushroom_grow_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSHROOM_GROW_BLOCK: TagKey<BlockType>;
  /**
   * `#minecraft:needs_diamond_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NEEDS_DIAMOND_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:needs_iron_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NEEDS_IRON_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:needs_stone_tool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NEEDS_STONE_TOOL: TagKey<BlockType>;
  /**
   * `#minecraft:nether_carver_replaceables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_CARVER_REPLACEABLES: TagKey<BlockType>;
  /**
   * `#minecraft:nylium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NYLIUM: TagKey<BlockType>;
  /**
   * `#minecraft:oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:occludes_vibration_signals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCCLUDES_VIBRATION_SIGNALS: TagKey<BlockType>;
  /**
   * `#minecraft:overworld_carver_replaceables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OVERWORLD_CARVER_REPLACEABLES: TagKey<BlockType>;
  /**
   * `#minecraft:overworld_natural_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OVERWORLD_NATURAL_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:pale_oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:parrots_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PARROTS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:piglin_repellents`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_REPELLENTS: TagKey<BlockType>;
  /**
   * `#minecraft:planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLANKS: TagKey<BlockType>;
  /**
   * `#minecraft:polar_bears_spawnable_on_alternate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLAR_BEARS_SPAWNABLE_ON_ALTERNATE: TagKey<BlockType>;
  /**
   * `#minecraft:portals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PORTALS: TagKey<BlockType>;
  /**
   * `#minecraft:pressure_plates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRESSURE_PLATES: TagKey<BlockType>;
  /**
   * `#minecraft:prevent_mob_spawning_inside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PREVENT_MOB_SPAWNING_INSIDE: TagKey<BlockType>;
  /**
   * `#minecraft:rabbits_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBITS_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:rails`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAILS: TagKey<BlockType>;
  /**
   * `#minecraft:redstone_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_ORES: TagKey<BlockType>;
  /**
   * `#minecraft:replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:replaceable_by_trees`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPLACEABLE_BY_TREES: TagKey<BlockType>;
  /**
   * `#minecraft:sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAND: TagKey<BlockType>;
  /**
   * `#minecraft:saplings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAPLINGS: TagKey<BlockType>;
  /**
   * `#minecraft:sculk_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:sculk_replaceable_world_gen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_REPLACEABLE_WORLD_GEN: TagKey<BlockType>;
  /**
   * `#minecraft:shulker_boxes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_BOXES: TagKey<BlockType>;
  /**
   * `#minecraft:signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:slabs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLABS: TagKey<BlockType>;
  /**
   * `#minecraft:small_dripleaf_placeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_DRIPLEAF_PLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:small_flowers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_FLOWERS: TagKey<BlockType>;
  /**
   * `#minecraft:smelts_to_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMELTS_TO_GLASS: TagKey<BlockType>;
  /**
   * `#minecraft:snaps_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNAPS_GOAT_HORN: TagKey<BlockType>;
  /**
   * `#minecraft:sniffer_diggable_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_DIGGABLE_BLOCK: TagKey<BlockType>;
  /**
   * `#minecraft:sniffer_egg_hatch_boost`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_EGG_HATCH_BOOST: TagKey<BlockType>;
  /**
   * `#minecraft:snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW: TagKey<BlockType>;
  /**
   * `#minecraft:snow_layer_can_survive_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_LAYER_CAN_SURVIVE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:snow_layer_cannot_survive_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_LAYER_CANNOT_SURVIVE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:soul_fire_base_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_FIRE_BASE_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:soul_speed_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SPEED_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:spruce_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LOGS: TagKey<BlockType>;
  /**
   * `#minecraft:stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STAIRS: TagKey<BlockType>;
  /**
   * `#minecraft:standing_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STANDING_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICKS: TagKey<BlockType>;
  /**
   * `#minecraft:stone_buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BUTTONS: TagKey<BlockType>;
  /**
   * `#minecraft:stone_ore_replaceables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_ORE_REPLACEABLES: TagKey<BlockType>;
  /**
   * `#minecraft:stone_pressure_plates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_PRESSURE_PLATES: TagKey<BlockType>;
  /**
   * `#minecraft:strider_warm_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIDER_WARM_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:sword_efficient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWORD_EFFICIENT: TagKey<BlockType>;
  /**
   * `#minecraft:terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TERRACOTTA: TagKey<BlockType>;
  /**
   * `#minecraft:trail_ruins_replaceable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAIL_RUINS_REPLACEABLE: TagKey<BlockType>;
  /**
   * `#minecraft:trapdoors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAPDOORS: TagKey<BlockType>;
  /**
   * `#minecraft:underwater_bonemeals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNDERWATER_BONEMEALS: TagKey<BlockType>;
  /**
   * `#minecraft:unstable_bottom_center`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNSTABLE_BOTTOM_CENTER: TagKey<BlockType>;
  /**
   * `#minecraft:valid_spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VALID_SPAWN: TagKey<BlockType>;
  /**
   * `#minecraft:vibration_resonators`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VIBRATION_RESONATORS: TagKey<BlockType>;
  /**
   * `#minecraft:wall_corals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALL_CORALS: TagKey<BlockType>;
  /**
   * `#minecraft:wall_hanging_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALL_HANGING_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:wall_post_override`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALL_POST_OVERRIDE: TagKey<BlockType>;
  /**
   * `#minecraft:wall_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALL_SIGNS: TagKey<BlockType>;
  /**
   * `#minecraft:walls`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALLS: TagKey<BlockType>;
  /**
   * `#minecraft:warped_stems`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STEMS: TagKey<BlockType>;
  /**
   * `#minecraft:wart_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WART_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:wither_immune`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_IMMUNE: TagKey<BlockType>;
  /**
   * `#minecraft:wither_summon_base_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SUMMON_BASE_BLOCKS: TagKey<BlockType>;
  /**
   * `#minecraft:wolves_spawnable_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOLVES_SPAWNABLE_ON: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_BUTTONS: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_doors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_DOORS: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_fences`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_FENCES: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_pressure_plates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_PRESSURE_PLATES: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_slabs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_SLABS: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_STAIRS: TagKey<BlockType>;
  /**
   * `#minecraft:wooden_trapdoors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_TRAPDOORS: TagKey<BlockType>;
  /**
   * `#minecraft:wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOOL: TagKey<BlockType>;
  /**
   * `#minecraft:wool_carpets`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOOL_CARPETS: TagKey<BlockType>;
  /**
   * Creates a tag key for {@link BlockType} in the registry `minecraft:block`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<BlockType>;
}
/**
 * Vanilla keys for {@link RegistryKey#FLUID}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class FluidTagKeys {
  /**
   * `#minecraft:lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA: TagKey<Fluid>;
  /**
   * `#minecraft:water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER: TagKey<Fluid>;
  /**
   * Creates a tag key for {@link Fluid} in the registry `minecraft:fluid`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Fluid>;
}
/**
 * Vanilla keys for {@link RegistryKey#ENTITY_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class EntityTypeTagKeys {
  /**
   * `#minecraft:aquatic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AQUATIC: TagKey<EntityType>;
  /**
   * `#minecraft:arrows`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARROWS: TagKey<EntityType>;
  /**
   * `#minecraft:arthropod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARTHROPOD: TagKey<EntityType>;
  /**
   * `#minecraft:axolotl_always_hostiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTL_ALWAYS_HOSTILES: TagKey<EntityType>;
  /**
   * `#minecraft:axolotl_hunt_targets`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTL_HUNT_TARGETS: TagKey<EntityType>;
  /**
   * `#minecraft:beehive_inhabitors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEEHIVE_INHABITORS: TagKey<EntityType>;
  /**
   * `#minecraft:boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOAT: TagKey<EntityType>;
  /**
   * `#minecraft:can_breathe_under_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAN_BREATHE_UNDER_WATER: TagKey<EntityType>;
  /**
   * `#minecraft:can_turn_in_boats`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAN_TURN_IN_BOATS: TagKey<EntityType>;
  /**
   * `#minecraft:deflects_projectiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEFLECTS_PROJECTILES: TagKey<EntityType>;
  /**
   * `#minecraft:dismounts_underwater`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DISMOUNTS_UNDERWATER: TagKey<EntityType>;
  /**
   * `#minecraft:fall_damage_immune`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALL_DAMAGE_IMMUNE: TagKey<EntityType>;
  /**
   * `#minecraft:freeze_hurts_extra_types`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FREEZE_HURTS_EXTRA_TYPES: TagKey<EntityType>;
  /**
   * `#minecraft:freeze_immune_entity_types`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FREEZE_IMMUNE_ENTITY_TYPES: TagKey<EntityType>;
  /**
   * `#minecraft:frog_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROG_FOOD: TagKey<EntityType>;
  /**
   * `#minecraft:ignores_poison_and_regen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGNORES_POISON_AND_REGEN: TagKey<EntityType>;
  /**
   * `#minecraft:illager`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ILLAGER: TagKey<EntityType>;
  /**
   * `#minecraft:illager_friends`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ILLAGER_FRIENDS: TagKey<EntityType>;
  /**
   * `#minecraft:immune_to_infested`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IMMUNE_TO_INFESTED: TagKey<EntityType>;
  /**
   * `#minecraft:immune_to_oozing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IMMUNE_TO_OOZING: TagKey<EntityType>;
  /**
   * `#minecraft:impact_projectiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IMPACT_PROJECTILES: TagKey<EntityType>;
  /**
   * `#minecraft:inverted_healing_and_harm`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INVERTED_HEALING_AND_HARM: TagKey<EntityType>;
  /**
   * `#minecraft:no_anger_from_wind_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NO_ANGER_FROM_WIND_CHARGE: TagKey<EntityType>;
  /**
   * `#minecraft:non_controlling_rider`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NON_CONTROLLING_RIDER: TagKey<EntityType>;
  /**
   * `#minecraft:not_scary_for_pufferfish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NOT_SCARY_FOR_PUFFERFISH: TagKey<EntityType>;
  /**
   * `#minecraft:powder_snow_walkable_mobs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWDER_SNOW_WALKABLE_MOBS: TagKey<EntityType>;
  /**
   * `#minecraft:raiders`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAIDERS: TagKey<EntityType>;
  /**
   * `#minecraft:redirectable_projectile`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDIRECTABLE_PROJECTILE: TagKey<EntityType>;
  /**
   * `#minecraft:sensitive_to_bane_of_arthropods`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SENSITIVE_TO_BANE_OF_ARTHROPODS: TagKey<EntityType>;
  /**
   * `#minecraft:sensitive_to_impaling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SENSITIVE_TO_IMPALING: TagKey<EntityType>;
  /**
   * `#minecraft:sensitive_to_smite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SENSITIVE_TO_SMITE: TagKey<EntityType>;
  /**
   * `#minecraft:skeletons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETONS: TagKey<EntityType>;
  /**
   * `#minecraft:undead`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNDEAD: TagKey<EntityType>;
  /**
   * `#minecraft:wither_friends`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_FRIENDS: TagKey<EntityType>;
  /**
   * `#minecraft:zombies`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIES: TagKey<EntityType>;
  /**
   * Creates a tag key for {@link EntityType} in the registry `minecraft:entity_type`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<EntityType>;
}
/**
 * Vanilla keys for {@link RegistryKey#ITEM}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class ItemTypeTagKeys {
  /**
   * `#minecraft:acacia_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANVIL: TagKey<ItemType>;
  /**
   * `#minecraft:armadillo_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMADILLO_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:arrows`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARROWS: TagKey<ItemType>;
  /**
   * `#minecraft:axes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXES: TagKey<ItemType>;
  /**
   * `#minecraft:axolotl_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTL_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:bamboo_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BLOCKS: TagKey<ItemType>;
  /**
   * `#minecraft:banners`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNERS: TagKey<ItemType>;
  /**
   * `#minecraft:beacon_payment_items`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACON_PAYMENT_ITEMS: TagKey<ItemType>;
  /**
   * `#minecraft:beds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEDS: TagKey<ItemType>;
  /**
   * `#minecraft:bee_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:birch_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:boats`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOATS: TagKey<ItemType>;
  /**
   * `#minecraft:bookshelf_books`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOOKSHELF_BOOKS: TagKey<ItemType>;
  /**
   * `#minecraft:breaks_decorated_pots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREAKS_DECORATED_POTS: TagKey<ItemType>;
  /**
   * `#minecraft:brewing_fuel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREWING_FUEL: TagKey<ItemType>;
  /**
   * `#minecraft:bundles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUNDLES: TagKey<ItemType>;
  /**
   * `#minecraft:buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUTTONS: TagKey<ItemType>;
  /**
   * `#minecraft:camel_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMEL_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:candles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLES: TagKey<ItemType>;
  /**
   * `#minecraft:cat_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAT_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:cherry_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:chest_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHEST_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:chest_boats`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHEST_BOATS: TagKey<ItemType>;
  /**
   * `#minecraft:chicken_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHICKEN_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:cluster_max_harvestables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLUSTER_MAX_HARVESTABLES: TagKey<ItemType>;
  /**
   * `#minecraft:coal_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:coals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COALS: TagKey<ItemType>;
  /**
   * `#minecraft:compasses`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPASSES: TagKey<ItemType>;
  /**
   * `#minecraft:completes_find_tree_tutorial`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPLETES_FIND_TREE_TUTORIAL: TagKey<ItemType>;
  /**
   * `#minecraft:copper_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:cow_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COW_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:creeper_drop_music_discs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_DROP_MUSIC_DISCS: TagKey<ItemType>;
  /**
   * `#minecraft:creeper_igniters`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_IGNITERS: TagKey<ItemType>;
  /**
   * `#minecraft:crimson_stems`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STEMS: TagKey<ItemType>;
  /**
   * `#minecraft:dampens_vibrations`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAMPENS_VIBRATIONS: TagKey<ItemType>;
  /**
   * `#minecraft:dark_oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:decorated_pot_ingredients`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DECORATED_POT_INGREDIENTS: TagKey<ItemType>;
  /**
   * `#minecraft:decorated_pot_sherds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DECORATED_POT_SHERDS: TagKey<ItemType>;
  /**
   * `#minecraft:diamond_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:diamond_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT: TagKey<ItemType>;
  /**
   * `#minecraft:doors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOORS: TagKey<ItemType>;
  /**
   * `#minecraft:drowned_preferred_weapons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DROWNED_PREFERRED_WEAPONS: TagKey<ItemType>;
  /**
   * `#minecraft:duplicates_allays`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DUPLICATES_ALLAYS: TagKey<ItemType>;
  /**
   * `#minecraft:dyeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DYEABLE: TagKey<ItemType>;
  /**
   * `#minecraft:emerald_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/bow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_BOW: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/chest_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_CHEST_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/crossbow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_CROSSBOW: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/durability`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_DURABILITY: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/equippable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_EQUIPPABLE: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/fire_aspect`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_FIRE_ASPECT: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/fishing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_FISHING: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/foot_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_FOOT_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/head_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_HEAD_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/leg_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_LEG_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/mace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_MACE: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/mining`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_MINING: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/mining_loot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_MINING_LOOT: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/sharp_weapon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_SHARP_WEAPON: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_SWORD: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/trident`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_TRIDENT: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/vanishing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_VANISHING: TagKey<ItemType>;
  /**
   * `#minecraft:enchantable/weapon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTABLE_WEAPON: TagKey<ItemType>;
  /**
   * `#minecraft:fence_gates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FENCE_GATES: TagKey<ItemType>;
  /**
   * `#minecraft:fences`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FENCES: TagKey<ItemType>;
  /**
   * `#minecraft:fishes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FISHES: TagKey<ItemType>;
  /**
   * `#minecraft:foot_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOOT_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:fox_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOX_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:freeze_immune_wearables`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FREEZE_IMMUNE_WEARABLES: TagKey<ItemType>;
  /**
   * `#minecraft:frog_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROG_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:furnace_minecart_fuel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FURNACE_MINECART_FUEL: TagKey<ItemType>;
  /**
   * `#minecraft:gaze_disguise_equipment`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GAZE_DISGUISE_EQUIPMENT: TagKey<ItemType>;
  /**
   * `#minecraft:goat_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOAT_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:gold_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:gold_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:hanging_signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HANGING_SIGNS: TagKey<ItemType>;
  /**
   * `#minecraft:head_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEAD_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:hoes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOES: TagKey<ItemType>;
  /**
   * `#minecraft:hoglin_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOGLIN_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:horse_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORSE_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:horse_tempt_items`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORSE_TEMPT_ITEMS: TagKey<ItemType>;
  /**
   * `#minecraft:ignored_by_piglin_babies`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGNORED_BY_PIGLIN_BABIES: TagKey<ItemType>;
  /**
   * `#minecraft:iron_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:iron_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:jungle_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:lapis_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEAVES: TagKey<ItemType>;
  /**
   * `#minecraft:lectern_books`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LECTERN_BOOKS: TagKey<ItemType>;
  /**
   * `#minecraft:leg_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEG_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:llama_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LLAMA_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:llama_tempt_items`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LLAMA_TEMPT_ITEMS: TagKey<ItemType>;
  /**
   * `#minecraft:logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:logs_that_burn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOGS_THAT_BURN: TagKey<ItemType>;
  /**
   * `#minecraft:mangrove_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:map_invisibility_equipment`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAP_INVISIBILITY_EQUIPMENT: TagKey<ItemType>;
  /**
   * `#minecraft:meat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MEAT: TagKey<ItemType>;
  /**
   * `#minecraft:netherite_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:non_flammable_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NON_FLAMMABLE_WOOD: TagKey<ItemType>;
  /**
   * `#minecraft:noteblock_top_instruments`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NOTEBLOCK_TOP_INSTRUMENTS: TagKey<ItemType>;
  /**
   * `#minecraft:oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:ocelot_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCELOT_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:pale_oak_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:panda_eats_from_ground`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PANDA_EATS_FROM_GROUND: TagKey<ItemType>;
  /**
   * `#minecraft:panda_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PANDA_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:parrot_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PARROT_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:parrot_poisonous_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PARROT_POISONOUS_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:pickaxes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PICKAXES: TagKey<ItemType>;
  /**
   * `#minecraft:pig_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIG_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:piglin_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:piglin_loved`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_LOVED: TagKey<ItemType>;
  /**
   * `#minecraft:piglin_preferred_weapons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_PREFERRED_WEAPONS: TagKey<ItemType>;
  /**
   * `#minecraft:piglin_repellents`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_REPELLENTS: TagKey<ItemType>;
  /**
   * `#minecraft:piglin_safe_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_SAFE_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:pillager_preferred_weapons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PILLAGER_PREFERRED_WEAPONS: TagKey<ItemType>;
  /**
   * `#minecraft:planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLANKS: TagKey<ItemType>;
  /**
   * `#minecraft:rabbit_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:rails`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAILS: TagKey<ItemType>;
  /**
   * `#minecraft:redstone_ores`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_ORES: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_chain_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_CHAIN_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_diamond_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_DIAMOND_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_gold_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_GOLD_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_iron_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_IRON_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_leather_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_LEATHER_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_netherite_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_NETHERITE_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_turtle_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_TURTLE_HELMET: TagKey<ItemType>;
  /**
   * `#minecraft:repairs_wolf_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPAIRS_WOLF_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAND: TagKey<ItemType>;
  /**
   * `#minecraft:saplings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAPLINGS: TagKey<ItemType>;
  /**
   * `#minecraft:sheep_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEEP_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:shovels`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHOVELS: TagKey<ItemType>;
  /**
   * `#minecraft:shulker_boxes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_BOXES: TagKey<ItemType>;
  /**
   * `#minecraft:signs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SIGNS: TagKey<ItemType>;
  /**
   * `#minecraft:skeleton_preferred_weapons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_PREFERRED_WEAPONS: TagKey<ItemType>;
  /**
   * `#minecraft:skulls`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKULLS: TagKey<ItemType>;
  /**
   * `#minecraft:slabs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLABS: TagKey<ItemType>;
  /**
   * `#minecraft:small_flowers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_FLOWERS: TagKey<ItemType>;
  /**
   * `#minecraft:smelts_to_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMELTS_TO_GLASS: TagKey<ItemType>;
  /**
   * `#minecraft:sniffer_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:soul_fire_base_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_FIRE_BASE_BLOCKS: TagKey<ItemType>;
  /**
   * `#minecraft:spruce_logs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LOGS: TagKey<ItemType>;
  /**
   * `#minecraft:stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STAIRS: TagKey<ItemType>;
  /**
   * `#minecraft:stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICKS: TagKey<ItemType>;
  /**
   * `#minecraft:stone_buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BUTTONS: TagKey<ItemType>;
  /**
   * `#minecraft:stone_crafting_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_CRAFTING_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:stone_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:strider_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIDER_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:strider_tempt_items`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIDER_TEMPT_ITEMS: TagKey<ItemType>;
  /**
   * `#minecraft:swords`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWORDS: TagKey<ItemType>;
  /**
   * `#minecraft:terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TERRACOTTA: TagKey<ItemType>;
  /**
   * `#minecraft:trapdoors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAPDOORS: TagKey<ItemType>;
  /**
   * `#minecraft:trim_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIM_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:trimmable_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIMMABLE_ARMOR: TagKey<ItemType>;
  /**
   * `#minecraft:turtle_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:villager_picks_up`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGER_PICKS_UP: TagKey<ItemType>;
  /**
   * `#minecraft:villager_plantable_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGER_PLANTABLE_SEEDS: TagKey<ItemType>;
  /**
   * `#minecraft:walls`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALLS: TagKey<ItemType>;
  /**
   * `#minecraft:warped_stems`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STEMS: TagKey<ItemType>;
  /**
   * `#minecraft:wart_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WART_BLOCKS: TagKey<ItemType>;
  /**
   * `#minecraft:wither_skeleton_disliked_weapons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKELETON_DISLIKED_WEAPONS: TagKey<ItemType>;
  /**
   * `#minecraft:wolf_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOLF_FOOD: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_buttons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_BUTTONS: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_doors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_DOORS: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_fences`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_FENCES: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_pressure_plates`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_PRESSURE_PLATES: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_slabs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_SLABS: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_STAIRS: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_tool_materials`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_TOOL_MATERIALS: TagKey<ItemType>;
  /**
   * `#minecraft:wooden_trapdoors`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_TRAPDOORS: TagKey<ItemType>;
  /**
   * `#minecraft:wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOOL: TagKey<ItemType>;
  /**
   * `#minecraft:wool_carpets`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOOL_CARPETS: TagKey<ItemType>;
  /**
   * Creates a tag key for {@link ItemType} in the registry `minecraft:item`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<ItemType>;
}
/**
 * Vanilla keys for {@link RegistryKey#STRUCTURE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class StructureTagKeys {
  /**
   * `#minecraft:cats_spawn_as_black`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CATS_SPAWN_AS_BLACK: TagKey<Structure>;
  /**
   * `#minecraft:cats_spawn_in`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CATS_SPAWN_IN: TagKey<Structure>;
  /**
   * `#minecraft:dolphin_located`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOLPHIN_LOCATED: TagKey<Structure>;
  /**
   * `#minecraft:eye_of_ender_located`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EYE_OF_ENDER_LOCATED: TagKey<Structure>;
  /**
   * `#minecraft:mineshaft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINESHAFT: TagKey<Structure>;
  /**
   * `#minecraft:ocean_ruin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN_RUIN: TagKey<Structure>;
  /**
   * `#minecraft:on_desert_village_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_DESERT_VILLAGE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_jungle_explorer_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_JUNGLE_EXPLORER_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_ocean_explorer_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_OCEAN_EXPLORER_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_plains_village_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_PLAINS_VILLAGE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_savanna_village_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_SAVANNA_VILLAGE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_snowy_village_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_SNOWY_VILLAGE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_swamp_explorer_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_SWAMP_EXPLORER_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_taiga_village_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_TAIGA_VILLAGE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_treasure_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_TREASURE_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_trial_chambers_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_TRIAL_CHAMBERS_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:on_woodland_explorer_maps`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_WOODLAND_EXPLORER_MAPS: TagKey<Structure>;
  /**
   * `#minecraft:ruined_portal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL: TagKey<Structure>;
  /**
   * `#minecraft:shipwreck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHIPWRECK: TagKey<Structure>;
  /**
   * `#minecraft:village`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE: TagKey<Structure>;
  /**
   * Creates a tag key for {@link Structure} in the registry `minecraft:worldgen/structure`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Structure>;
}
/**
 * Vanilla keys for {@link RegistryKey#INSTRUMENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class InstrumentTagKeys {
  /**
   * `#minecraft:goat_horns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOAT_HORNS: TagKey<MusicInstrument>;
  /**
   * `#minecraft:regular_goat_horns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REGULAR_GOAT_HORNS: TagKey<MusicInstrument>;
  /**
   * `#minecraft:screaming_goat_horns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCREAMING_GOAT_HORNS: TagKey<MusicInstrument>;
  /**
   * Creates a tag key for {@link MusicInstrument} in the registry `minecraft:instrument`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<MusicInstrument>;
}
/**
 * Vanilla keys for {@link RegistryKey#ENCHANTMENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class EnchantmentTagKeys {
  /**
   * `#minecraft:curse`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CURSE: TagKey<Enchantment>;
  /**
   * `#minecraft:double_trade_price`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOUBLE_TRADE_PRICE: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_ARMOR: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_BOOTS: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/bow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_BOW: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/crossbow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_CROSSBOW: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_DAMAGE: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/mining`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_MINING: TagKey<Enchantment>;
  /**
   * `#minecraft:exclusive_set/riptide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXCLUSIVE_SET_RIPTIDE: TagKey<Enchantment>;
  /**
   * `#minecraft:in_enchanting_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IN_ENCHANTING_TABLE: TagKey<Enchantment>;
  /**
   * `#minecraft:non_treasure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NON_TREASURE: TagKey<Enchantment>;
  /**
   * `#minecraft:on_mob_spawn_equipment`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_MOB_SPAWN_EQUIPMENT: TagKey<Enchantment>;
  /**
   * `#minecraft:on_random_loot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_RANDOM_LOOT: TagKey<Enchantment>;
  /**
   * `#minecraft:on_traded_equipment`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_TRADED_EQUIPMENT: TagKey<Enchantment>;
  /**
   * `#minecraft:prevents_bee_spawns_when_mining`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PREVENTS_BEE_SPAWNS_WHEN_MINING: TagKey<Enchantment>;
  /**
   * `#minecraft:prevents_decorated_pot_shattering`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PREVENTS_DECORATED_POT_SHATTERING: TagKey<Enchantment>;
  /**
   * `#minecraft:prevents_ice_melting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PREVENTS_ICE_MELTING: TagKey<Enchantment>;
  /**
   * `#minecraft:prevents_infested_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PREVENTS_INFESTED_SPAWNS: TagKey<Enchantment>;
  /**
   * `#minecraft:smelts_loot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMELTS_LOOT: TagKey<Enchantment>;
  /**
   * `#minecraft:tooltip_order`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TOOLTIP_ORDER: TagKey<Enchantment>;
  /**
   * `#minecraft:tradeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADEABLE: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/desert_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_DESERT_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/desert_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_DESERT_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/jungle_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_JUNGLE_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/jungle_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_JUNGLE_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/plains_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_PLAINS_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/plains_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_PLAINS_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/savanna_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SAVANNA_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/savanna_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SAVANNA_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/snow_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SNOW_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/snow_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SNOW_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/swamp_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SWAMP_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/swamp_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_SWAMP_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/taiga_common`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_TAIGA_COMMON: TagKey<Enchantment>;
  /**
   * `#minecraft:trades/taiga_special`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADES_TAIGA_SPECIAL: TagKey<Enchantment>;
  /**
   * `#minecraft:treasure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TREASURE: TagKey<Enchantment>;
  /**
   * Creates a tag key for {@link Enchantment} in the registry `minecraft:enchantment`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Enchantment>;
}
/**
 * Vanilla keys for {@link RegistryKey#BIOME}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BiomeTagKeys {
  /**
   * `#minecraft:allows_surface_slime_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLOWS_SURFACE_SLIME_SPAWNS: TagKey<Biome>;
  /**
   * `#minecraft:allows_tropical_fish_spawns_at_any_height`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLOWS_TROPICAL_FISH_SPAWNS_AT_ANY_HEIGHT: TagKey<Biome>;
  /**
   * `#minecraft:has_closer_water_fog`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_CLOSER_WATER_FOG: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ancient_city`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_ANCIENT_CITY: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/bastion_remnant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_BASTION_REMNANT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/buried_treasure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_BURIED_TREASURE: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/desert_pyramid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_DESERT_PYRAMID: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/end_city`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_END_CITY: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/igloo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_IGLOO: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/jungle_temple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_JUNGLE_TEMPLE: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/mineshaft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_MINESHAFT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/mineshaft_mesa`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_MINESHAFT_MESA: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/nether_fortress`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_NETHER_FORTRESS: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/nether_fossil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_NETHER_FOSSIL: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ocean_monument`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_OCEAN_MONUMENT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ocean_ruin_cold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_OCEAN_RUIN_COLD: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ocean_ruin_warm`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_OCEAN_RUIN_WARM: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/pillager_outpost`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_PILLAGER_OUTPOST: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_DESERT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_JUNGLE: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_mountain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_MOUNTAIN: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_nether`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_NETHER: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_OCEAN: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_standard`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_STANDARD: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/ruined_portal_swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_RUINED_PORTAL_SWAMP: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/shipwreck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_SHIPWRECK: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/shipwreck_beached`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_SHIPWRECK_BEACHED: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/stronghold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_STRONGHOLD: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/swamp_hut`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_SWAMP_HUT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/trail_ruins`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_TRAIL_RUINS: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/trial_chambers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_TRIAL_CHAMBERS: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/village_desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_VILLAGE_DESERT: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/village_plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_VILLAGE_PLAINS: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/village_savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_VILLAGE_SAVANNA: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/village_snowy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_VILLAGE_SNOWY: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/village_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_VILLAGE_TAIGA: TagKey<Biome>;
  /**
   * `#minecraft:has_structure/woodland_mansion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAS_STRUCTURE_WOODLAND_MANSION: TagKey<Biome>;
  /**
   * `#minecraft:increased_fire_burnout`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INCREASED_FIRE_BURNOUT: TagKey<Biome>;
  /**
   * `#minecraft:is_badlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_BADLANDS: TagKey<Biome>;
  /**
   * `#minecraft:is_beach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_BEACH: TagKey<Biome>;
  /**
   * `#minecraft:is_deep_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_DEEP_OCEAN: TagKey<Biome>;
  /**
   * `#minecraft:is_end`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_END: TagKey<Biome>;
  /**
   * `#minecraft:is_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_FOREST: TagKey<Biome>;
  /**
   * `#minecraft:is_hill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_HILL: TagKey<Biome>;
  /**
   * `#minecraft:is_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_JUNGLE: TagKey<Biome>;
  /**
   * `#minecraft:is_mountain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_MOUNTAIN: TagKey<Biome>;
  /**
   * `#minecraft:is_nether`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_NETHER: TagKey<Biome>;
  /**
   * `#minecraft:is_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_OCEAN: TagKey<Biome>;
  /**
   * `#minecraft:is_overworld`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_OVERWORLD: TagKey<Biome>;
  /**
   * `#minecraft:is_river`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_RIVER: TagKey<Biome>;
  /**
   * `#minecraft:is_savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_SAVANNA: TagKey<Biome>;
  /**
   * `#minecraft:is_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_TAIGA: TagKey<Biome>;
  /**
   * `#minecraft:mineshaft_blocking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINESHAFT_BLOCKING: TagKey<Biome>;
  /**
   * `#minecraft:more_frequent_drowned_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MORE_FREQUENT_DROWNED_SPAWNS: TagKey<Biome>;
  /**
   * `#minecraft:plays_underwater_music`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYS_UNDERWATER_MUSIC: TagKey<Biome>;
  /**
   * `#minecraft:polar_bears_spawn_on_alternate_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLAR_BEARS_SPAWN_ON_ALTERNATE_BLOCKS: TagKey<Biome>;
  /**
   * `#minecraft:produces_corals_from_bonemeal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRODUCES_CORALS_FROM_BONEMEAL: TagKey<Biome>;
  /**
   * `#minecraft:reduce_water_ambient_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDUCE_WATER_AMBIENT_SPAWNS: TagKey<Biome>;
  /**
   * `#minecraft:required_ocean_monument_surrounding`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REQUIRED_OCEAN_MONUMENT_SURROUNDING: TagKey<Biome>;
  /**
   * `#minecraft:snow_golem_melts`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_GOLEM_MELTS: TagKey<Biome>;
  /**
   * `#minecraft:spawns_cold_variant_frogs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNS_COLD_VARIANT_FROGS: TagKey<Biome>;
  /**
   * `#minecraft:spawns_gold_rabbits`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNS_GOLD_RABBITS: TagKey<Biome>;
  /**
   * `#minecraft:spawns_snow_foxes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNS_SNOW_FOXES: TagKey<Biome>;
  /**
   * `#minecraft:spawns_warm_variant_frogs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNS_WARM_VARIANT_FROGS: TagKey<Biome>;
  /**
   * `#minecraft:spawns_white_rabbits`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNS_WHITE_RABBITS: TagKey<Biome>;
  /**
   * `#minecraft:stronghold_biased_to`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRONGHOLD_BIASED_TO: TagKey<Biome>;
  /**
   * `#minecraft:water_on_map_outlines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER_ON_MAP_OUTLINES: TagKey<Biome>;
  /**
   * `#minecraft:without_patrol_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHOUT_PATROL_SPAWNS: TagKey<Biome>;
  /**
   * `#minecraft:without_wandering_trader_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHOUT_WANDERING_TRADER_SPAWNS: TagKey<Biome>;
  /**
   * `#minecraft:without_zombie_sieges`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHOUT_ZOMBIE_SIEGES: TagKey<Biome>;
  /**
   * Creates a tag key for {@link Biome} in the registry `minecraft:worldgen/biome`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Biome>;
}
/**
 * Vanilla keys for {@link RegistryKey#CAT_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class CatVariantTagKeys {
  /**
   * `#minecraft:default_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEFAULT_SPAWNS: TagKey<Type>;
  /**
   * `#minecraft:full_moon_spawns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FULL_MOON_SPAWNS: TagKey<Type>;
  /**
   * Creates a tag key for {@link Cat.Type} in the registry `minecraft:cat_variant`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Type>;
}
/**
 * Vanilla keys for {@link RegistryKey#DAMAGE_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class DamageTypeTagKeys {
  /**
   * `#minecraft:always_hurts_ender_dragons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALWAYS_HURTS_ENDER_DRAGONS: TagKey<DamageType>;
  /**
   * `#minecraft:always_kills_armor_stands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALWAYS_KILLS_ARMOR_STANDS: TagKey<DamageType>;
  /**
   * `#minecraft:always_most_significant_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALWAYS_MOST_SIGNIFICANT_FALL: TagKey<DamageType>;
  /**
   * `#minecraft:always_triggers_silverfish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALWAYS_TRIGGERS_SILVERFISH: TagKey<DamageType>;
  /**
   * `#minecraft:avoids_guardian_thorns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AVOIDS_GUARDIAN_THORNS: TagKey<DamageType>;
  /**
   * `#minecraft:burn_from_stepping`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURN_FROM_STEPPING: TagKey<DamageType>;
  /**
   * `#minecraft:burns_armor_stands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURNS_ARMOR_STANDS: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_ARMOR: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_effects`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_EFFECTS: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_enchantments`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_ENCHANTMENTS: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_invulnerability`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_INVULNERABILITY: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_resistance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_RESISTANCE: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_shield`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_SHIELD: TagKey<DamageType>;
  /**
   * `#minecraft:bypasses_wolf_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BYPASSES_WOLF_ARMOR: TagKey<DamageType>;
  /**
   * `#minecraft:can_break_armor_stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAN_BREAK_ARMOR_STAND: TagKey<DamageType>;
  /**
   * `#minecraft:damages_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAMAGES_HELMET: TagKey<DamageType>;
  /**
   * `#minecraft:ignites_armor_stands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGNITES_ARMOR_STANDS: TagKey<DamageType>;
  /**
   * `#minecraft:is_drowning`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_DROWNING: TagKey<DamageType>;
  /**
   * `#minecraft:is_explosion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_EXPLOSION: TagKey<DamageType>;
  /**
   * `#minecraft:is_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_FALL: TagKey<DamageType>;
  /**
   * `#minecraft:is_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_FIRE: TagKey<DamageType>;
  /**
   * `#minecraft:is_freezing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_FREEZING: TagKey<DamageType>;
  /**
   * `#minecraft:is_lightning`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_LIGHTNING: TagKey<DamageType>;
  /**
   * `#minecraft:is_player_attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_PLAYER_ATTACK: TagKey<DamageType>;
  /**
   * `#minecraft:is_projectile`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IS_PROJECTILE: TagKey<DamageType>;
  /**
   * `#minecraft:mace_smash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MACE_SMASH: TagKey<DamageType>;
  /**
   * `#minecraft:no_anger`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NO_ANGER: TagKey<DamageType>;
  /**
   * `#minecraft:no_impact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NO_IMPACT: TagKey<DamageType>;
  /**
   * `#minecraft:no_knockback`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NO_KNOCKBACK: TagKey<DamageType>;
  /**
   * `#minecraft:panic_causes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PANIC_CAUSES: TagKey<DamageType>;
  /**
   * `#minecraft:panic_environmental_causes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PANIC_ENVIRONMENTAL_CAUSES: TagKey<DamageType>;
  /**
   * `#minecraft:witch_resistant_to`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITCH_RESISTANT_TO: TagKey<DamageType>;
  /**
   * `#minecraft:wither_immune_to`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_IMMUNE_TO: TagKey<DamageType>;
  /**
   * Creates a tag key for {@link DamageType} in the registry `minecraft:damage_type`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<DamageType>;
}
/**
 * Vanilla keys for {@link RegistryKey#BANNER_PATTERN}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BannerPatternTagKeys {
  /**
   * `#minecraft:no_item_required`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NO_ITEM_REQUIRED: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/bordure_indented`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_BORDURE_INDENTED: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/creeper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_CREEPER: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/field_masoned`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_FIELD_MASONED: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/flow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_FLOW: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/flower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_FLOWER: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/globe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_GLOBE: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/guster`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_GUSTER: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/mojang`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_MOJANG: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/piglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_PIGLIN: TagKey<PatternType>;
  /**
   * `#minecraft:pattern_item/skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PATTERN_ITEM_SKULL: TagKey<PatternType>;
  /**
   * Creates a tag key for {@link PatternType} in the registry `minecraft:banner_pattern`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<PatternType>;
}
/**
 * Vanilla keys for {@link RegistryKey#GAME_EVENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class GameEventTagKeys {
  /**
   * `#minecraft:allay_can_listen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLAY_CAN_LISTEN: TagKey<GameEvent>;
  /**
   * `#minecraft:ignore_vibrations_sneaking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGNORE_VIBRATIONS_SNEAKING: TagKey<GameEvent>;
  /**
   * `#minecraft:shrieker_can_listen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHRIEKER_CAN_LISTEN: TagKey<GameEvent>;
  /**
   * `#minecraft:vibrations`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VIBRATIONS: TagKey<GameEvent>;
  /**
   * `#minecraft:warden_can_listen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARDEN_CAN_LISTEN: TagKey<GameEvent>;
  /**
   * Creates a tag key for {@link GameEvent} in the registry `minecraft:game_event`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<GameEvent>;
}
/**
 * Vanilla keys for {@link RegistryKey#PAINTING_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class PaintingVariantTagKeys {
  /**
   * `#minecraft:placeable`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLACEABLE: TagKey<Art>;
  /**
   * Creates a tag key for {@link Art} in the registry `minecraft:painting_variant`.
   *
   * @param key the tag key's key
   * @return a new tag key
  */
  static create(key: Key): TagKey<Art>;
}

}
declare module 'io.papermc.paper.registry.set' {
import { Iterable } from 'java.lang';
import { Iterator, Collection } from 'java.util';
import { TypedKey, RegistryKey } from 'io.papermc.paper.registry';
import { Keyed } from 'org.bukkit';
/**
 * A collection of anonymous values relating to a registry. These
 * are values of the same type as the registry, but will not be found
 * in the registry, hence, anonymous.
 * @param  registry value type
*/
export class RegistryValueSet<T> extends Iterable<T> {
  size(): number;
  /**
   * Get the collection of values in this direct set.
   *
   * @return the values
  */
  values(): Collection<T>;
  iterator(): Iterator<T>;
}
export interface RegistryValueSet<T> extends Iterable<T>, RegistrySet<T> {}
/**
 * Represents a collection tied to a registry.
 * 
 * There are 2 types of registry sets:
 * 
 *     {@link Tag} which is a tag from vanilla or a datapack.
 *     These are obtained via {@link org.bukkit.Registry#getTag(io.papermc.paper.registry.tag.TagKey)}.
 *     {@link RegistryKeySet} which is a set of of keys linked to values that are present in the registry. These are
 *     created via {@link #keySet(RegistryKey, Iterable)} or {@link #keySetFromValues(RegistryKey, Iterable)}.
 *     
 * 
 *
 * @param  registry value type
*/
export class RegistrySet<T> {
  /**
   * Creates a {@link RegistryKeySet} from registry-backed values.
   * All values provided must have keys in the given registry.
   * 
   * If references to actual objects are not available yet, use {@link #keySet(RegistryKey, Iterable)} to
   * create an equivalent {@link RegistryKeySet} using just {@link TypedKey TypedKeys}.
   *
   * @param registryKey the registry key for the owner of these values
   * @param values the values
   * @return a new registry set
   * @param  the type of the values
   * @throws IllegalArgumentException if the registry isn't available yet or if any value doesn't have a key in that registry
  */
  static keySetFromValues<T>(registryKey: RegistryKey<T>, values: Iterable<T>): RegistryKeySet<T>;
  /**
   * Creates a direct {@link RegistrySet} from {@link TypedKey TypedKeys}.
   *
   * @param registryKey the registry key for the owner of these keys
   * @param keys the keys for the values
   * @return a new registry set
   * @param  the type of the values
  */
  static keySet<T>(registryKey: RegistryKey<T>, ...keys: TypedKey[]): RegistryKeySet<T>;
  /**
   * Creates a direct {@link RegistrySet} from {@link TypedKey TypedKeys}.
   *
   * @param registryKey the registry key for the owner of these keys
   * @param keys the keys for the values
   * @return a new registry set
   * @param  the type of the values
  */
  static keySet<T>(registryKey: RegistryKey<T>, keys: Iterable<TypedKey<T>>): RegistryKeySet<T>;
  /**
   * Get the registry key for this set.
   *
   * @return the registry key
  */
  registryKey(): RegistryKey<T>;
  /**
   * Get the size of this set.
   *
   * @return the size
  */
  size(): number;
  /**
   * Checks if the registry set is empty.
   *
   * @return true, if empty
  */
  isEmpty(): boolean;
}

}
declare module 'io.papermc.paper.datacomponent.item.ItemAdventurePredicate' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { List } from 'java.util';
import { ItemAdventurePredicate } from 'io.papermc.paper.datacomponent.item';
import { BlockPredicate } from 'io.papermc.paper.block';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link ItemAdventurePredicate}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Adds a block predicate to this builder.
   *
   * @param predicate predicate
   * @return the builder for chaining
   * @see #predicates()
  */
  addPredicate(predicate: BlockPredicate): Builder;
  /**
   * Adds block predicates to this builder.
   *
   * @param predicates predicates
   * @return the builder for chaining
   * @see #predicates()
  */
  addPredicates(predicates: BlockPredicate[]): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<ItemAdventurePredicate> {}

}
declare module 'io.papermc.paper.world.flag' {
import { Set } from 'java.util';
import { FeatureFlag } from 'org.bukkit';
/**
 * Implemented by types in built-in registries that are controlled by {@link FeatureFlag FeatureFlags}.
 * Types in data-driven registries that are controlled by feature flags just will not exist in that registry.
 * @apiNote When a type that currently implements this interface transitions to being data-drive, this
 * interface will be removed from that type in the following major version.
*/
export class FeatureDependant {
  /**
   * Gets the set of required feature flags for this
   * to be enabled.
   *
   * @return the immutable set of feature flags
  */
  requiredFeatures(): Set<FeatureFlag>;
}
/**
 * Implemented by types that hold {@link FeatureFlag FeatureFlags} like
 * {@link org.bukkit.generator.WorldInfo} and {@link org.bukkit.RegionAccessor}.
*/
export class FeatureFlagSetHolder {
  /**
   * Checks if this is enabled based on the loaded feature flags.
   *
   * @return true if enabled
  */
  isEnabled(featureDependant: FeatureDependant): boolean;
  /**
   * Get all {@link FeatureFlag FeatureFlags} enabled in this world.
   *
   * @return all enabled {@link FeatureFlag FeatureFlags}
  */
  get featureFlags(): Set<FeatureFlag>;
}

}
declare module 'io.papermc.paper.datacomponent.item.ShownInTooltip' {
/**
 * A builder for creating a {@link ShownInTooltip} data component.
 *
 * @param  builder type
*/
export class Builder<B> {
  /**
   * Sets if the data component should be shown in the item's tooltip.
   *
   * @param showInTooltip `true` to show in the tooltip
   * @return the builder for chaining
   * @see #showInTooltip()
  */
  showInTooltip(showInTooltip: boolean): B;
}

}
declare module 'io.papermc.paper.advancement.AdvancementDisplay' {
import { Enum } from 'java.lang';
import { Index } from 'net.kyori.adventure.util';
import { TextColor } from 'net.kyori.adventure.text.format';
/**
 * Defines how the {@link #icon()} appears in the advancements screen and
 * the color used with the {@link #title() advancement name}.
*/
export class Frame extends Enum<Frame> {
  /**
   * "Challenge complete" advancement.
   * 
   * The client will play the `ui.toast.challenge_complete` sound
   * when the challenge is completed and the toast is shown.
  */
  static readonly CHALLENGE: Frame;
  /**
   * "Goal reached" advancement.
  */
  static readonly GOAL: Frame;
  /**
   * "Advancement made" advancement.
  */
  static readonly TASK: Frame;
  static valueOf(name: string): Frame;
  static values(): Frame[];
  /**
   * The name map.
  */
  static readonly NAMES: Index<string,Frame>;
  /**
   * Gets the {@link TextColor} used for the advancement name.
   *
   * @return the text color
  */
  color(): TextColor;
  /**
   * Gets the translation key used when an advancement is completed.
   * 
   * This is the first line of the toast displayed by the client.
   *
   * @return the toast message key
  */
  translationKey(): string;
}

}
declare module 'io.papermc.paper.command.brigadier.argument.predicate' {
import { Predicate } from 'java.util.function';
import { ItemStack } from 'org.bukkit.inventory';
/**
 * A predicate for ItemStack.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#itemPredicate()
*/
export class ItemStackPredicate extends Predicate<ItemStack> {

}

}
declare module 'io.papermc.paper.chat' {
import { Component } from 'net.kyori.adventure.text';
import { ViewerUnaware } from 'io.papermc.paper.chat.ChatRenderer';
import { Audience } from 'net.kyori.adventure.audience';
import { Player } from 'org.bukkit.entity';
/**
 * A chat renderer is responsible for rendering chat messages sent by {@link Player}s to the server.
*/
export class ChatRenderer {
  /**
   * Renders a chat message. This will be called once for each receiving {@link Audience}.
   *
   * @param source the message source
   * @param sourceDisplayName the display name of the source player
   * @param message the chat message
   * @param viewer the receiving {@link Audience}
   * @return a rendered chat message
  */
  render(source: Player, sourceDisplayName: Component, message: Component, viewer: Audience): Component;
  /**
   * Create a new instance of the default {@link ChatRenderer}.
   *
   * @return a new {@link ChatRenderer}
  */
  static defaultRenderer(): ChatRenderer;
  /**
   * Creates a new viewer-unaware {@link ChatRenderer}, which will render the chat message a single time,
   * displaying the same rendered message to every viewing {@link Audience}.
   *
   * @param renderer the viewer unaware renderer
   * @return a new {@link ChatRenderer}
  */
  static viewerUnaware(renderer: ViewerUnaware): ChatRenderer;
}

}
declare module 'io.papermc.paper.datacomponent.item.Equippable' {
import { Key } from 'net.kyori.adventure.key';
import { Equippable } from 'io.papermc.paper.datacomponent.item';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { EntityType } from 'org.bukkit.entity';
/**
 * Builder for {@link Equippable}.
*/
export class Builder extends DataComponentBuilder<Equippable> {
  /**
   * Sets the equip sound key for this item.
   *
   * @param sound the equip sound key
   * @return the builder for chaining
  */
  equipSound(sound: Key): Builder;
  /**
   * Sets the asset id for this item.
   *
   * @param assetId the asset id, nullable
   * @return the builder for chaining
  */
  assetId(assetId: Key | null): Builder;
  /**
   * Sets the camera overlay key for this item.
   *
   * @param cameraOverlay the camera overlay key, nullable
   * @return the builder for chaining
  */
  cameraOverlay(cameraOverlay: Key | null): Builder;
  /**
   * Sets the allowed entities that can equip this item.
   *
   * @param allowedEntities the set of allowed entity types, or null if any
   * @return the builder for chaining
  */
  allowedEntities(allowedEntities: RegistryKeySet<EntityType> | null): Builder;
  /**
   * Sets whether the item is dispensable.
   *
   * @param dispensable true if dispensable
   * @return the builder for chaining
  */
  dispensable(dispensable: boolean): Builder;
  /**
   * Sets whether the item is swappable.
   *
   * @param swappable true if swappable
   * @return the builder for chaining
  */
  swappable(swappable: boolean): Builder;
  /**
   * Sets whether the item takes damage when the wearer is hurt.
   *
   * @param damageOnHurt true if it damages on hurt
   * @return the builder for chaining
  */
  damageOnHurt(damageOnHurt: boolean): Builder;
}

}
declare module 'io.papermc.paper.datacomponent.item.Unbreakable' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { Unbreakable } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link Unbreakable}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {

}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<Unbreakable> {}

}
declare module 'io.papermc.paper.event.entity' {
import { Component } from 'net.kyori.adventure.text';
import { Set, Collection, Map } from 'java.util';
import { EntityEvent, PotionSplashEvent } from 'org.bukkit.event.entity';
import { Result } from 'org.bukkit.event.Event';
import { EquipmentChange } from 'io.papermc.paper.event.entity.EntityEquipmentChangedEvent';
import { EquipmentSlot, ItemStack } from 'org.bukkit.inventory';
import { World, DyeColor, PortalType, Location } from 'org.bukkit';
import { PotionEffectType } from 'org.bukkit.potion';
import { BlockFace, Block } from 'org.bukkit.block';
import { CompostItemEvent } from 'io.papermc.paper.event.block';
import { Cause } from 'io.papermc.paper.event.entity.EntityKnockbackEvent';
import { Vector } from 'org.bukkit.util';
import { HandlerList, Cancellable } from 'org.bukkit.event';
import { LivingEntity, Entity, Player, Tameable, PufferFish, Warden, ElderGuardian, ThrownPotion, Shulker } from 'org.bukkit.entity';
/**
 * Called when an entity receives knockback.
 * @see EntityPushedByEntityAttackEvent
 * @see com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent
*/
export class EntityKnockbackEvent extends EntityEvent {
  constructor(entity: Entity, cause: Cause, knockback: Vector);
  /**
   * Gets the cause of the knockback.
   *
   * @return the cause of the knockback
  */
  get cause(): Cause;
  /**
   * Gets the knockback force that will be applied to the entity. 
   * This value is read-only, changes made to it will not have any
   * effect on the final knockback received. Use {@link #setKnockback(Vector)}
   * to make changes.
   *
   * @return the knockback
  */
  get knockback(): Vector;
  /**
   * Sets the knockback force that will be applied to the entity.
   *
   * @param knockback the knockback
  */
  set knockback(knockback: Vector);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityKnockbackEvent extends EntityEvent, Cancellable {}
/**
 * Called when an item is about to be composted by an entity.
*/
export class EntityCompostItemEvent extends CompostItemEvent {
  constructor(entity: Entity, composter: Block, item: ItemStack, willRaiseLevel: boolean);
  /**
   * Gets the entity that interacted with the composter.
   *
   * @return the entity that composted an item.
  */
  get entity(): Entity;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
}
export interface EntityCompostItemEvent extends CompostItemEvent, Cancellable {}
/**
 * Called just before a {@link PufferFish} inflates or deflates.
*/
export class PufferFishStateChangeEvent extends EntityEvent {
  constructor(entity: PufferFish, newPuffState: number);
  get entity(): PufferFish;
  /**
   * Get the new puff state of the {@link PufferFish}.
   * 
   * This is what the {@link PufferFish}'s new puff state will be after this event if it isn't cancelled.
   * Refer to {@link PufferFish#getPuffState()} to get the current puff state.
   *
   * @return The new puff state, 0 being not inflated, 1 being slightly inflated and 2 being fully inflated
  */
  get newPuffState(): number;
  /**
   * Get if the {@link PufferFish} is going to inflate.
   *
   * @return If it's going to inflate
  */
  isInflating(): boolean;
  /**
   * Get if the {@link PufferFish} is going to deflate.
   *
   * @return If it's going to deflate
  */
  isDeflating(): boolean;
  /**
   * Set whether to cancel the {@link PufferFish} (in/de)flating.
   *
   * @param cancel `true` if you wish to cancel the (in/de)flation
  */
  setCancelled(cancel: boolean): void;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PufferFishStateChangeEvent extends EntityEvent, Cancellable {}
/**
 * Is called when an {@link ElderGuardian} appears in front of a {@link Player}.
*/
export class ElderGuardianAppearanceEvent extends EntityEvent {
  constructor(guardian: ElderGuardian, affectedPlayer: Player);
  /**
   * Get the player affected by the guardian appearance.
   *
   * @return Player affected by the appearance
  */
  get affectedPlayer(): Player;
  /**
   * The elder guardian playing the effect.
   *
   * @return The elder guardian
  */
  get entity(): ElderGuardian;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface ElderGuardianAppearanceEvent extends EntityEvent, Cancellable {}
/**
 * Called when an item on or used by an entity takes durability damage as a result of being hit/used.
 * 
 * NOTE: default vanilla behaviour dictates that armor/tools picked up by
 * mobs do not take damage (except via Thorns).
*/
export class EntityDamageItemEvent extends EntityEvent {
  constructor(entity: Entity, item: ItemStack, damage: number);
  /**
   * Gets the item being damaged.
   *
   * @return the item
  */
  get item(): ItemStack;
  /**
   * Gets the amount of durability damage this item will be taking.
   *
   * @return durability change
  */
  get damage(): number;
  /**
   * Sets the amount of durability damage this item will be taking.
   *
   * @param damage the damage amount to cause
  */
  set damage(damage: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityDamageItemEvent extends EntityEvent, Cancellable {}
/**
 * Called when an entity attempts to perform a smash attack.
*/
export class EntityAttemptSmashAttackEvent extends EntityEvent {
  constructor(attacker: LivingEntity, target: LivingEntity, weapon: ItemStack, originalResult: boolean);
  /**
   * Yields the target of the attempted smash attack.
   *
   * @return the target entity
  */
  get target(): LivingEntity;
  /**
   * Yields a copy of the itemstack used in the smash attack attempt.
   *
   * @return the itemstack
  */
  get weapon(): ItemStack;
  /**
   * Yields the original result the server computed.
   *
   * @return `true` if this attempt would have been successful by vanilla's logic, `false` otherwise.
  */
  getOriginalResult(): boolean;
  /**
   * Yields the effective result of this event.
   * The result may take one of three values:
   *
   * 
   *     {@link Result#ALLOW}: The attempt will succeed.
   *     {@link Result#DENY}: The attempt will fail.
   *     {@link Result#DEFAULT}: The attempt will succeed if {@link #getOriginalResult()} is `true` and fail otherwise.
   * 
   *
   * @return the result.
  */
  get result(): Result;
  /**
   * Configures a new result for this event.
   * The passes result may take one of three values:
   *
   * 
   *     {@link Result#ALLOW}: The attempt will succeed.
   *     {@link Result#DENY}: The attempt will fail.
   *     {@link Result#DEFAULT}: The attempt will succeed if {@link #getOriginalResult()} is `true` and fail otherwise.
   * 
   *
   * @param result the new result of the event.
  */
  set result(result: Result);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a LivingEntity loads a crossbow with a projectile.
*/
export class EntityLoadCrossbowEvent extends EntityEvent {
  constructor(entity: LivingEntity, crossbow: ItemStack, hand: EquipmentSlot);
  get entity(): LivingEntity;
  /**
   * Gets the crossbow {@link ItemStack} being loaded.
   *
   * @return the crossbow involved in this event
  */
  get crossbow(): ItemStack;
  /**
   * Gets the hand from which the crossbow was loaded.
   *
   * @return the hand
  */
  get hand(): EquipmentSlot;
  /**
   * @return should the itemstack be consumed
  */
  shouldConsumeItem(): boolean;
  /**
   * @param consume should the item be consumed
  */
  setConsumeItem(consume: boolean): void;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Set whether to cancel the crossbow being loaded. If canceled, the
   * projectile that would be loaded into the crossbow will not be consumed.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityLoadCrossbowEvent extends EntityEvent, Cancellable {}
/**
 * Fired when an entity is pushed by another entity's attack. The acceleration vector can be
 * modified. If this event is cancelled, the entity will not get pushed.
 * 
 * Note: Some entities might trigger this multiple times on the same entity
 * as multiple acceleration calculations are done.
*/
export class EntityPushedByEntityAttackEvent extends EntityKnockbackEvent {
  constructor(entity: Entity, cause: Cause, pushedBy: Entity, knockback: Vector);
  /**
   * Gets the entity which pushed the affected entity.
   *
   * @return the pushing entity
  */
  get pushedBy(): Entity;
  /**
   * Gets the acceleration that will be applied to the affected entity.
   *
   * @return the acceleration vector
   * @deprecated use {@link #getKnockback()}
  */
  get acceleration(): Vector;
  /**
   * Sets the relative acceleration that will be applied to the affected entity.
   *
   * @param acceleration the new acceleration vector
   * @deprecated use {@link #setKnockback(Vector)}
  */
  set acceleration(acceleration: Vector);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
}
export interface EntityPushedByEntityAttackEvent extends EntityKnockbackEvent, Cancellable {}
/**
 * Called when an entity enters the hitbox of a block.
 * Only called for blocks that react when an entity is inside.
 * If cancelled, any action that would have resulted from that entity
 * being in the block will not happen (such as extinguishing an entity in a cauldron).
 * 
 * Blocks this is currently called for:
 * 
 *     Big dripleaf
 *     Bubble column
 *     Buttons
 *     Cactus
 *     Campfire
 *     Cauldron
 *     Crops
 *     End Gateway
 *     Ender Portal
 *     Eye blossom
 *     Fires
 *     Frogspawn
 *     Honey
 *     Hopper
 *     Detector rails
 *     Nether portals
 *     Pitcher crop
 *     Powdered snow
 *     Pressure plates
 *     Sweet berry bush
 *     Tripwire
 *     Waterlily
 *     Web
 *     Wither rose
 * 
*/
export class EntityInsideBlockEvent extends EntityEvent {
  constructor(entity: Entity, block: Block);
  /**
   * Gets the block.
   *
   * @return the block
  */
  get block(): Block;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityInsideBlockEvent extends EntityEvent, Cancellable {}
/**
 * Called when a {@link Tameable} dies and sends a death message.
*/
export class TameableDeathMessageEvent extends EntityEvent {
  constructor(tameable: Tameable, deathMessage: Component);
  /**
   * Set the death message that appears to the owner of the tameable.
   *
   * @param deathMessage Death message to appear
  */
  deathMessage(deathMessage: Component): void;
  /**
   * Get the death message that appears to the owner of the tameable.
   *
   * @return Death message to appear
  */
  deathMessage(): Component;
  get entity(): Tameable;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface TameableDeathMessageEvent extends EntityEvent, Cancellable {}
/**
 * Called when a splash water potion "splashes" and affects
 * different entities in different ways.
*/
export class WaterBottleSplashEvent extends PotionSplashEvent {
  constructor(potion: ThrownPotion, hitEntity: Entity | null, hitBlock: Block | null, hitFace: BlockFace | null, affectedEntities: Map<LivingEntity,number>, rehydrate: Set<LivingEntity>, extinguish: Set<LivingEntity>);
  /**
   * Gets an immutable collection of entities that
   * will take damage as a result of this event. Use
   * other methods on this class to modify which entities
   * take damage.
   *
   * @return an immutable collection of entities
   * @see #doNotDamageAsWaterSensitive(LivingEntity)
   * @see #damageAsWaterSensitive(LivingEntity)
  */
  get toDamage(): Collection<LivingEntity>;
  /**
   * Removes this entity from the group that
   * will be damaged.
   *
   * @param entity entity to remove
  */
  doNotDamageAsWaterSensitive(entity: LivingEntity): void;
  /**
   * Adds this entity to the group that
   * will be damaged
   *
   * @param entity entity to add
  */
  damageAsWaterSensitive(entity: LivingEntity): void;
  /**
   * Get a mutable collection of entities
   * that will be rehydrated by this.
   * 
   * As of 1.19.3 this only will contain Axolotls as they
   * are the only entity type that can be rehydrated, but
   * it may change in the future.
   *
   * @return the entities
  */
  get toRehydrate(): Collection<LivingEntity>;
  /**
   * Get a mutable collection of entities that will
   * be extinguished as a result of this event.
   *
   * @return entities to be extinguished
  */
  get toExtinguish(): Collection<LivingEntity>;
  /**
   * @return a confusing collection, don't use it
   * @deprecated Use {@link #getToDamage()}
  */
  get affectedEntities(): Collection<LivingEntity>;
  /**
   * Doesn't make sense for this event as intensity doesn't vary.
   *
   * @return a confusing value
   * @deprecated check if {@link #getToDamage()} contains an entity
  */
  getIntensity(entity: LivingEntity): number;
  /**
   * Doesn't make sense for this event as intensity doesn't vary.
   *
   * @deprecated use {@link #damageAsWaterSensitive(LivingEntity)}
   * or {@link #doNotDamageAsWaterSensitive(LivingEntity)} to change which entities are
   * damaged
  */
  setIntensity(entity: LivingEntity, intensity: number): void;
}
/**
 * Called when an entity is ready to be teleported by a plugin.
 * Currently, this is only called after the required
 * ticks have passed for a Nether Portal.
 * 
 * Cancelling this event resets the entity's readiness
 * regarding the current portal.
*/
export class EntityPortalReadyEvent extends EntityEvent {
  constructor(entity: Entity, targetWorld: World | null, portalType: PortalType);
  /**
   * Gets the world this portal will teleport to.
   * Can be `null` if "allow-nether" is false in server.properties
   * or if there is another situation where there is no world to teleport to.
   * 
   * This world may be modified by later events such as {@link PlayerPortalEvent}
   * or {@link EntityPortalEvent}.
   *
   * @return the world the portal will teleport the entity to.
  */
  get targetWorld(): World | null;
  /**
   * Sets the world this portal will teleport to. A `null` value
   * will essentially cancel the teleport and prevent further events
   * such as {@link PlayerPortalEvent} from firing.
   * 
   * This world may be modified by later events such as {@link PlayerPortalEvent}
   * or {@link EntityPortalEvent}.
   *
   * @param targetWorld the world
  */
  set targetWorld(targetWorld: World | null);
  /**
   * Gets the portal type for this event.
   *
   * @return the portal type
  */
  get portalType(): PortalType;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityPortalReadyEvent extends EntityEvent, Cancellable {}
/**
 * An event that is triggered when an entity receives a potion effect instantly
 * or when the potion effect is applied on each tick (e.g. every 25 ticks for Poison level 1).
 * 
 * For example, this event may be called when an entity regenerates health
 * or takes poison damage as a result of a potion effect.
*/
export class EntityEffectTickEvent extends EntityEvent {
  constructor(entity: LivingEntity, type: PotionEffectType, amplifier: number);
  get entity(): LivingEntity;
  /**
   * Gets the type of the potion effect associated with this event.
   *
   * @return the {@link PotionEffectType} of the effect
  */
  get type(): PotionEffectType;
  /**
   * Gets the amplifier level of the potion effect associated with this event.
   *
   * @return the amplifier level of the potion effect
  */
  get amplifier(): number;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityEffectTickEvent extends EntityEvent, Cancellable {}
/**
 * Is called when an entity sits down or stands up.
*/
export class EntityToggleSitEvent extends EntityEvent {
  constructor(entity: Entity, isSitting: boolean);
  /**
   * Gets the new sitting state that the entity will change to.
   *
   * @return If it's going to sit or not.
  */
  getSittingState(): boolean;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityToggleSitEvent extends EntityEvent, Cancellable {}
/**
 * Called when two entities mate and the mating process results in a fertilization.
 * Fertilization differs from normal breeding, as represented by the {@link EntityBreedEvent}, as
 * it does not result in the immediate creation of the child entity in the world.
 * 
 * An example of this would be:
 * 
 * A frog being marked as "is_pregnant" and laying {@link Material#FROGSPAWN} later.
 * Sniffers producing the {@link Material#SNIFFER_EGG} item, which needs to be placed before it can begin to hatch.
 * A turtle being marked with "HasEgg" and laying a {@link Material#TURTLE_EGG} later.
 * 
 * 
 * The event hence only exposes the two parent entities in the fertilization process and cannot provide the child entity, as it will only exist at a later point in time.
*/
export class EntityFertilizeEggEvent extends EntityEvent {
  constructor(mother: LivingEntity, father: LivingEntity, breeder: Player | null, bredWith: ItemStack | null, experience: number);
  get entity(): LivingEntity;
  /**
   * Provides the entity in the fertilization process that will eventually be responsible for "creating" offspring,
   * may that be by setting a block that later hatches or dropping an egg that has to be placed.
   *
   * @return The "mother" entity.
  */
  get mother(): LivingEntity;
  /**
   * Provides the "father" entity in the fertilization process that is not responsible for initiating the offspring
   * creation.
   *
   * @return the other parent
  */
  get father(): LivingEntity;
  /**
   * Gets the Entity responsible for fertilization. Breeder is `null` for spontaneous
   * conception.
   *
   * @return The Entity who initiated fertilization.
  */
  get breeder(): Player | null;
  /**
   * The ItemStack that was used to initiate fertilization, if present.
   *
   * @return ItemStack used to initiate fertilization.
  */
  get bredWith(): ItemStack | null;
  /**
   * Get the amount of experience granted by fertilization.
   *
   * @return experience amount
  */
  get experience(): number;
  /**
   * Set the amount of experience granted by fertilization.
   * If the amount is negative or zero, no experience will be dropped.
   *
   * @param experience experience amount
  */
  set experience(experience: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityFertilizeEggEvent extends EntityEvent, Cancellable {}
/**
 * Fired when a shulker duplicates itself by spawning a new shulker.
 * 
 * The event is fired prior to the newly created shulker, accessible via {@link #getEntity()}, being added to the world.
*/
export class ShulkerDuplicateEvent extends EntityEvent {
  constructor(child: Shulker, parent: Shulker);
  /**
   * Provides the newly created shulker, which did not exist prior to the duplication.
   * At the point of this event, said shulker is not part of the world yet.
   *
   * @return the newly duplicated shulker.
  */
  get entity(): Shulker;
  /**
   * Provides the "parent" of the freshly created shulker.
   * The parent shulker is the one that initiated the duplication.
   *
   * @return the previously existing shulker which duplicated.
  */
  get parent(): Shulker;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface ShulkerDuplicateEvent extends EntityEvent, Cancellable {}
/**
 * Called when an entity is dyed. Currently, this is called for {@link Sheep}
 * being dyed, and {@link Wolf}/{@link Cat} collars being dyed.
*/
export class EntityDyeEvent extends EntityEvent {
  constructor(entity: Entity, dyeColor: DyeColor, player: Player | null);
  /**
   * Gets the DyeColor the entity is being dyed
   *
   * @return the DyeColor the entity is being dyed
  */
  get color(): DyeColor;
  /**
   * Sets the DyeColor the entity is being dyed
   *
   * @param dyeColor the DyeColor the entity will be dyed
  */
  set color(color: DyeColor);
  /**
   * Returns the player dyeing the entity, if available.
   *
   * @return player or `null`
  */
  get player(): Player | null;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityDyeEvent extends EntityEvent, Cancellable {}
/**
 * Holds information for living entity movement events
 * 
 * Does not fire for players; use {@link PlayerMoveEvent} for player movement.
*/
export class EntityMoveEvent extends EntityEvent {
  constructor(entity: LivingEntity, from: Location, to: Location);
  get entity(): LivingEntity;
  /**
   * Gets the location this entity moved from
   *
   * @return Location the entity moved from
  */
  get from(): Location;
  /**
   * Sets the location to mark as where the entity moved from
   *
   * @param from New location to mark as the entity's previous location
  */
  set from(from: Location);
  /**
   * Gets the location this entity moved to
   *
   * @return Location the entity moved to
  */
  get to(): Location;
  /**
   * Sets the location that this entity will move to
   *
   * @param to New Location this entity will move to
  */
  set to(to: Location);
  /**
   * Check if the entity has changed position (even within the same block) in the event
   *
   * @return whether the entity has changed position or not
  */
  hasChangedPosition(): boolean;
  /**
   * Check if the entity has changed position (even within the same block) in the event, disregarding a possible world change
   *
   * @return whether the entity has changed position or not
  */
  hasExplicitlyChangedPosition(): boolean;
  /**
   * Check if the entity has moved to a new block in the event
   *
   * @return whether the entity has moved to a new block or not
  */
  hasChangedBlock(): boolean;
  /**
   * Check if the entity has moved to a new block in the event, disregarding a possible world change
   *
   * @return whether the entity has moved to a new block or not
  */
  hasExplicitlyChangedBlock(): boolean;
  /**
   * Check if the entity has changed orientation in the event
   *
   * @return whether the entity has changed orientation or not
  */
  hasChangedOrientation(): boolean;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface EntityMoveEvent extends EntityEvent, Cancellable {}
/**
 * Called whenever a change to an entity's equipment has been detected. This event is called after effects from
 * attribute modifiers and enchantments have been updated.
 * 
 * Examples of actions that can trigger this event:
 * 
 *     An entity being added to a world.
 *     A player logging in.
 *     The durability of an equipment item changing.
 *     A dispenser equipping an item onto an entity.
 *     An entity picking up an armor or weapon item from the ground.
 *     A player changing their equipped armor.
 *     A player changes their currently held item.
 * 
*/
export class EntityEquipmentChangedEvent extends EntityEvent {
  constructor(entity: LivingEntity, equipmentChanges: Map<EquipmentSlot,EquipmentChange>);
  get entity(): LivingEntity;
  /**
   * Gets a map of changed slots to their respective equipment changes.
   *
   * @return the equipment changes map
  */
  get equipmentChanges(): Map<EquipmentSlot,EquipmentChange>;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a Warden's anger level has changed due to another entity.
 * 
 * If the event is cancelled, the warden's anger level will not change.
*/
export class WardenAngerChangeEvent extends EntityEvent {
  constructor(warden: Warden, target: Entity, oldAnger: number, newAnger: number);
  /**
   * Gets the entity which triggered this anger update.
   *
   * @return triggering entity
  */
  get target(): Entity;
  /**
   * Gets the old anger level.
   *
   * @return old anger level
   * @see Warden#getAnger(Entity)
  */
  get oldAnger(): number;
  /**
   * Gets the new anger level resulting from this event.
   *
   * @return new anger level
   * @see Warden#getAnger(Entity)
  */
  get newAnger(): number;
  /**
   * Sets the new anger level resulting from this event.
   * 
   * The anger of a warden is capped at 150.
   *
   * @param newAnger the new anger level, max 150
   * @throws IllegalArgumentException if newAnger is greater than 150
   * @see Warden#setAnger(Entity, int)
  */
  set newAnger(newAnger: number);
  get entity(): Warden;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface WardenAngerChangeEvent extends EntityEvent, Cancellable {}

}
declare module 'io.papermc.paper.plugin.loader.library.impl' {
import { List } from 'java.util';
import { Logger } from 'org.slf4j';
import { RepositorySystem, DefaultRepositorySystemSession } from 'org.eclipse.aether';
import { Dependency } from 'org.eclipse.aether.graph';
import { Path } from 'java.nio.file';
import { RemoteRepository } from 'org.eclipse.aether.repository';
import { ClassPathLibrary, LibraryStore } from 'io.papermc.paper.plugin.loader.library';
/**
 * A simple jar library implementation of the {@link ClassPathLibrary} that allows {@link io.papermc.paper.plugin.loader.PluginLoader}s to
 * append a jar stored on the local file system into their runtime classloader.
 * 
 * An example creation of the jar library type may look like this:
 * {@code
 *   final JarLibrary customLibrary = new JarLibrary(Path.of("libs/custom-library-1.24.jar"));
 * }
 * resulting in a jar library that provides the jar at `libs/custom-library-1.24.jar` to the plugins classloader
 * at runtime.
 * 
 * The jar library implementation will error if the file does not exist at the specified path.
*/
export class JarLibrary extends ClassPathLibrary {
  /**
   * Creates a new jar library that references the jar file found at the provided path.
   *
   * @param path the path, relative to the JVMs start directory.
  */
  constructor(path: Path);
  /**
   * Called to register the library this class path library represents into the passed library store.
   * This method may either be implemented by the plugins themselves if they need complex logic, or existing
   * API exposed implementations of this interface may be used.
   *
   * @param store the library store instance to register this library into
   * @throws LibraryLoadingException if library loading failed for this classpath library
  */
  register(store: LibraryStore): void;
}
/**
 * The maven library resolver acts as a resolver for yet to be resolved jar libraries that may be pulled from a
 * remote maven repository.
 * 
 * Plugins may create and configure a {@link MavenLibraryResolver} by creating a new one and registering both
 * a dependency artifact that should be resolved to a library at runtime and the repository it is found in.
 * An example of this would be the inclusion of the jooq library for typesafe SQL queries:
 * {@code
 * MavenLibraryResolver resolver = new MavenLibraryResolver();
 * resolver.addDependency(new Dependency(new DefaultArtifact("org.jooq:jooq:3.17.7"), null));
 * resolver.addRepository(new RemoteRepository.Builder(
 *     "central", "default", "https://repo1.maven.org/maven2/"
 * ).build());
 * }
 * 
 * Plugins may create and register a {@link MavenLibraryResolver} after configuring it.
*/
export class MavenLibraryResolver extends ClassPathLibrary {
  /**
   * Creates a new maven library resolver instance.
   * 
   * The created instance will use the servers `libraries` folder to cache fetched libraries in.
   * Notably, the resolver is created without any repository, not even maven central.
   * It is hence crucial that plugins which aim to use this api register all required repositories before
   * submitting the {@link MavenLibraryResolver} to the {@link io.papermc.paper.plugin.loader.PluginClasspathBuilder}.
  */
  constructor();
  /**
   * Adds the provided dependency to the library resolver.
   * The artifact from the first valid repository matching the passed dependency will be chosen.
   *
   * @param dependency the definition of the dependency the maven library resolver should resolve when running
   * @see MavenLibraryResolver#addRepository(RemoteRepository)
  */
  addDependency(dependency: Dependency): void;
  /**
   * Adds the provided repository to the library resolver.
   * The order in which these are added does matter, as dependency resolving will start at the first added
   * repository.
   *
   * @param remoteRepository the configuration that defines the maven repository this library resolver should fetch
   * dependencies from
  */
  addRepository(remoteRepository: RemoteRepository): void;
  /**
   * Resolves the provided dependencies and adds them to the library store.
   *
   * @param store the library store the then resolved and downloaded dependencies are registered into
   * @throws LibraryLoadingException if resolving a dependency failed
  */
  register(store: LibraryStore): void;
}

}
declare module 'io.papermc.paper.registry.data.BannerPatternRegistryEntry' {
import { Key } from 'net.kyori.adventure.key';
import { PatternType } from 'org.bukkit.block.banner';
import { BannerPatternRegistryEntry } from 'io.papermc.paper.registry.data';
import { RegistryBuilder } from 'io.papermc.paper.registry';
/**
 * A mutable builder for the {@link BannerPatternRegistryEntry} plugins may change in applicable registry events.
 * 
 * The following values are required for each builder:
 * 
 *     {@link #assetId(Key)}
 *     {@link #translationKey(String)}
 * 
*/
export class Builder extends BannerPatternRegistryEntry {
  /**
   * Sets the asset id of the pattern type, which is the location of the sprite to use.
   *
   * @param assetId the asset id.
   * @return this builder instance.
   * @see BannerPatternRegistryEntry#assetId()
  */
  assetId(assetId: Key): Builder;
  /**
   * Sets the translation key for displaying the pattern inside the banner's tooltip.
   *
   * @param translationKey the translation key.
   * @return this builder instance.
   * @see BannerPatternRegistryEntry#translationKey()
  */
  translationKey(translationKey: string): Builder;
}
export interface Builder extends BannerPatternRegistryEntry, RegistryBuilder<PatternType> {}

}
declare module 'io.papermc.paper.chat.ChatRenderer' {
import { Component } from 'net.kyori.adventure.text';
import { ChatRenderer } from 'io.papermc.paper.chat';
import { Player } from 'org.bukkit.entity';
export class Default extends ChatRenderer {

}
/**
 * Similar to {@link ChatRenderer}, but without knowledge of the message viewer.
 *
 * @see ChatRenderer#viewerUnaware(ViewerUnaware)
*/
export class ViewerUnaware {
  /**
   * Renders a chat message.
   *
   * @param source the message source
   * @param sourceDisplayName the display name of the source player
   * @param message the chat message
   * @return a rendered chat message
  */
  render(source: Player, sourceDisplayName: Component, message: Component): Component;
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent' {
import { Enum } from 'java.lang';
export class Cause extends Enum<Cause> {
  /**
   * The initial load of the server.
  */
  static readonly INITIAL: Cause;
  /**
   * A reload, triggered via one of the various mechanisms like
   * the bukkit or minecraft reload commands.
  */
  static readonly RELOAD: Cause;
  static valueOf(name: string): Cause;
  static values(): Cause[];
}

}
declare module 'io.papermc.paper.event.world.border.WorldBorderBoundsChangeEvent' {
import { Enum } from 'java.lang';
export class Type extends Enum<Type> {
  static readonly STARTED_MOVE: Type;
  static readonly INSTANT_MOVE: Type;
  static valueOf(name: string): Type;
  static values(): Type[];
}

}
declare module 'io.papermc.paper.generated' {
/**
 * Used to mark classes which are generated from
 * a specific version of minecraft.
*/
export class GeneratedFrom {

}

}
declare module 'io.papermc.paper.datacomponent.item.ChargedProjectiles' {
import { List } from 'java.util';
import { ChargedProjectiles } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ItemStack } from 'org.bukkit.inventory';
/**
 * Builder for {@link ChargedProjectiles}.
*/
export class Builder extends DataComponentBuilder<ChargedProjectiles> {
  /**
   * Adds a projectile to be loaded in this builder.
   *
   * @param stack projectile
   * @return the builder for chaining
   * @see #projectiles()
  */
  add(stack: ItemStack): Builder;
  /**
   * Adds projectiles to be loaded in this builder.
   *
   * @param stacks projectiles
   * @return the builder for chaining
   * @see #projectiles()
  */
  addAll(stacks: ItemStack[]): Builder;
}

}
declare module 'io.papermc.paper.datacomponent.item.MapItemColor' {
import { MapItemColor } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { Color } from 'org.bukkit';
export class Builder extends DataComponentBuilder<MapItemColor> {
  /**
   * Sets the tint color of this map.
   *
   * @param color tint color
   * @return the builder for chaining
   * @see #color()
  */
  color(color: Color): Builder;
}

}
declare module 'io.papermc.paper.command.brigadier.argument.resolvers.selector' {
import { List } from 'java.util';
import { ArgumentResolver } from 'io.papermc.paper.command.brigadier.argument.resolvers';
import { Entity, Player } from 'org.bukkit.entity';
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * a player selector argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#player()
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#players()
*/
export class PlayerSelectorArgumentResolver extends SelectorArgumentResolver<Player[]> {

}
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * a selector argument value using a {@link CommandSourceStack}.
 *
 * @param  resolved type
 * @see Target Selectors
*/
export class SelectorArgumentResolver<T> extends ArgumentResolver<T> {

}
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * an entity selector argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#entity()
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#entities()
*/
export class EntitySelectorArgumentResolver extends SelectorArgumentResolver<Entity[]> {

}

}
declare module 'io.papermc.paper.scoreboard.numbers' {
import { ComponentLike, Component } from 'net.kyori.adventure.text';
import { Style, StyleBuilderApplicable } from 'net.kyori.adventure.text.format';
/**
 * A scoreboard number format that applies a custom formatting to the score number.
*/
export class StyledFormat extends NumberFormat {
  /**
   * The style that is being applied to the number in the score
   *
   * @return the style to apply
  */
  style(): Style;
}
export interface StyledFormat extends NumberFormat, StyleBuilderApplicable {}
/**
 * A scoreboard number format that replaces the score number with a chat component.
*/
export class FixedFormat extends NumberFormat {
  /**
   * The component shown instead of the number for a score
   *
   * @return the chat component
  */
  component(): Component;
}
export interface FixedFormat extends NumberFormat, ComponentLike {}
/**
 * Describes a scoreboard number format that applies custom formatting to scoreboard scores.
*/
export class NumberFormat {
  /**
   * Creates a blank scoreboard number format that removes the score number entirely.
   *
   * @return a blank number format
  */
  static blank(): NumberFormat;
  /**
   * Gets an un-styled number format.
   *
   * @return an un-styled number format
  */
  static noStyle(): StyledFormat;
  /**
   * Creates a scoreboard number format that applies a custom formatting to the score number.
   *
   * @param style the style to apply on the number
   * @return a styled number format
  */
  static styled(style: Style): StyledFormat;
  /**
   * Creates a scoreboard number format that applies a custom formatting to the score number.
   *
   * @param styleBuilderApplicables the style to apply on the number
   * @return a styled number format
  */
  static styled(...styleBuilderApplicables: StyleBuilderApplicable[]): StyledFormat;
  /**
   * Creates a scoreboard number format that replaces the score number with a chat component.
   *
   * @param component the component to replace the number with
   * @return a fixed number format
  */
  static fixed(component: ComponentLike): FixedFormat;
}

}
declare module 'io.papermc.paper.datacomponent.item.consumable.ConsumeEffect' {
import { PotionEffect, PotionEffectType } from 'org.bukkit.potion';
import { Key } from 'net.kyori.adventure.key';
import { List } from 'java.util';
import { RegistryKeySet } from 'io.papermc.paper.registry.set';
import { ConsumeEffect } from 'io.papermc.paper.datacomponent.item.consumable';
/**
 * Represents a consumable effect that randomly teleports the entity on consumption.
*/
export class TeleportRandomly extends ConsumeEffect {
  /**
   * The max range that the entity can be teleported to.
   *
   * @return teleportation diameter
  */
  diameter(): number;
}
/**
 * Represents a consumable effect that removes status effects on consumption.
*/
export class RemoveStatusEffects extends ConsumeEffect {
  /**
   * Potion effects to remove.
   *
   * @return effects
  */
  removeEffects(): RegistryKeySet<PotionEffectType>;
}
/**
 * Represents a consumable effect that plays a sound on consumption.
*/
export class PlaySound extends ConsumeEffect {
  /**
   * Sound effect to play in the world.
   *
   * @return sound effect
  */
  sound(): Key;
}
/**
 * Represents a consumable effect that clears all effects on consumption.
*/
export class ClearAllStatusEffects extends ConsumeEffect {

}
/**
 * Represents a consumable effect that applies potion effects based on a probability on consumption.
*/
export class ApplyStatusEffects extends ConsumeEffect {
  /**
   * Potion effect instances to grant.
   *
   * @return potion effects
  */
  effects(): PotionEffect[];
  /**
   * Float between 0 and 1, chance for the effect to be applied.
   *
   * @return chance
  */
  probability(): number;
}

}
declare module 'io.papermc.paper.datacomponent.item.BundleContents' {
import { List } from 'java.util';
import { BundleContents } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ItemStack } from 'org.bukkit.inventory';
/**
 * Builder for {@link BundleContents}.
*/
export class Builder extends DataComponentBuilder<BundleContents> {
  /**
   * Adds an item to this builder.
   *
   * @param stack item
   * @return the builder for chaining
   * @see #contents()
  */
  add(stack: ItemStack): Builder;
  /**
   * Adds items to this builder.
   *
   * @param stacks items
   * @return the builder for chaining
   * @see #contents()
  */
  addAll(stacks: ItemStack[]): Builder;
}

}
declare module 'io.papermc.paper.datacomponent.item.SeededContainerLoot' {
import { Key } from 'net.kyori.adventure.key';
import { SeededContainerLoot } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link SeededContainerLoot}.
*/
export class Builder extends DataComponentBuilder<SeededContainerLoot> {
  /**
   * Sets the loot table key.
   *
   * @param key the loot table key
   * @return the builder for chaining
   * @see #lootTable()
  */
  lootTable(key: Key): Builder;
  /**
   * Sets the loot table seed.
   *
   * @param seed the seed
   * @return the builder for chaining
   * @see #seed()
  */
  seed(seed: number): Builder;
}

}
declare module 'io.papermc.paper.event.player' {
import { Component } from 'net.kyori.adventure.text';
import { PlayerCommandPreprocessEvent, PlayerEvent, PlayerAnimationEvent } from 'org.bukkit.event.player';
import { FailReason as io_papermc_paper_event_player_PlayerBedFailEnterEvent_FailReason } from 'io.papermc.paper.event.player.PlayerBedFailEnterEvent';
import { ServerEvent } from 'org.bukkit.event.server';
import { Set } from 'java.util';
import { SlotType } from 'org.bukkit.event.inventory.InventoryType';
import { ItemFrameChangeAction } from 'io.papermc.paper.event.player.PlayerItemFrameChangeEvent';
import { PageChangeDirection } from 'io.papermc.paper.event.player.PlayerLecternPageChangeEvent';
import { NamespacedKey, Material, Location } from 'org.bukkit';
import { MerchantRecipe, CartographyInventory, InventoryView, LoomInventory, StonecutterInventory, EquipmentSlot, StonecuttingRecipe, ItemStack } from 'org.bukkit.inventory';
import { PotionEffectType } from 'org.bukkit.potion';
import { PatternType } from 'org.bukkit.block.banner';
import { Block, Sign, Lectern } from 'org.bukkit.block';
import { InventoryClickEvent, ClickType, InventoryAction } from 'org.bukkit.event.inventory';
import { ChatRenderer } from 'io.papermc.paper.chat';
import { SignedMessage } from 'net.kyori.adventure.chat';
import { Side } from 'org.bukkit.block.sign';
import { HandlerList, Cancellable } from 'org.bukkit.event';
import { Audience } from 'net.kyori.adventure.audience';
import { FailReason } from 'io.papermc.paper.event.player.PlayerFailMoveEvent';
import { Cause } from 'io.papermc.paper.event.player.PlayerOpenSignEvent';
import { LivingEntity, Entity, Player, ItemFrame, AbstractVillager } from 'org.bukkit.entity';
/**
 * Runs when a player attempts to move, but is prevented from doing so by the server
*/
export class PlayerFailMoveEvent extends PlayerEvent {
  constructor(player: Player, failReason: FailReason, allowed: boolean, logWarning: boolean, from: Location, to: Location);
  /**
   * Gets the reason this movement was prevented by the server
   *
   * @return The reason the movement was prevented
  */
  get failReason(): FailReason;
  /**
   * Gets the location this player moved from
   *
   * @return Location the player moved from
  */
  get from(): Location;
  /**
   * Gets the location this player tried to move to
   *
   * @return Location the player tried to move to
  */
  get to(): Location;
  /**
   * Gets if the check should be bypassed, allowing the movement
   *
   * @return whether to bypass the check
  */
  isAllowed(): boolean;
  /**
   * Set if the check should be bypassed and the movement should be allowed
   *
   * @param allowed whether to bypass the check
  */
  setAllowed(allowed: boolean): void;
  /**
   * Gets if warnings will be printed to console. e.g. "Player123 moved too quickly!"
   *
   * @return whether to log warnings
  */
  getLogWarning(): boolean;
  /**
   * Set if a warning is printed to console. e.g. "Player123 moved too quickly!"
   *
   * @param logWarning whether to log warnings
  */
  setLogWarning(logWarning: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called whenever a players shield is disabled due to an attack from another entity that was capable of disabling the
 * shield. This, most commonly, may be another player attacking with an axe.
 * 
 * Notably, this even is distinct from a {@link PlayerItemCooldownEvent} and will fire prior to the item going on
 * cooldown.
 * It follows that, if this event is cancelled, no {@link PlayerItemCooldownEvent} is called as the shield is never
 * disabled in the first place.
*/
export class PlayerShieldDisableEvent extends PlayerEvent {
  constructor(player: Player, damager: Entity, cooldown: number);
  /**
   * Provides the damager that disabled the shield.
   *
   * @return the entity instance that damaged the player in a way that caused the shield to be disabled.
  */
  get damager(): Entity;
  /**
   * Gets the cooldown the disabled shield will be disabled for in ticks.
   * 
   * Notably, this value is not final as it might be changed by a {@link PlayerItemCooldownEvent} down the line,
   * as said event is called if this event is not cancelled.
   *
   * @return cooldown in ticks
  */
  get cooldown(): number;
  /**
   * Sets the cooldown of the shield in ticks.
   * 
   * Notably, this value is not final as it might be changed by a {@link PlayerItemCooldownEvent} down the line,
   * as said event is called if this event is not cancelled.
   *
   * @param cooldown cooldown in ticks, has to be a positive number
  */
  set cooldown(cooldown: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerShieldDisableEvent extends PlayerEvent, Cancellable {}
/**
 * Fired when a player receives an item cooldown when using an item.
 *
 * @see PlayerItemGroupCooldownEvent for a more general event when applied to a group of items
*/
export class PlayerItemCooldownEvent extends PlayerItemGroupCooldownEvent {
  constructor(player: Player, type: Material, cooldownGroup: NamespacedKey, cooldown: number);
  /**
   * Get the material of the item affected by the cooldown.
   *
   * @return material affected by the cooldown
  */
  get type(): Material;
}
/**
 * Called when a player places an item in or takes an item out of a flowerpot.
*/
export class PlayerFlowerPotManipulateEvent extends PlayerEvent {
  constructor(player: Player, flowerpot: Block, item: ItemStack, placing: boolean);
  /**
   * Gets the flowerpot that is involved in this event.
   *
   * @return the flowerpot that is involved with this event
  */
  get flowerpot(): Block;
  /**
   * Gets the item being placed, or taken from, the flower pot.
   * Check if placing with {@link #isPlacing()}.
   *
   * @return the item placed, or taken from, the flowerpot
  */
  get item(): ItemStack;
  /**
   * Gets if the item is being placed into the flowerpot.
   *
   * @return if the item is being placed into the flowerpot
  */
  isPlacing(): boolean;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerFlowerPotManipulateEvent extends PlayerEvent, Cancellable {}
/**
 * Called when a {@link Player} clicks a side on a sign that causes a command to run.
 * 
 * This command is run with elevated permissions which allows players to access commands on signs they wouldn't
 * normally be able to run.
*/
export class PlayerSignCommandPreprocessEvent extends PlayerCommandPreprocessEvent {
  constructor(player: Player, message: string, recipients: Set<Player>, sign: Sign, side: Side);
  /**
   * Gets the sign that the command originated from.
   *
   * @return the sign
  */
  get sign(): Sign;
  /**
   * Gets the side of the sign that the command originated from.
   *
   * @return the sign side
  */
  get side(): Side;
}
/**
 * This event is called when a player clicks on a lectern to insert a book.
 * If this event is cancelled the player will keep the book and the lectern will remain empty.
*/
export class PlayerInsertLecternBookEvent extends PlayerEvent {
  constructor(player: Player, block: Block, book: ItemStack);
  /**
   * Gets the block of the lectern involved in this event.
   *
   * @return the block of the lectern
  */
  get block(): Block;
  /**
   * Fetches the lectern block state that was part of this event.
   * This method constructs a new snapshot {@link org.bukkit.block.BlockState}.
   *
   * @return a new lectern state snapshot of the involved lectern
   * @throws IllegalStateException if the block at {@link #getBlock()} is no longer a lectern
  */
  get lectern(): Lectern;
  /**
   * Returns the itemstack the player tried to insert. This is a copy of the item,
   * changes made to this itemstack will not affect the book that is being placed in the lectern.
   * If you want to mutate the item stack that ends up in the lectern, use {@link #setBook(ItemStack)}.
   *
   * @return the book that is being placed
  */
  get book(): ItemStack;
  /**
   * Sets the itemstack to insert into the lectern.
   *
   * @param book the book to insert (non book items will leave the lectern in a locked
   *             state as the menu cannot be opened, preventing item extraction)
  */
  set book(book: ItemStack);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerInsertLecternBookEvent extends PlayerEvent, Cancellable {}
/**
 * An event fired when a {@link Player} sends a chat message to the server.
 *
 * @deprecated Listening to this event forces chat to wait for the main thread, delaying chat messages.
 * It is recommended to use {@link AsyncChatEvent} instead, wherever possible.
*/
export class ChatEvent extends AbstractChatEvent {
  constructor(player: Player, viewers: Set<Audience>, renderer: ChatRenderer, message: Component, originalMessage: Component, signedMessage: SignedMessage);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a player selects a banner patten in a loom inventory.
*/
export class PlayerLoomPatternSelectEvent extends PlayerEvent {
  constructor(player: Player, loomInventory: LoomInventory, patternType: PatternType);
  /**
   * Gets the loom inventory involved.
   *
   * @return the loom inventory
  */
  get loomInventory(): LoomInventory;
  /**
   * Gets the pattern type selected.
   *
   * @return the pattern type
  */
  get patternType(): PatternType;
  /**
   * Sets the pattern type selected.
   *
   * @param patternType the pattern type
  */
  set patternType(patternType: PatternType);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerLoomPatternSelectEvent extends PlayerEvent, Cancellable {}
/**
 * Called when a player has slept long enough
 * to count as passing the night/storm.
 * 
 * Cancelling this event will prevent the player from being counted as deeply sleeping
 * unless they exit and re-enter the bed.
*/
export class PlayerDeepSleepEvent extends PlayerEvent {
  constructor(player: Player);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerDeepSleepEvent extends PlayerEvent, Cancellable {}
/**
 * Called when the recipe of an Item is completed inside a cartography table.
*/
export class CartographyItemEvent extends InventoryClickEvent {
  constructor(view: InventoryView, type: SlotType, slot: number, click: ClickType, action: InventoryAction);
  constructor(view: InventoryView, type: SlotType, slot: number, click: ClickType, action: InventoryAction, key: number);
  get inventory(): CartographyInventory;
}
/**
 * Called when the server detects a player stopping using an item.
 * Examples of this are letting go of the interact button when holding a bow, an edible item, or a spyglass.
*/
export class PlayerStopUsingItemEvent extends PlayerEvent {
  constructor(player: Player, item: ItemStack, ticksHeldFor: number);
  /**
   * Gets the exact item the player is releasing
   *
   * @return ItemStack the exact item the player released
  */
  get item(): ItemStack;
  /**
   * Gets the number of ticks the item was held for
   *
   * @return int the number of ticks the item was held for
  */
  get ticksHeldFor(): number;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when an {@link ItemFrame} is having an item rotated, added, or removed from it.
*/
export class PlayerItemFrameChangeEvent extends PlayerEvent {
  constructor(player: Player, itemFrame: ItemFrame, itemStack: ItemStack, action: ItemFrameChangeAction);
  /**
   * Gets the {@link ItemFrame} involved in this event.
   *
   * @return the {@link ItemFrame}
  */
  get itemFrame(): ItemFrame;
  /**
   * Gets the {@link ItemStack} involved in this event.
   * This is the item being added, rotated, or removed from the {@link ItemFrame}.
   * 
   * If this method returns air, then the resulting item in the ItemFrame will be empty.
   *
   * @return the {@link ItemStack} being added, rotated, or removed
  */
  get itemStack(): ItemStack;
  /**
   * Sets the {@link ItemStack} that this {@link ItemFrame} holds.
   * If `null` is provided, the ItemStack will become air and the result in the ItemFrame will be empty.
   *
   * @param itemStack {@link ItemFrame} item
  */
  set itemStack(itemStack: ItemStack | null);
  /**
   * Gets the action that was performed on this {@link ItemFrame}.
   *
   * @return action performed on the item frame in this event
  */
  get action(): ItemFrameChangeAction;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerItemFrameChangeEvent extends PlayerEvent, Cancellable {}
/**
 * Is called when a {@link Player} tracks an {@link Entity}.
 * 
 * If cancelled entity is not shown to the player and interaction in both directions is not possible.
 * 
 * Adding or removing entities from the world at the point in time this event is called is completely
 * unsupported and should be avoided.
*/
export class PlayerTrackEntityEvent extends PlayerEvent {
  constructor(player: Player, entity: Entity);
  /**
   * Gets the entity that will be tracked
   *
   * @return the entity tracked
  */
  get entity(): Entity;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  static get handlerList(): HandlerList;
  get handlers(): HandlerList;
}
export interface PlayerTrackEntityEvent extends PlayerEvent, Cancellable {}
/**
 * Called when a player trades with a villager or wandering trader
*/
export class PlayerTradeEvent extends PlayerPurchaseEvent {
  constructor(player: Player, villager: AbstractVillager, trade: MerchantRecipe, rewardExp: boolean, increaseTradeUses: boolean);
  /**
   * Gets the Villager or Wandering trader associated with this event
   *
   * @return the villager or wandering trader
  */
  get villager(): AbstractVillager;
}
/**
 * Called when a player sets the effect for a beacon
*/
export class PlayerChangeBeaconEffectEvent extends PlayerEvent {
  constructor(player: Player, primary: PotionEffectType | null, secondary: PotionEffectType | null, beacon: Block);
  /**
   * @return the primary effect
  */
  get primary(): PotionEffectType | null;
  /**
   * Sets the primary effect
   * 
   * NOTE: The primary effect still has to be one of the valid effects for a beacon.
   *
   * @param primary the primary effect
  */
  set primary(primary: PotionEffectType | null);
  /**
   * @return the secondary effect
  */
  get secondary(): PotionEffectType | null;
  /**
   * Sets the secondary effect
   * 
   * This only has an effect when the beacon is able to accept a secondary effect.
   * NOTE: The secondary effect still has to be a valid effect for a beacon.
   *
   * @param secondary the secondary effect
  */
  set secondary(secondary: PotionEffectType | null);
  /**
   * @return the beacon block associated with this event
  */
  get beacon(): Block;
  /**
   * Gets if the item used to change the beacon will be consumed.
   * 
   * Independent of {@link #isCancelled()}. If the event is cancelled
   * the item will NOT be consumed.
   *
   * @return `true` if item will be consumed
  */
  willConsumeItem(): boolean;
  /**
   * Sets if the item used to change the beacon should be consumed.
   * 
   * Independent of {@link #isCancelled()}. If the event is cancelled
   * the item will NOT be consumed.
   *
   * @param consumeItem `true` if item should be consumed
  */
  setConsumeItem(consumeItem: boolean): void;
  /**
   * {@inheritDoc}
   * 
   * If a {@link PlayerChangeBeaconEffectEvent} is cancelled, the changes will
   * not take effect
  */
  isCancelled(): boolean;
  /**
   * {@inheritDoc}
   * 
   * If cancelled, the item will NOT be consumed regardless of what {@link #willConsumeItem()} says
   * 
   * If a {@link PlayerChangeBeaconEffectEvent} is cancelled, the changes will not be applied
   * or saved.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerChangeBeaconEffectEvent extends PlayerEvent, Cancellable {}
/**
 * Called when a slot contents change in a player's inventory.
*/
export class PlayerInventorySlotChangeEvent extends PlayerEvent {
  constructor(player: Player, rawSlot: number, oldItemStack: ItemStack, newItemStack: ItemStack);
  /**
   * The raw slot number that was changed.
   *
   * @return The raw slot number.
  */
  get rawSlot(): number;
  /**
   * The slot number that was changed, ready for passing to
   * {@link Inventory#getItem(int)}. Note that there may be two slots with
   * the same slot number, since a view links two different inventories.
   * 
   * If no inventory is opened, internal crafting view is used for conversion.
   *
   * @return The slot number.
  */
  get slot(): number;
  /**
   * Clone of ItemStack that was in the slot before the change.
   *
   * @return The old ItemStack in the slot.
  */
  get oldItemStack(): ItemStack;
  /**
   * Clone of ItemStack that is in the slot after the change.
   *
   * @return The new ItemStack in the slot.
  */
  get newItemStack(): ItemStack;
  /**
   * Gets whether the slot change advancements will be triggered.
   *
   * @return Whether the slot change advancements will be triggered.
  */
  shouldTriggerAdvancements(): boolean;
  /**
   * Sets whether the slot change advancements will be triggered.
   *
   * @param triggerAdvancements Whether the slot change advancements will be triggered.
  */
  setShouldTriggerAdvancements(triggerAdvancements: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a player trades with a standalone merchant GUI.
*/
export class PlayerPurchaseEvent extends PlayerEvent {
  constructor(player: Player, trade: MerchantRecipe, rewardExp: boolean, increaseTradeUses: boolean);
  /**
   * Gets the associated trade with this event
   *
   * @return the trade
  */
  get trade(): MerchantRecipe;
  /**
   * Sets the trade. This is then used to determine the next prices
   *
   * @param trade the trade to use
  */
  set trade(trade: MerchantRecipe);
  /**
   * @return will trade try to reward exp
  */
  isRewardingExp(): boolean;
  /**
   * Sets whether the trade will try to reward exp
   *
   * @param rewardExp try to reward exp
  */
  setRewardExp(rewardExp: boolean): void;
  /**
   * @return whether the trade will count as a use of the trade
  */
  willIncreaseTradeUses(): boolean;
  /**
   * Sets whether the trade will count as a use
   *
   * @param increaseTradeUses `true` to count, `false` otherwise
  */
  setIncreaseTradeUses(increaseTradeUses: boolean): void;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerPurchaseEvent extends PlayerEvent, Cancellable {}
export class PlayerStonecutterRecipeSelectEvent extends PlayerEvent {
  constructor(player: Player, stonecutterInventory: StonecutterInventory, stonecuttingRecipe: StonecuttingRecipe);
  get stonecutterInventory(): StonecutterInventory;
  get stonecuttingRecipe(): StonecuttingRecipe;
  set stonecuttingRecipe(stonecuttingRecipe: StonecuttingRecipe);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerStonecutterRecipeSelectEvent extends PlayerEvent, Cancellable {}
export class PlayerLecternPageChangeEvent extends PlayerEvent {
  constructor(player: Player, lectern: Lectern, book: ItemStack, pageChangeDirection: PageChangeDirection, oldPage: number, newPage: number);
  /**
   * Gets the lectern involved.
   *
   * @return the Lectern
  */
  get lectern(): Lectern;
  /**
   * Gets the current ItemStack on the lectern.
   *
   * @return the ItemStack on the Lectern
  */
  get book(): ItemStack;
  /**
   * Gets the page change direction. This is essentially returns which button the player clicked, left or right.
   *
   * @return the page change direction
  */
  get pageChangeDirection(): PageChangeDirection;
  /**
   * Gets the page changed from. Pages are 0-indexed.
   *
   * @return the page changed from
  */
  get oldPage(): number;
  /**
   * Gets the page changed to. Pages are 0-indexed.
   *
   * @return the page changed to
  */
  get newPage(): number;
  /**
   * Sets the page changed to. Pages are 0-indexed.
   * Page indices that are greater than the number of pages will show the last page.
   *
   * @param newPage the new paged changed to
  */
  set newPage(newPage: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerLecternPageChangeEvent extends PlayerEvent, Cancellable {}
/**
 * Called when a player begins editing a sign's text.
 * 
 * Cancelling this event stops the sign editing menu from opening.
*/
export class PlayerOpenSignEvent extends PlayerEvent {
  constructor(editor: Player, sign: Sign, side: Side, cause: Cause);
  /**
   * Gets the sign that was clicked.
   *
   * @return {@link Sign} that was clicked
  */
  get sign(): Sign;
  /**
   * Gets which side of the sign was clicked.
   *
   * @return {@link Side} that was clicked
   * @see Sign#getSide(Side)
  */
  get side(): Side;
  /**
   * The cause of this sign open.
   *
   * @return the cause
  */
  get cause(): Cause;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerOpenSignEvent extends PlayerEvent, Cancellable {}
export class PlayerArmSwingEvent extends PlayerAnimationEvent {
  constructor(player: Player, equipmentSlot: EquipmentSlot);
  /**
   * Returns the hand of the arm swing.
   *
   * @return the hand
  */
  get hand(): EquipmentSlot;
}
export class PlayerBedFailEnterEvent extends PlayerEvent {
  constructor(player: Player, failReason: io_papermc_paper_event_player_PlayerBedFailEnterEvent_FailReason, bed: Block, willExplode: boolean, message: Component | null);
  get failReason(): io_papermc_paper_event_player_PlayerBedFailEnterEvent_FailReason;
  get bed(): Block;
  getWillExplode(): boolean;
  setWillExplode(willExplode: boolean): void;
  get message(): Component | null;
  set message(message: Component | null);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * {@inheritDoc}
   * 
   * NOTE: This does not cancel the player getting in the bed, but any messages/explosions
   * that may occur because of the interaction.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerBedFailEnterEvent extends PlayerEvent, Cancellable {}
/**
 * Event that is fired when a player uses the pick item functionality (middle-clicking a block or entity to get the
 * appropriate item). After the handling of this event, the contents of the source and the target slot will be swapped
 * and the currently selected hotbar slot of the player will be set to the target slot.
*/
export class PlayerPickItemEvent extends PlayerEvent {
  constructor(player: Player, targetSlot: number, sourceSlot: number);
  /**
   * Returns the slot the item that is being picked goes into.
   *
   * @return hotbar slot (0-8 inclusive)
  */
  get targetSlot(): number;
  /**
   * Changes the slot the item that is being picked goes into.
   *
   * @param targetSlot hotbar slot (0-8 inclusive)
  */
  set targetSlot(targetSlot: number);
  /**
   * Returns the slot in which the item that will be put into the players hotbar is located.
   * 
   * Returns `-1` if the item is not in the player's inventory.
   * If this is the case and the player is in creative mode, the item will be spawned in.
   *
   * @return player inventory slot (0-35 inclusive, or `-1` if not in the player inventory)
  */
  get sourceSlot(): number;
  /**
   * Change the source slot from which the item that will be put in the players hotbar will be taken.
   * 
   * If set to `-1` and the player is in creative mode, the item will be spawned in.
   *
   * @param sourceSlot player inventory slot (0-35 inclusive, or `-1` if not in the player inventory)
  */
  set sourceSlot(sourceSlot: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerPickItemEvent extends PlayerEvent, Cancellable {}
/**
 * Called when the player tries to attack an entity.
 * 
 * This occurs before any of the damage logic, so cancelling this event
 * will prevent any sort of sounds from being played when attacking.
 * 
 * This event will fire as cancelled for certain entities, with {@link PrePlayerAttackEntityEvent#willAttack()} being false
 * to indicate that this entity will not actually be attacked.
 * 
 * Note: there may be other factors (invulnerability, etc.) that will prevent this entity from being attacked that this event will not cover
*/
export class PrePlayerAttackEntityEvent extends PlayerEvent {
  constructor(player: Player, attacked: Entity, willAttack: boolean);
  /**
   * Gets the entity that was attacked in this event.
   *
   * @return entity that was attacked
  */
  get attacked(): Entity;
  /**
   * Gets if this entity will be attacked normally.
   * Entities like falling sand will return `false` because
   * their entity type does not allow them to be attacked.
   * 
   * Note: there may be other factors (invulnerability, etc.) that will prevent this entity from being attacked that this event will not cover
   *
   * @return if the entity will actually be attacked
  */
  willAttack(): boolean;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets if this attack should be cancelled, note if {@link PrePlayerAttackEntityEvent#willAttack()} returns false
   * this event will always be cancelled.
   *
   * @param cancel `true` if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PrePlayerAttackEntityEvent extends PlayerEvent, Cancellable {}
/**
 * Is called when a {@link Player} untracks an {@link Entity}.
 * 
 * Adding or removing entities from the world at the point in time this event is called is completely
 * unsupported and should be avoided.
*/
export class PlayerUntrackEntityEvent extends PlayerEvent {
  constructor(player: Player, entity: Entity);
  /**
   * Gets the entity that will be untracked
   *
   * @return the entity untracked
  */
  get entity(): Entity;
  static get handlerList(): HandlerList;
  get handlers(): HandlerList;
}
/**
 * Called when a player is marked as loaded.
 * 
 * This either happens when the player notifies the server after loading the world (closing the downloading terrain screen)
 * or when the player has not done so for 60 ticks after joining the server or respawning.
*/
export class PlayerClientLoadedWorldEvent extends PlayerEvent {
  constructor(who: Player, timeout: boolean);
  /**
   * True if the event was triggered because the server has not been notified by the player
   * for 60 ticks after the player joined the server or respawned.
   *
   * @return true if the event was triggered because of a timeout
  */
  isTimeout(): boolean;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * An abstract implementation of a chat event, handling shared logic.
*/
export class AbstractChatEvent extends PlayerEvent {
  /**
   * Gets a set of {@link Audience audiences} that this chat message will be displayed to.
   *
   * The set returned may auto-populate on access. Any listener accessing the returned set should be aware that
   * it may reduce performance for a lazy set implementation.
   *
   * @return a mutable set of {@link Audience audiences} who will receive the chat message
  */
  viewers(): Set<Audience>;
  /**
   * Sets the chat renderer.
   *
   * @param renderer the chat renderer
   * @throws NullPointerException if `renderer` is `null`
  */
  renderer(renderer: ChatRenderer): void;
  /**
   * Gets the chat renderer.
   *
   * @return the chat renderer
  */
  renderer(): ChatRenderer;
  /**
   * Gets the user-supplied message.
   * The return value will reflect changes made using {@link #message(Component)}.
   *
   * @return the user-supplied message
  */
  message(): Component;
  /**
   * Sets the user-supplied message.
   *
   * @param message the user-supplied message
   * @throws NullPointerException if `message` is `null`
  */
  message(message: Component): void;
  /**
   * Gets the original and unmodified user-supplied message.
   * The return value will not reflect changes made using
   * {@link #message(Component)}.
   *
   * @return the original user-supplied message
  */
  originalMessage(): Component;
  /**
   * Gets the signed message.
   * Changes made in this event will not update
   * the signed message.
   *
   * @return the signed message
  */
  signedMessage(): SignedMessage;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
}
export interface AbstractChatEvent extends PlayerEvent, Cancellable {}
/**
 * An event fired when a {@link Player} sends a chat message to the server.
 * 
 * This event will sometimes fire synchronously, depending on how it was
 * triggered.
 * 
 * If a player is the direct cause of this event by an incoming packet, this
 * event will be asynchronous. If a plugin triggers this event by compelling a
 * player to chat, this event will be synchronous.
 * 
 * Care should be taken to check {@link #isAsynchronous()} and treat the event
 * appropriately.
*/
export class AsyncChatEvent extends AbstractChatEvent {
  constructor(async: boolean, player: Player, viewers: Set<Audience>, renderer: ChatRenderer, message: Component, originalMessage: Component, signedMessage: SignedMessage);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export class AsyncChatCommandDecorateEvent extends AsyncChatDecorateEvent {
  constructor(player: Player | null, originalMessage: Component);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Fired when a player receives an item cooldown.
 *
 * @see PlayerItemCooldownEvent for a more specific event when applied to a specific item.
*/
export class PlayerItemGroupCooldownEvent extends PlayerEvent {
  constructor(player: Player, cooldownGroup: NamespacedKey, cooldown: number);
  /**
   * Get the cooldown group as defined by an item's {@link org.bukkit.inventory.meta.components.UseCooldownComponent}.
   *
   * @return cooldown group
  */
  get cooldownGroup(): NamespacedKey;
  /**
   * Gets the cooldown in ticks.
   *
   * @return cooldown in ticks
  */
  get cooldown(): number;
  /**
   * Sets the cooldown of the material in ticks.
   * Setting the cooldown to 0 results in removing an already existing cooldown for the material.
   *
   * @param cooldown cooldown in ticks, has to be a positive number
  */
  set cooldown(cooldown: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerItemGroupCooldownEvent extends PlayerEvent, Cancellable {}
/**
 * Called when the player is attempting to rename a mob
*/
export class PlayerNameEntityEvent extends PlayerEvent {
  constructor(player: Player, entity: LivingEntity, name: Component, persistent: boolean);
  /**
   * Gets the name to be given to the entity.
   *
   * @return the name
  */
  get name(): Component | null;
  /**
   * Sets the name to be given to the entity.
   *
   * @param name the name
  */
  set name(name: Component | null);
  /**
   * Gets the entity involved in this event.
   *
   * @return the entity
  */
  get entity(): LivingEntity;
  /**
   * Sets the entity involved in this event.
   *
   * @param entity the entity
  */
  set entity(entity: LivingEntity);
  /**
   * Gets whether this will set the mob to be persistent.
   *
   * @return persistent
  */
  isPersistent(): boolean;
  /**
   * Sets whether this will set the mob to be persistent.
   *
   * @param persistent persistent
  */
  setPersistent(persistent: boolean): void;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerNameEntityEvent extends PlayerEvent, Cancellable {}
/**
 * This event is fired when the server decorates a component for chat purposes. This is called
 * before {@link AsyncChatEvent} and the other chat events. It is recommended that you modify the
 * message here, and use the chat events for modifying receivers and later the chat type. If you
 * want to keep the message as "signed" for the clients who get it, be sure to include the entire
 * original message somewhere in the final message.
 * 
 * See {@link AsyncChatCommandDecorateEvent} for the decoration of messages sent via commands
*/
export class AsyncChatDecorateEvent extends ServerEvent {
  constructor(player: Player | null, originalMessage: Component);
  /**
   * Gets the player (if available) associated with this event.
   * 
   * Certain commands request decorations without a player context
   * which is why this is possibly null.
   *
   * @return the player or `null`
  */
  player(): Player | null;
  /**
   * Gets the original decoration input
   *
   * @return the input
  */
  originalMessage(): Component;
  /**
   * Gets the decoration result. This may already be different from
   * {@link #originalMessage()} if some other listener to this event
   * changed the result.
   *
   * @return the result
  */
  result(): Component;
  /**
   * Sets the resulting decorated component.
   *
   * @param result the result
  */
  result(result: Component): void;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * A cancelled decorating event means that no changes to the result component
   * will have any effect. The decorated component will be equal to the original
   * component.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface AsyncChatDecorateEvent extends ServerEvent, Cancellable {}

}
declare module 'io.papermc.paper.util' {
import { ClassLoader, Class } from 'java.lang';
import { Duration } from 'java.time';
import { AbstractList, Iterator, RandomAccess, List, ListIterator, Map } from 'java.util';
import { Manifest } from 'java.util.jar';
import { Temporal, TemporalUnit } from 'java.time.temporal';
import { Function, Predicate } from 'java.util.function';
/**
 * Modified version of the Guava class with the same name to support add operations.
 *
 * @param  backing list element type
 * @param  transformed list element type
*/
export class TransformingRandomAccessList<F, T> extends AbstractList<T> {
  /**
   * Create a new {@link TransformingRandomAccessList}.
   *
   * @param fromList backing list
   * @param toFunction function mapping backing list element type to transformed list element type
   * @param fromFunction function mapping transformed list element type to backing list element type
  */
  constructor(fromList: F[], toFunction: Function<any,T>, fromFunction: Function<any,F>);
  clear(): void;
  get(index: number): T;
  iterator(): Iterator<T>;
  listIterator(index: number): ListIterator<T>;
  isEmpty(): boolean;
  removeIf(filter: Predicate<any>): boolean;
  remove(index: number): T;
  size(): number;
  set(i: number, t: T): T;
  add(i: number, t: T): void;
}
export interface TransformingRandomAccessList<F, T> extends AbstractList<T>, RandomAccess {}
export class JarManifests {
  static manifest(clazz: Class<any>): Manifest | null;
}
/**
 * A TemporalUnit that represents the target length of one server tick. This is defined
 * as 50 milliseconds. Note that this class is not for measuring the length that a tick
 * took, rather it is used for simple conversion between times and ticks.
 *
 * @see #tick()
*/
export class Tick extends TemporalUnit {
  /**
   * Gets the instance of the tick temporal unit.
   *
   * @return the tick instance
  */
  static tick(): Tick;
  /**
   * Creates a duration from an amount of ticks. This is shorthand for
   * {@link Duration#of(long, TemporalUnit)} called with the amount of ticks and
   * {@link #tick()}.
   *
   * @param ticks the amount of ticks
   * @return the duration
  */
  static of(ticks: number): Duration;
  /**
   * Gets the number of whole ticks that occur in the provided duration. Note that this
   * method returns an `int` as this is the unit that Minecraft stores ticks in.
   *
   * @param duration the duration
   * @return the number of whole ticks in this duration
   * @throws ArithmeticException if the duration is zero or an overflow occurs
  */
  fromDuration(duration: Duration): number;
  get duration(): Duration;
  isDurationEstimated(): boolean;
  isDateBased(): boolean;
  isTimeBased(): boolean;
  addTo<R>(temporal: R, amount: number): R;
  between(start: Temporal, end: Temporal): number;
}

}
declare module 'io.papermc.paper.enchantments' {
import { Enum } from 'java.lang';
/**
 * @deprecated Enchantments do not have a "rarity" since 1.20.5
*/
export class EnchantmentRarity extends Enum<EnchantmentRarity> {
  static readonly COMMON: EnchantmentRarity;
  static readonly UNCOMMON: EnchantmentRarity;
  static readonly RARE: EnchantmentRarity;
  static readonly VERY_RARE: EnchantmentRarity;
  static valueOf(name: string): EnchantmentRarity;
  static values(): EnchantmentRarity[];
  /**
   * Gets the weight for the rarity.
   *
   * @return the weight
  */
  get weight(): number;
}

}
declare module 'io.papermc.paper.ServerBuildInfo' {
import { Enum } from 'java.lang';
/**
 * String representation types.
*/
export class StringRepresentation extends Enum<StringRepresentation> {
  /**
   * A simple version string, in format `--`.
  */
  static readonly VERSION_SIMPLE: StringRepresentation;
  /**
   * A simple version string, in format `--@ ()`.
  */
  static readonly VERSION_FULL: StringRepresentation;
  static valueOf(name: string): StringRepresentation;
  static values(): StringRepresentation[];
}

}
declare module 'io.papermc.paper.datacomponent.item.DeathProtection' {
import { List } from 'java.util';
import { DeathProtection } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { ConsumeEffect } from 'io.papermc.paper.datacomponent.item.consumable';
/**
 * Builder for {@link DeathProtection}.
*/
export class Builder extends DataComponentBuilder<DeathProtection> {
  addEffect(effect: ConsumeEffect): Builder;
  addEffects(effects: ConsumeEffect[]): Builder;
}

}
declare module 'io.papermc.paper.entity.TeleportFlag' {
import { Enum } from 'java.lang';
/**
 * Note: These flags only work on {@link org.bukkit.entity.Player} entities.
 * 
 * Relative flags enable a player to not lose their velocity in the flag-specific axis/context when teleporting.
 *
 * @apiNote The relative flags exposed in the API do *not* mirror all flags known to vanilla, as relative flags concerning
 * the position are non-applicable given teleports always expect an absolute location.
 * @see org.bukkit.entity.Player#teleport(Location, PlayerTeleportEvent.TeleportCause, TeleportFlag...)
*/
export class Relative extends Enum<Relative> {
  /**
   * Configures the player to not lose velocity in their x axis during the teleport.
  */
  static readonly VELOCITY_X: Relative;
  /**
   * Configures the player to not lose velocity in their y axis during the teleport.
  */
  static readonly VELOCITY_Y: Relative;
  /**
   * Configures the player to not lose velocity in their z axis during the teleport.
  */
  static readonly VELOCITY_Z: Relative;
  /**
   * Configures the player to not lose velocity in their current rotation during the teleport.
  */
  static readonly VELOCITY_ROTATION: Relative;
  static valueOf(name: string): Relative;
  static values(): Relative[];
  /**
   * Configures the player to not loose velocity in their x axis during the teleport.
   * @deprecated Since 1.21.3, vanilla split up the relative teleport flags into velocity and position related
   * ones. As the API does not deal with position relative flags, this name is no longer applicable.
   * Use {@link #VELOCITY_X} instead.
  */
  static readonly X: Relative;
  /**
   * Configures the player to not loose velocity in their y axis during the teleport.
   * @deprecated Since 1.21.3, vanilla split up the relative teleport flags into velocity and position related
   * ones. As the API does not deal with position relative flags, this name is no longer applicable.
   * Use {@link #VELOCITY_Y} instead.
  */
  static readonly Y: Relative;
  /**
   * Configures the player to not loose velocity in their z axis during the teleport.
   * @deprecated Since 1.21.3, vanilla split up the relative teleport flags into velocity and position related
   * ones. As the API does not deal with position relative flags, this name is no longer applicable.
   * Use {@link #VELOCITY_Z} instead.
  */
  static readonly Z: Relative;
  /**
   * Represents the player's yaw
   *
   * @deprecated relative velocity flags now allow for the whole rotation to be relative, instead of the yaw and
   * pitch having individual options. Use {@link #VELOCITY_ROTATION} instead.
  */
  static readonly YAW: Relative;
  /**
   * Represents the player's pitch
   *
   * @deprecated relative velocity flags now allow for the whole rotation to be relative, instead of the yaw and
   * pitch having individual options. Use {@link #VELOCITY_ROTATION} instead.
  */
  static readonly PITCH: Relative;
}
/**
 * Represents flags that effect the entity's state on
 * teleportation.
*/
export class EntityState extends Enum<EntityState> {
  /**
   * If all passengers should not be required to be removed prior to teleportation.
   * 
   * Note:
   * Teleporting to a different world with this flag present while the entity has entities riding it
   * will cause this teleportation to return false and not occur.
  */
  static readonly RETAIN_PASSENGERS: EntityState;
  /**
   * If the entity should not be dismounted if they are riding another entity.
   * 
   * Note:
   * Teleporting to a different world with this flag present while this entity is riding another entity will
   * cause this teleportation to return false and not occur.
  */
  static readonly RETAIN_VEHICLE: EntityState;
  /**
   * Indicates that a player should not have their current open inventory closed when teleporting.
   * 
   * Note:
   * This option will be ignored when teleported to a different world.
  */
  static readonly RETAIN_OPEN_INVENTORY: EntityState;
  static valueOf(name: string): EntityState;
  static values(): EntityState[];
}

}
declare module 'io.papermc.paper.plugin.loader.library' {
import { RuntimeException, Exception } from 'java.lang';
import { Path } from 'java.nio.file';
/**
 * The classpath library interface represents libraries that are capable of registering themselves via
 * {@link #register(LibraryStore)} on any given {@link LibraryStore}.
*/
export class ClassPathLibrary {
  /**
   * Called to register the library this class path library represents into the passed library store.
   * This method may either be implemented by the plugins themselves if they need complex logic, or existing
   * API exposed implementations of this interface may be used.
   *
   * @param store the library store instance to register this library into
   * @throws LibraryLoadingException if library loading failed for this classpath library
  */
  register(store: LibraryStore): void;
}
/**
 * Represents a storage that stores library jars.
 * 
 * The library store api allows plugins to register specific dependencies into their runtime classloader when their
 * {@link io.papermc.paper.plugin.loader.PluginLoader} is processed.
 *
 * @see io.papermc.paper.plugin.loader.PluginLoader
*/
export class LibraryStore {
  /**
   * Adds the provided library path to this library store.
   *
   * @param library path to the libraries jar file on the disk
  */
  addLibrary(library: Path): void;
}
/**
 * Indicates that an exception has occured while loading a library.
*/
export class LibraryLoadingException extends RuntimeException {
  constructor(s: string);
  constructor(s: string, e: Exception);
}

}
declare module 'io.papermc.paper.plugin.loader' {
import { PluginProviderContext } from 'io.papermc.paper.plugin.bootstrap';
import { ClassPathLibrary } from 'io.papermc.paper.plugin.loader.library';
/**
 * A mutable builder that may be used to collect and register all {@link ClassPathLibrary} instances a
 * {@link PluginLoader} aims to provide to its plugin at runtime.
*/
export class PluginClasspathBuilder {
  /**
   * Adds a new classpath library to this classpath builder.
   * 
   * As a builder, this method does not invoke {@link ClassPathLibrary#register(LibraryStore)} and
   * may hence be run without invoking potential IO performed by a {@link ClassPathLibrary} during resolution.
   * 
   * The paper api provides pre implemented {@link ClassPathLibrary} types that allow easy inclusion of existing
   * libraries on disk or on remote maven repositories.
   *
   * @param classPathLibrary the library instance to add to this builder
   * @return self
   * @see io.papermc.paper.plugin.loader.library.impl.JarLibrary
   * @see io.papermc.paper.plugin.loader.library.impl.MavenLibraryResolver
  */
  addLibrary(classPathLibrary: ClassPathLibrary): PluginClasspathBuilder;
  get context(): PluginProviderContext;
}
/**
 * A plugin loader is responsible for creating certain aspects of a plugin before it is created.
 * 
 * The goal of the plugin loader is the creation of an expected/dynamic environment for the plugin to load into.
 * This, as of right now, only applies to creating the expected classpath for the plugin, e.g. supplying external
 * libraries to the plugin.
 * 
 * It should be noted that this class will be called from a different classloader, this will cause any static values
 * set in this class/any other classes loaded not to persist when the plugin loads.
*/
export class PluginLoader {
  /**
   * Called by the server to allows plugins to configure the runtime classpath that the plugin is run on.
   * This allows plugin loaders to configure dependencies for the plugin where jars can be downloaded or
   * provided during runtime.
   *
   * @param classpathBuilder a mutable classpath builder that may be used to register custom runtime dependencies
   *                         for the plugin the loader was registered for.
  */
  classloader(classpathBuilder: PluginClasspathBuilder): void;
}

}
declare module 'io.papermc.paper.event.block' {
import { PlayerEvent } from 'org.bukkit.event.player';
import { Component } from 'net.kyori.adventure.text';
import { List } from 'java.util';
import { BlockState, BlockFace, Beacon, Block } from 'org.bukkit.block';
import { DragonBattle } from 'org.bukkit.boss';
import { ProjectileHitEvent } from 'org.bukkit.event.entity';
import { LockableTileState } from 'io.papermc.paper.block';
import { Sound } from 'net.kyori.adventure.sound';
import { HandlerList, Cancellable } from 'org.bukkit.event';
import { Result } from 'org.bukkit.event.Event';
import { BellRingEvent as org_bukkit_event_block_BellRingEvent, BlockFormEvent, BlockExpEvent, BlockEvent } from 'org.bukkit.event.block';
import { EquipmentSlot, ItemStack } from 'org.bukkit.inventory';
import { Entity, Raider, Player, Projectile } from 'org.bukkit.entity';
/**
 * Called when a block forces another block to break and drop items.
 * 
 * Currently called for piston's and liquid flows.
*/
export class BlockBreakBlockEvent extends BlockExpEvent {
  constructor(block: Block, source: Block, drops: ItemStack[]);
  /**
   * Gets a mutable list of drops for this event
   *
   * @return the drops
  */
  get drops(): ItemStack[];
  /**
   * Gets the block that cause this (e.g. a piston, or adjacent liquid)
   *
   * @return the source
  */
  get source(): Block;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a beacon is activated.
 * Activation occurs when the beacon beam becomes visible.
*/
export class BeaconActivatedEvent extends BlockEvent {
  constructor(block: Block);
  /**
   * Returns the beacon that was activated.
   *
   * @return the beacon that was activated.
  */
  get beacon(): Beacon;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export class BlockPreDispenseEvent extends BlockEvent {
  constructor(block: Block, itemStack: ItemStack, slot: number);
  /**
   * Gets the {@link ItemStack} to be dispensed.
   *
   * @return The item to be dispensed
  */
  get itemStack(): ItemStack;
  /**
   * Gets the inventory slot of the dispenser to dispense from.
   *
   * @return The inventory slot
  */
  get slot(): number;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface BlockPreDispenseEvent extends BlockEvent, Cancellable {}
/**
 * Called when a {@link Raider} is revealed by a bell.
 *
 * @deprecated use {@link org.bukkit.event.block.BellResonateEvent}
*/
export class BellRevealRaiderEvent extends BlockEvent {
  constructor(theBlock: Block, raider: Raider);
  /**
   * Gets the raider that the bell revealed.
   *
   * @return The raider
  */
  get entity(): Raider;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * {@inheritDoc}
   * 
   * This does not cancel the particle effects shown on the bell, only the entity.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface BellRevealRaiderEvent extends BlockEvent, Cancellable {}
/**
 * Called when a Target Block is hit by a projectile.
 * 
 * Cancelling this event will stop the Target from emitting a redstone signal,
 * and in the case that the shooter is a player, will stop them from receiving
 * advancement criteria.
*/
export class TargetHitEvent extends ProjectileHitEvent {
  constructor(projectile: Projectile, block: Block, blockFace: BlockFace, signalStrength: number);
  /**
   * Gets the strength of the redstone signal to be emitted by the Target block
   *
   * @return the strength of the redstone signal to be emitted
  */
  get signalStrength(): number;
  /**
   * Sets the strength of the redstone signal to be emitted by the Target block
   *
   * @param signalStrength the strength of the redstone signal to be emitted
  */
  set signalStrength(signalStrength: number);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when the {@link EnderDragon} is defeated (killed) in a {@link DragonBattle},
 * causing a {@link Material#DRAGON_EGG} (more formally: {@link #getNewState()})
 * to possibly appear depending on {@link #isCancelled()}.
 * 
 * This event might be cancelled by default depending on
 * e.g. {@link DragonBattle#hasBeenPreviouslyKilled()} and server configuration.
*/
export class DragonEggFormEvent extends BlockFormEvent {
  constructor(block: Block, newState: BlockState, dragonBattle: DragonBattle);
  /**
   * Gets the {@link DragonBattle} associated with this event.
   * Keep in mind that the {@link EnderDragon} is already dead
   * when this event is called.
   *
   * @return the dragon battle
  */
  get dragonBattle(): DragonBattle;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a bell is rung.
 *
 * @deprecated use {@link org.bukkit.event.block.BellRingEvent}
*/
export class BellRingEvent extends org_bukkit_event_block_BellRingEvent {
  constructor(block: Block, direction: BlockFace, entity: Entity | null);
}
/**
 * Called when the progress of a block break is updated.
*/
export class BlockBreakProgressUpdateEvent extends BlockEvent {
  constructor(block: Block, progress: number, entity: Entity);
  /**
   * The progress of the block break
   * 
   * The progress ranges from 0.0 - 1.0, where 0 is no damage and
   * 1.0 is the most damaged
   *
   * @return The progress of the block break
  */
  get progress(): number;
  /**
   * The entity breaking the block.
   *
   * @return The entity breaking the block
  */
  get entity(): Entity;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a block tries to dispense an item, but its inventory is empty.
*/
export class BlockFailedDispenseEvent extends BlockEvent {
  constructor(theBlock: Block);
  /**
   * @return if the effect should be played
  */
  shouldPlayEffect(): boolean;
  /**
   * Sets if the effect for empty dispensers should be played
   *
   * @param playEffect if the effect should be played
  */
  shouldPlayEffect(playEffect: boolean): void;
  /**
   * @return {@link #shouldPlayEffect()}
  */
  callEvent(): boolean;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a beacon is deactivated, either because its base block(s) or itself were destroyed.
*/
export class BeaconDeactivatedEvent extends BlockEvent {
  constructor(block: Block);
  /**
   * Returns the beacon that was deactivated.
   * This will return `null` if the beacon does not exist.
   * (which can occur after the deactivation of a now broken beacon)
   *
   * @return The beacon that got deactivated, or `null` if it does not exist.
  */
  get beacon(): Beacon | null;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when an item is about to be composted by a hopper.
 * To prevent hoppers from moving items into composters, cancel the {@link InventoryMoveItemEvent}.
*/
export class CompostItemEvent extends BlockEvent {
  constructor(composter: Block, item: ItemStack, willRaiseLevel: boolean);
  /**
   * Gets the item that was used on the composter.
   *
   * @return the item
  */
  get item(): ItemStack;
  /**
   * Gets whether the composter will rise a level.
   *
   * @return `true` if successful
  */
  willRaiseLevel(): boolean;
  /**
   * Sets whether the composter will rise a level.
   *
   * @param willRaiseLevel `true` if the composter should rise a level
  */
  setWillRaiseLevel(willRaiseLevel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
/**
 * Called when a player uses shears on a block.
 * 
 * This event is not called when a player breaks blocks with shears, but rather when a
 * player uses the shears on a block to collect drops from it and/or modify its state.
 * 
 * Examples include shearing a pumpkin to turn it into a carved pumpkin or shearing a beehive to get honeycomb.
*/
export class PlayerShearBlockEvent extends PlayerEvent {
  constructor(player: Player, block: Block, item: ItemStack, hand: EquipmentSlot, drops: ItemStack[]);
  /**
   * Gets the block being sheared in this event.
   *
   * @return The {@link Block} which block is being sheared in this event.
  */
  get block(): Block;
  /**
   * Gets the item used to shear the block.
   *
   * @return The {@link ItemStack} of the shears.
  */
  get item(): ItemStack;
  /**
   * Gets the hand used to shear the block.
   *
   * @return Either {@link EquipmentSlot#HAND} OR {@link EquipmentSlot#OFF_HAND}.
  */
  get hand(): EquipmentSlot;
  /**
   * Gets the resulting drops of this event.
   *
   * @return A mutable {@link List list} of {@link ItemStack items} that will be dropped as result of this event.
  */
  get drops(): ItemStack[];
  /**
   * Gets whether the shearing of the block should be cancelled or not.
   *
   * @return Whether the shearing of the block should be cancelled or not.
  */
  isCancelled(): boolean;
  /**
   * Sets whether the shearing of the block should be cancelled or not.
   *
   * @param cancel whether the shearing of the block should be cancelled or not.
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface PlayerShearBlockEvent extends PlayerEvent, Cancellable {}
/**
 * Called when the server tries to check the lock on a lockable block entity.
 * 
 * See {@link #setResult(Result)} to change behavior
*/
export class BlockLockCheckEvent extends BlockEvent {
  constructor(block: Block, player: Player, lockedMessage: Component, lockedSound: Sound);
  /**
   * Gets the snapshot {@link LockableTileState} of the block entity
   * whose lock is being checked.
   *
   * @return the snapshot block state.
  */
  get blockState(): LockableTileState;
  /**
   * Get the player involved this lock check.
   *
   * @return the player
  */
  get player(): Player;
  /**
   * Gets the itemstack that will be used as the key itemstack. Initially
   * this will be the item in the player's main hand but an override can be set
   * with {@link #setKeyItem(ItemStack)}. Use {@link #isUsingCustomKeyItemStack()}
   * to check if a custom key stack has been set.
   *
   * @return the item being used as the key item
   * @see #isUsingCustomKeyItemStack()
  */
  get keyItem(): ItemStack;
  /**
   * Sets the itemstack that will be used as the key item.
   *
   * @param stack the stack to use as a key
   * @see #resetKeyItem() to clear a custom key item
  */
  set keyItem(keyItem: ItemStack);
  /**
   * Reset the key stack to the default (the player's main hand).
  */
  resetKeyItem(): void;
  /**
   * Checks if a custom key stack has been set.
   *
   * @return `true` if a custom key itemstack has been set
  */
  isUsingCustomKeyItemStack(): boolean;
  /**
   * Gets the result of this event.
   *
   * @return the result
   * @see #setResult(Result)
  */
  get result(): Result;
  /**
   * Gets the result of this event. {@link Result#DEFAULT} is the default
   * allowing the vanilla logic to check the lock of this block. Set to {@link Result#ALLOW}
   * or {@link Result#DENY} to override that behavior.
   * 
   * Setting this to {@link Result#ALLOW} bypasses the spectator check.
   *
   * @param result the result of this event
  */
  set result(result: Result);
  /**
   * Shorthand method to set the {@link #getResult()} to {@link Result#DENY},
   * the locked message and locked sound.
   *
   * @param lockedMessage the message to show if locked (or `null` for none)
   * @param lockedSound   the sound to play if locked (or `null` for none)
  */
  denyWithMessageAndSound(lockedMessage: Component | null, lockedSound: Sound | null): void;
  /**
   * Gets the locked message that will be sent if the
   * player cannot open the block.
   *
   * @return the locked message (or `null` if none)
  */
  get lockedMessage(): Component | null;
  /**
   * Sets the locked message that will be sent if the
   * player cannot open the block.
   *
   * @param lockedMessage the locked message (or `null` for none)
  */
  set lockedMessage(lockedMessage: Component | null);
  /**
   * Gets the locked sound that will play if the
   * player cannot open the block.
   *
   * @return the locked sound (or `null` if none)
  */
  get lockedSound(): Sound | null;
  /**
   * Sets the locked sound that will play if the
   * player cannot open the block.
   *
   * @param lockedSound the locked sound (or `null` for none)
  */
  set lockedSound(lockedSound: Sound | null);
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.types' {
import { LifecycleEventHandlerConfiguration } from 'io.papermc.paper.plugin.lifecycle.event.handler.configuration';
import { LifecycleEventOwner } from 'io.papermc.paper.plugin.lifecycle.event';
import { Commands } from 'io.papermc.paper.command.brigadier';
import { ReloadableRegistrarEvent, RegistrarEvent } from 'io.papermc.paper.plugin.lifecycle.event.registrar';
import { RegistryKey } from 'io.papermc.paper.registry';
import { PostFlattenTagRegistrar, PreFlattenTagRegistrar } from 'io.papermc.paper.tag';
import { LifecycleEventHandler } from 'io.papermc.paper.plugin.lifecycle.event.handler';
import { BootstrapContext } from 'io.papermc.paper.plugin.bootstrap';
import { DatapackRegistrar } from 'io.papermc.paper.datapack';
import { Prioritizable } from 'io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType';
/**
 * Provides event types for tag registration.
 *
 * @see PreFlattenTagRegistrar
 * @see PostFlattenTagRegistrar
*/
export class TagEventTypeProvider {
  /**
   * Get a prioritizable, reloadable registrar event for tags before they are flattened.
   *
   * @param registryKey the registry key for the tag type
   * @return the registry event type
   * @param  the type of value in the tag
   * @see PreFlattenTagRegistrar
  */
  preFlatten<T>(registryKey: RegistryKey<T>): Prioritizable<BootstrapContext,ReloadableRegistrarEvent<PreFlattenTagRegistrar<T>>>;
  /**
   * Get a prioritizable, reloadable registrar event for tags after they are flattened.
   *
   * @param registryKey the registry key for the tag type
   * @return the registry event type
   * @param  the type of value in the tag
   * @see PostFlattenTagRegistrar
  */
  postFlatten<T>(registryKey: RegistryKey<T>): Prioritizable<BootstrapContext,ReloadableRegistrarEvent<PostFlattenTagRegistrar<T>>>;
}
/**
 * Holds various types of lifecycle events for
 * use when creating event handler configurations
 * in {@link LifecycleEventManager}.
*/
export class LifecycleEvents {
  /**
   * This event is for registering commands to the server's brigadier command system. You can register a handler for this event in
   * {@link org.bukkit.plugin.java.JavaPlugin#onEnable()} or {@link io.papermc.paper.plugin.bootstrap.PluginBootstrap#bootstrap(BootstrapContext)}.
   * @see Commands an example of a command being registered
  */
  static readonly COMMANDS: Prioritizable<LifecycleEventOwner,ReloadableRegistrarEvent<Commands>>;
  /**
   * These events are for registering tags to the server's tag system. You can register a handler for these events
   * only in {@link io.papermc.paper.plugin.bootstrap.PluginBootstrap#bootstrap(BootstrapContext)}.
  */
  static readonly TAGS: TagEventTypeProvider;
  /**
   * This event is for informing the server about any available datapacks from other sources such as inside a plugin's jar. You
   * can register a handler for this event only in {@link io.papermc.paper.plugin.bootstrap.PluginBootstrap#bootstrap(BootstrapContext)}.
   * @see DatapackRegistrar an example of a datapack being discovered
  */
  static readonly DATAPACK_DISCOVERY: Prioritizable<BootstrapContext,RegistrarEvent<DatapackRegistrar>>;
}
/**
 * Base type for all types of lifecycle events. Differs from
 * {@link LifecycleEvent} which is the actual event object, whereas
 * this is an object representing the type of the event. Used
 * to construct subtypes of {@link LifecycleEventHandlerConfiguration} for
 * use in {@link LifecycleEventManager}
 *
 * @param  the required owner type
 * @param  the event object type
 * @param  the configuration type
*/
export class LifecycleEventType<O, E, C> {
  /**
   * Gets the name of the lifecycle event.
   *
   * @return the name
  */
  name(): string;
  /**
   * Create a configuration for this event with the specified
   * handler.
   *
   * @param handler the event handler
   * @return a new configuration
   * @see LifecycleEventManager#registerEventHandler(LifecycleEventHandlerConfiguration)
  */
  newHandler(handler: LifecycleEventHandler<any>): C;
}

}
declare module 'io.papermc.paper.brigadier' {
import { ComponentLike, Component } from 'net.kyori.adventure.text';
import { Message } from 'com.mojang.brigadier';
/**
 * Helper methods to bridge the gaps between Brigadier and Paper-MojangAPI.
 * @deprecated for removal. See {@link MessageComponentSerializer} for a direct replacement of functionality found in
 * this class.
 * As a general entrypoint to brigadier on paper, see {@link io.papermc.paper.command.brigadier.Commands}.
*/
export class PaperBrigadier {
  /**
   * Create a new Brigadier {@link Message} from a {@link ComponentLike}.
   *
   * Mostly useful for creating rich suggestion tooltips in combination with other Paper-MojangAPI APIs.
   *
   * @param componentLike The {@link ComponentLike} to use for the {@link Message} contents
   * @return A new Brigadier {@link Message}
  */
  static message(componentLike: ComponentLike): Message;
  /**
   * Create a new {@link Component} from a Brigadier {@link Message}.
   *
   * If the {@link Message} was created from a {@link Component}, it will simply be
   * converted back, otherwise a new {@link TextComponent} will be created with the
   * content of {@link Message#getString()}
   *
   * @param message The {@link Message} to create a {@link Component} from
   * @return The created {@link Component}
  */
  static componentFromMessage(message: Message): Component;
}

}
declare module 'io.papermc.paper.datacomponent.item.BannerPatternLayers' {
import { Pattern } from 'org.bukkit.block.banner';
import { List } from 'java.util';
import { BannerPatternLayers } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link BannerPatternLayers}.
*/
export class Builder extends DataComponentBuilder<BannerPatternLayers> {
  /**
   * Adds a pattern to the banner.
   *
   * @param pattern the pattern
   * @return the builder for chaining
   * @see #patterns()
  */
  add(pattern: Pattern): Builder;
  /**
   * Adds multiple patterns to the banner.
   *
   * @param patterns the patterns
   * @return the builder for chaining
   * @see #patterns()
  */
  addAll(patterns: Pattern[]): Builder;
}

}
declare module 'io.papermc.paper.inventory.tooltip' {
/**
 * Context for computing itemstack tooltips via
 * {@link org.bukkit.inventory.ItemStack#computeTooltipLines(TooltipContext, Player)}
*/
export class TooltipContext {
  /**
   * Creates a new context with the given advanced and creative
   * mode settings.
   *
   * @param advanced whether the context is for advanced tooltips
   * @param creative whether the context is for the creative inventory
   * @return a new context
  */
  static create(advanced: boolean, creative: boolean): TooltipContext;
  /**
   * Creates a new context that is neither advanced nor creative.
   *
   * @return a new context
  */
  static create(): TooltipContext;
  /**
   * Returns whether the context is for advanced
   * tooltips.
   * 
   * Advanced tooltips are shown by default
   * when a player has `F3+H` enabled.
   *
   * @return true if for advanced tooltips
  */
  isAdvanced(): boolean;
  /**
   * Returns whether the context is for the creative
   * mode inventory.
   * 
   * Creative tooltips are shown by default when a player is
   * in the creative inventory.
   *
   * @return true if for creative mode inventory
  */
  isCreative(): boolean;
  /**
   * Returns a new context with {@link #isAdvanced()}
   * set to true.
   *
   * @return a new context
  */
  asAdvanced(): TooltipContext;
  /**
   * Returns a new context with {@link #isCreative()}
   * set to true.
   *
   * @return a new context
  */
  asCreative(): TooltipContext;
}

}
declare module 'io.papermc.paper.event.entity.EntityEquipmentChangedEvent' {
import { ItemStack } from 'org.bukkit.inventory';
/**
 * Represents a change in equipment for a single equipment slot.
*/
export class EquipmentChange {
  /**
   * Gets the existing item that is being replaced.
   *
   * @return the existing item
  */
  oldItem(): ItemStack;
  /**
   * Gets the new item that is replacing the existing item.
   *
   * @return the new item
  */
  newItem(): ItemStack;
}

}
declare module 'io.papermc.paper.datacomponent.item.LodestoneTracker' {
import { LodestoneTracker } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { Location } from 'org.bukkit';
/**
 * Builder for {@link LodestoneTracker}.
*/
export class Builder extends DataComponentBuilder<LodestoneTracker> {
  /**
   * Sets the location to point towards for this builder.
   *
   * @param location location to point towards
   * @return the builder for chaining
   * @see #location()
  */
  location(location: Location | null): Builder;
  /**
   * Sets if this location lodestone is tracked for this builder.
   *
   * @param tracked is tracked
   * @return the builder for chaining
   * @see #tracked()
  */
  tracked(tracked: boolean): Builder;
}

}
declare module 'io.papermc.paper.event.server' {
import { Cause } from 'io.papermc.paper.event.server.ServerResourcesReloadedEvent';
import { WhitelistStatus } from 'io.papermc.paper.event.server.WhitelistStateUpdateEvent';
import { ServerEvent } from 'org.bukkit.event.server';
import { HandlerList, Cancellable, Event } from 'org.bukkit.event';
import { PlayerProfile } from 'com.destroystokyo.paper.profile';
import { OfflinePlayer } from 'org.bukkit';
/**
 * This event gets called when the whitelist status of a player is changed
*/
export class WhitelistStateUpdateEvent extends Event {
  constructor(playerProfile: PlayerProfile, status: WhitelistStatus);
  /**
   * Gets the player whose whitelist status is being changed
   *
   * @return the player whose status is being changed
  */
  get player(): OfflinePlayer;
  /**
   * Gets the player profile whose whitelist status is being changed
   *
   * @return the player profile whose status is being changed
  */
  get playerProfile(): PlayerProfile;
  /**
   * Gets the status change of the player profile
   *
   * @return the whitelist status
  */
  get status(): WhitelistStatus;
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface WhitelistStateUpdateEvent extends Event, Cancellable {}
/**
 * Called when resources such as datapacks are reloaded (e.g. /minecraft:reload)
 * 
 * Intended for use to re-register custom recipes, advancements that may be lost during a reload like this.
*/
export class ServerResourcesReloadedEvent extends ServerEvent {
  static readonly HANDLER_LIST: HandlerList;
  constructor(cause: Cause);
  /**
   * Gets the cause of the resource reload.
   *
   * @return the reload cause
  */
  get cause(): Cause;
  static get handlerList(): HandlerList;
  get handlers(): HandlerList;
}

}
declare module 'io.papermc.paper.event.player.PlayerLecternPageChangeEvent' {
import { Enum } from 'java.lang';
export class PageChangeDirection extends Enum<PageChangeDirection> {
  static readonly LEFT: PageChangeDirection;
  static readonly RIGHT: PageChangeDirection;
  static valueOf(name: string): PageChangeDirection;
  static values(): PageChangeDirection[];
}

}
declare module 'io.papermc.paper.command.brigadier.argument.resolvers' {
import { CommandSourceStack } from 'io.papermc.paper.command.brigadier';
import { Collection } from 'java.util';
import { BlockPosition, FinePosition, Rotation } from 'io.papermc.paper.math';
import { PlayerProfile } from 'com.destroystokyo.paper.profile';
/**
 * An {@link ArgumentResolver} that's capable of resolving
 *  argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#playerProfiles()
*/
export class PlayerProfileListResolver extends ArgumentResolver<Collection<PlayerProfile>> {

}
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * a rotation argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#rotation()
*/
export class RotationResolver extends ArgumentResolver<Rotation> {

}
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * a block position argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#blockPosition()
*/
export class BlockPositionResolver extends ArgumentResolver<BlockPosition> {

}
/**
 * An {@link ArgumentResolver} that's capable of resolving
 * a fine position argument value using a {@link CommandSourceStack}.
 *
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#finePosition()
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes#finePosition(boolean)
*/
export class FinePositionResolver extends ArgumentResolver<FinePosition> {

}
/**
 * An {@link ArgumentResolver} is capable of resolving
 * an argument value using a {@link CommandSourceStack}.
 *
 * @param  resolved type
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes
*/
export class ArgumentResolver<T> {
  /**
   * Resolves the argument with the given
   * command source stack.
   * @param sourceStack source stack
   * @return resolved
  */
  resolve(sourceStack: CommandSourceStack): T;
}

}
declare module 'io.papermc.paper.event.server.ServerResourcesReloadedEvent' {
import { Enum } from 'java.lang';
export class Cause extends Enum<Cause> {
  static readonly COMMAND: Cause;
  static readonly PLUGIN: Cause;
  static valueOf(name: string): Cause;
  static values(): Cause[];
}

}
declare module 'io.papermc.paper.command.brigadier.argument.range' {
import { Comparable } from 'java.lang';
import { Range } from 'com.google.common.collect';
/**
 * A provider for a range of numbers
 *
 * @param 
 * @see io.papermc.paper.command.brigadier.argument.ArgumentTypes
*/
export class RangeProvider<T> {
  /**
   * Provides the given range.
   * @return range
  */
  range(): Range<T>;
}

}
declare module 'io.papermc.paper.datacomponent.item.JukeboxPlayable' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { JukeboxPlayable } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { JukeboxSong } from 'org.bukkit';
/**
 * Builder for {@link JukeboxPlayable}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Sets the jukebox song.
   *
   * @param song the song
   * @return the builder for chaining
   * @see #jukeboxSong()
  */
  jukeboxSong(song: JukeboxSong): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<JukeboxPlayable> {}

}
declare module 'io.papermc.paper.datacomponent.item.ItemLore' {
import { ComponentLike } from 'net.kyori.adventure.text';
import { List } from 'java.util';
import { ItemLore } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link ItemLore}.
*/
export class Builder extends DataComponentBuilder<ItemLore> {
  /**
   * Sets the components of this lore.
   *
   * @param lines components
   * @return the builder for chaining
   * @see #lines()
  */
  lines(lines: ComponentLike[]): Builder;
  /**
   * Adds a component to the lore.
   *
   * @param line component
   * @return the builder for chaining
   * @see #lines()
  */
  addLine(line: ComponentLike): Builder;
  /**
   * Adds components to the lore.
   *
   * @param lines components
   * @return the builder for chaining
   * @see #lines()
  */
  addLines(lines: ComponentLike[]): Builder;
}

}
declare module 'io.papermc.paper.command.brigadier.argument.CustomArgumentType' {
import { CustomArgumentType } from 'io.papermc.paper.command.brigadier.argument';
import { StringReader } from 'com.mojang.brigadier';
/**
 * An argument type that wraps around a native-to-vanilla argument type.
 * This argument receives special handling in that the native argument type will
 * be sent to the client for possible client-side completions and syntax validation.
 * 
 * The parsed native type will be converted via {@link #convert(Object)}.
 * Implement {@link CustomArgumentType} if you want to handle parsing the type manually.
 *
 * @param  custom type
 * @param  type with an argument native to vanilla Minecraft (from {@link ArgumentTypes})
*/
export class Converted<T> extends CustomArgumentType<T,N> {
  parse(reader: StringReader): T;
  parse<S>(reader: StringReader, source: S): T;
  /**
   * Converts the value from the native type to the custom argument type.
   *
   * @param nativeType native argument provided value
   * @return converted value
   * @throws CommandSyntaxException if an exception occurs while parsing
   * @see #convert(Object, Object)
  */
  convert(nativeType: N): T;
  /**
   * Converts the value from the native type to the custom argument type.
   * 
   * This method provides the command source for additional context when converting. You
   * may have to do your own `instanceof` checks for {@link io.papermc.paper.command.brigadier.CommandSourceStack}.
   *
   * @param nativeType native argument provided value
   * @param source     source of the command
   * @return converted value
   * @throws CommandSyntaxException if an exception occurs while parsing
  */
  convert<S>(nativeType: N, source: S): T;
}

}
declare module 'io.papermc.paper.text' {
import { Component } from 'net.kyori.adventure.text';
import { PlainTextComponentSerializer, PlainComponentSerializer } from 'net.kyori.adventure.text.serializer.plain';
import { CommandSender } from 'org.bukkit.command';
import { LegacyComponentSerializer } from 'net.kyori.adventure.text.serializer.legacy';
import { GsonComponentSerializer } from 'net.kyori.adventure.text.serializer.gson';
import { ComponentFlattener } from 'net.kyori.adventure.text.flattener';
import { Entity } from 'org.bukkit.entity';
/**
 * Paper API-specific methods for working with {@link Component}s and related.
*/
export class PaperComponents {
  /**
   * Resolves a component with a specific command sender and subject.
   * 
   * Note that in Vanilla, elevated permissions are usually required to use
   * '@' selectors in various component types, but this method should not
   * check such permissions from the sender.
   * 
   * A {@link CommandSender} argument is required to resolve:
   * 
   *     {@link net.kyori.adventure.text.NBTComponent}
   *     {@link net.kyori.adventure.text.ScoreComponent}
   *     {@link net.kyori.adventure.text.SelectorComponent}
   * 
   * A {@link Entity} argument is optional to help resolve:
   * 
   *     {@link net.kyori.adventure.text.ScoreComponent}
   * 
   * {@link net.kyori.adventure.text.TranslatableComponent}s don't require any extra arguments.
   *
   * @param input the component to resolve
   * @param context the command sender to resolve with
   * @param scoreboardSubject the scoreboard subject to use (for use with {@link net.kyori.adventure.text.ScoreComponent}s)
   * @return the resolved component
   * @throws IOException if a syntax error tripped during resolving
  */
  static resolveWithContext(input: Component, context: CommandSender | null, scoreboardSubject: Entity | null): Component;
  /**
   * Resolves a component with a specific command sender and subject.
   * 
   * Note that in Vanilla, elevated permissions are required to use
   * '@' selectors in various component types. If the boolean `bypassPermissions`
   * argument is `false`, the {@link CommandSender} argument will be used to query
   * those permissions.
   * 
   * A {@link CommandSender} argument is required to resolve:
   * 
   *     {@link net.kyori.adventure.text.NBTComponent}
   *     {@link net.kyori.adventure.text.ScoreComponent}
   *     {@link net.kyori.adventure.text.SelectorComponent}
   * 
   * A {@link Entity} argument is optional to help resolve:
   * 
   *     {@link net.kyori.adventure.text.ScoreComponent}
   * 
   * {@link net.kyori.adventure.text.TranslatableComponent}s don't require any extra arguments.
   *
   * @param input the component to resolve
   * @param context the command sender to resolve with
   * @param scoreboardSubject the scoreboard subject to use (for use with {@link net.kyori.adventure.text.ScoreComponent}s)
   * @param bypassPermissions true to bypass permissions checks for resolving components
   * @return the resolved component
   * @throws IOException if a syntax error tripped during resolving
  */
  static resolveWithContext(input: Component, context: CommandSender | null, scoreboardSubject: Entity | null, bypassPermissions: boolean): Component;
  /**
   * Return a component flattener that can use game data to resolve extra information about components.
   *
   * @return a component flattener
  */
  static flattener(): ComponentFlattener;
  /**
   * Get a serializer for {@link Component}s that will convert components to
   * a plain-text string.
   *
   * Implementations may provide a serializer capable of processing any
   * information that requires access to implementation details.
   *
   * @return a serializer to plain text
   * @deprecated will be removed in adventure 5.0.0, use {@link PlainTextComponentSerializer#plainText()}
  */
  static plainSerializer(): PlainComponentSerializer;
  /**
   * Get a serializer for {@link Component}s that will convert components to
   * a plain-text string.
   *
   * Implementations may provide a serializer capable of processing any
   * information that requires access to implementation details.
   *
   * @return a serializer to plain text
   * @deprecated use {@link PlainTextComponentSerializer#plainText()}
  */
  static plainTextSerializer(): PlainTextComponentSerializer;
  /**
   * Get a serializer for {@link Component}s that will convert to and from the
   * standard JSON serialization format using Gson.
   *
   * Implementations may provide a serializer capable of processing any
   * information that requires implementation details, such as legacy
   * (pre-1.16) hover events.
   *
   * @return a json component serializer
   * @deprecated use {@link GsonComponentSerializer#gson()}
  */
  static gsonSerializer(): GsonComponentSerializer;
  /**
   * Get a serializer for {@link Component}s that will convert to and from the
   * standard JSON serialization format using Gson, downsampling any RGB colors
   * to their nearest {@link NamedTextColor} counterpart.
   *
   * Implementations may provide a serializer capable of processing any
   * information that requires implementation details, such as legacy
   * (pre-1.16) hover events.
   *
   * @return a json component serializer
   * @deprecated use {@link GsonComponentSerializer#colorDownsamplingGson()}
  */
  static colorDownsamplingGsonSerializer(): GsonComponentSerializer;
  /**
   * Get a serializer for {@link Component}s that will convert to and from the
   * legacy component format used by Bukkit. This serializer uses the
   * {@link LegacyComponentSerializer.Builder#useUnusualXRepeatedCharacterHexFormat()}
   * option to match upstream behavior.
   *
   * This legacy serializer uses the standard section symbol to mark
   * formatting characters.
   *
   * Implementations may provide a serializer capable of processing any
   * information that requires access to implementation details.
   *
   * @return a section serializer
   * @deprecated use {@link LegacyComponentSerializer#legacySection()}
  */
  static legacySectionSerializer(): LegacyComponentSerializer;
}

}
declare module 'io.papermc.paper.event.player.PlayerItemFrameChangeEvent' {
import { Enum } from 'java.lang';
export class ItemFrameChangeAction extends Enum<ItemFrameChangeAction> {
  static readonly PLACE: ItemFrameChangeAction;
  static readonly REMOVE: ItemFrameChangeAction;
  static readonly ROTATE: ItemFrameChangeAction;
  static valueOf(name: string): ItemFrameChangeAction;
  static values(): ItemFrameChangeAction[];
}

}
declare module 'io.papermc.paper.datacomponent.item.ItemArmorTrim' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { ItemArmorTrim } from 'io.papermc.paper.datacomponent.item';
import { ArmorTrim } from 'org.bukkit.inventory.meta.trim';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link ItemArmorTrim}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Sets the armor trim for this builder.
   *
   * @param armorTrim trim
   * @return the builder for chaining
   * @see #armorTrim()
  */
  armorTrim(armorTrim: ArmorTrim): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<ItemArmorTrim> {}

}
declare module 'io.papermc.paper.datacomponent.item.FoodProperties' {
import { FoodProperties } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link FoodProperties}.
*/
export class Builder extends DataComponentBuilder<FoodProperties> {
  /**
   * Set if this food can always be eaten, even if the
   * player is not hungry.
   *
   * @param canAlwaysEat true to allow always eating
   * @return the builder for chaining
   * @see #canAlwaysEat()
  */
  canAlwaysEat(canAlwaysEat: boolean): Builder;
  /**
   * Sets the saturation of the food.
   *
   * @param saturation the saturation
   * @return the builder for chaining
   * @see #saturation()
  */
  saturation(saturation: number): Builder;
  /**
   * Sets the nutrition of the food.
   *
   * @param nutrition the nutrition, must be non-negative
   * @return the builder for chaining
   * @see #nutrition()
  */
  nutrition(nutrition: number): Builder;
}

}
declare module 'io.papermc.paper.raytracing' {
import { Enum } from 'java.lang';
import { Vector } from 'org.bukkit.util';
import { Predicate } from 'java.util.function';
import { FluidCollisionMode, Location } from 'org.bukkit';
/**
 * A builder for configuring a raytrace with a starting location
 * and direction.
*/
export class PositionedRayTraceConfigurationBuilder {
  /**
   * Sets the starting location.
   *
   * @param start the new starting location
   * @return a reference to this object
  */
  start(start: Location): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the direction.
   *
   * @param direction the new direction
   * @return a reference to this object
  */
  direction(direction: Vector): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the maximum distance.
   *
   * @param maxDistance the new maxDistance
   * @return a reference to this object
  */
  maxDistance(maxDistance: number): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the FluidCollisionMode when looking for block collisions.
   * 
   * If collisions with passable blocks are ignored, fluid collisions are
   * ignored as well regardless of the fluid collision mode.
   *
   * @param fluidCollisionMode the new FluidCollisionMode
   * @return a reference to this object
  */
  fluidCollisionMode(fluidCollisionMode: FluidCollisionMode): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets whether the raytrace should ignore passable blocks when looking for
   * block collisions.
   * 
   * If collisions with passable blocks are ignored, fluid collisions are
   * ignored as well regardless of the fluid collision mode.
   * 
   * Portal blocks are only considered passable if the ray starts within them.
   * Apart from that collisions with portal blocks will be considered even if
   * collisions with passable blocks are otherwise ignored.
   *
   * @param ignorePassableBlocks if the raytrace should ignore passable blocks
   * @return a reference to this object
  */
  ignorePassableBlocks(ignorePassableBlocks: boolean): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the size of the raytrace when looking for entity collisions.
   *
   * @param raySize the new raytrace size
   * @return a reference to this object
  */
  raySize(raySize: number): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the current entity filter when looking for entity collisions.
   *
   * @param entityFilter predicate for entities the ray can potentially collide with
   * @return a reference to this object
  */
  entityFilter(entityFilter: Predicate<any>): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the current block filter when looking for block collisions.
   *
   * @param blockFilter predicate for blocks the ray can potentially collide with
   * @return a reference to this object
  */
  blockFilter(blockFilter: Predicate<any>): PositionedRayTraceConfigurationBuilder;
  /**
   * Sets the targets for the rayTrace.
   *
   * @param first the first target
   * @param others the other targets
   * @return a reference to this object
  */
  targets(first: RayTraceTarget, ...others: RayTraceTarget[]): PositionedRayTraceConfigurationBuilder;
}
/**
 * List of Targets a builder can target.
*/
export class RayTraceTarget extends Enum<RayTraceTarget> {
  static readonly ENTITY: RayTraceTarget;
  static readonly BLOCK: RayTraceTarget;
  static valueOf(name: string): RayTraceTarget;
  static values(): RayTraceTarget[];
}

}
declare module 'io.papermc.paper.datacomponent.item.MapDecorations' {
import { Type } from 'org.bukkit.map.MapCursor';
import { Map } from 'java.util';
import { MapDecorations } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Decoration present on the map.
*/
export class DecorationEntry {
  /**
   * Type of decoration.
   *
   * @return type
  */
  type(): Type;
  /**
   * X world coordinate of the decoration.
   *
   * @return x coordinate
  */
  x(): number;
  /**
   * Z world coordinate of the decoration.
   *
   * @return z coordinate
  */
  z(): number;
  /**
   * Clockwise rotation from north in degrees.
   *
   * @return rotation
  */
  rotation(): number;
}
/**
 * Builder for {@link MapDecorations}.
*/
export class Builder extends DataComponentBuilder<MapDecorations> {
  /**
   * Puts the decoration with the given id in this builder.
   *
   * @param id id
   * @param entry decoration
   * @return the builder for chaining
   * @see #decorations()
  */
  put(id: string, entry: DecorationEntry): Builder;
  /**
   * Puts all the decoration with the given id in this builder.
   *
   * @param entries decorations
   * @return the builder for chaining
   * @see #decorations()
  */
  putAll(entries: Map<string,DecorationEntry>): Builder;
}

}
declare module 'io.papermc.paper.command' {
import { Component } from 'net.kyori.adventure.text';
export class CommandBlockHolder {
  /**
   * Gets the command that this CommandBlock will run when powered.
   * This will never return null.  If the CommandBlock does not have a
   * command, an empty String will be returned instead.
   *
   * @return Command that this CommandBlock will run when activated.
  */
  get command(): string;
  /**
   * Sets the command that this CommandBlock will run when powered.
   * Setting the command to null is the same as setting it to an empty
   * String.
   *
   * @param command Command that this CommandBlock will run when activated.
  */
  set command(command: string | null);
  /**
   * Gets the last output from this command block.
   *
   * @return the last output
  */
  lastOutput(): Component;
  /**
   * Sets the last output from this command block.
   *
   * @param lastOutput the last output
  */
  lastOutput(lastOutput: Component | null): void;
  /**
   * Gets the success count from this command block.
   * @see Command_Block#Success_count
   *
   * @return the success count
  */
  get successCount(): number;
  /**
   * Sets the success count from this command block.
   * @see Command_Block#Success_count
   *
   * @param successCount the success count
  */
  set successCount(successCount: number);
}

}
declare module 'io.papermc.paper.event.world.border' {
import { HandlerList, Cancellable } from 'org.bukkit.event';
import { Type } from 'io.papermc.paper.event.world.border.WorldBorderBoundsChangeEvent';
import { WorldEvent } from 'org.bukkit.event.world';
import { WorldBorder, World, Location } from 'org.bukkit';
/**
 * Called when a world border's center is changed.
*/
export class WorldBorderCenterChangeEvent extends WorldBorderEvent {
  constructor(world: World, worldBorder: WorldBorder, oldCenter: Location, newCenter: Location);
  /**
   * Gets the original center location of the world border.
   *
   * @return the old center
  */
  get oldCenter(): Location;
  /**
   * Gets the new center location for the world border.
   *
   * @return the new center
  */
  get newCenter(): Location;
  /**
   * Sets the new center location for the world border. Y coordinate is ignored.
   *
   * @param newCenter the new center
  */
  set newCenter(newCenter: Location);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface WorldBorderCenterChangeEvent extends WorldBorderEvent, Cancellable {}
/**
 * Called when a world border changes its bounds, either over time, or instantly.
*/
export class WorldBorderBoundsChangeEvent extends WorldBorderEvent {
  constructor(world: World, worldBorder: WorldBorder, type: Type, oldSize: number, newSize: number, duration: number);
  /**
   * Gets if this change is an instant change or over-time change.
   *
   * @return the change type
  */
  get type(): Type;
  /**
   * Gets the old size or the world border.
   *
   * @return the old size
  */
  get oldSize(): number;
  /**
   * Gets the new size of the world border.
   *
   * @return the new size
  */
  get newSize(): number;
  /**
   * Sets the new size of the world border.
   *
   * @param newSize the new size
  */
  set newSize(newSize: number);
  /**
   * Gets the time in milliseconds for the change. Will be 0 if instant.
   *
   * @return the time in milliseconds for the change
  */
  get duration(): number;
  /**
   * Sets the time in milliseconds for the change. Will change {@link #getType()} to return
   * {@link Type#STARTED_MOVE}.
   *
   * @param duration the time in milliseconds for the change
  */
  set duration(duration: number);
  /**
   * Gets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins
   *
   * @return true if this event is cancelled
  */
  isCancelled(): boolean;
  /**
   * Sets the cancellation state of this event. A cancelled event will not
   * be executed in the server, but will still pass to other plugins.
   *
   * @param cancel true if you wish to cancel this event
  */
  setCancelled(cancel: boolean): void;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}
export interface WorldBorderBoundsChangeEvent extends WorldBorderEvent, Cancellable {}
export class WorldBorderEvent extends WorldEvent {
  get worldBorder(): WorldBorder;
}
/**
 * Called when a moving world border has finished its move.
*/
export class WorldBorderBoundsChangeFinishEvent extends WorldBorderEvent {
  constructor(world: World, worldBorder: WorldBorder, oldSize: number, newSize: number, duration: number);
  /**
   * Gets the old size of the worldborder.
   *
   * @return the old size
  */
  get oldSize(): number;
  /**
   * Gets the new size of the worldborder.
   *
   * @return the new size
  */
  get newSize(): number;
  /**
   * Gets the duration this worldborder took to make the change.
   * 
   * Can be 0 if handlers for {@link WorldBorderCenterChangeEvent} set the duration to 0.
   *
   * @return the duration of the transition
  */
  get duration(): number;
  get handlers(): HandlerList;
  static get handlerList(): HandlerList;
}

}
declare module 'io.papermc.paper.datacomponent.item.BlockItemDataProperties' {
import { BlockItemDataProperties } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link BlockItemDataProperties}.
*/
export class Builder extends DataComponentBuilder<BlockItemDataProperties> {

}

}
declare module 'io.papermc.paper.advancement' {
import { Component } from 'net.kyori.adventure.text';
import { Frame } from 'io.papermc.paper.advancement.AdvancementDisplay';
import { ItemStack } from 'org.bukkit.inventory';
import { NamespacedKey } from 'org.bukkit';
/**
 * Describes the display of an advancement.
 * 
 * The display is used in the chat, in the toast messages and the advancements
 * screen.
*/
export class AdvancementDisplay {
  /**
   * Gets the {@link Frame}.
   * 
   * This defines the appearance of the tile in the advancements screen and
   * the text when it's completed.
   *
   * @return the frame type
  */
  frame(): Frame;
  /**
   * Gets the advancement title.
   *
   * @return the title
  */
  title(): Component;
  /**
   * Gets the description.
   *
   * @return the description
  */
  description(): Component;
  /**
   * Gets the icon shown in the frame in the advancements screen.
   *
   * @return a copy of the icon
  */
  icon(): ItemStack;
  /**
   * Gets whether a toast should be displayed.
   * 
   * A toast is a notification that will be displayed in the top right corner
   * of the screen.
   *
   * @return `true` if a toast should be shown
  */
  doesShowToast(): boolean;
  /**
   * Gets whether a message should be sent in the chat.
   *
   * @return `true` if a message should be sent
   * @see org.bukkit.event.player.PlayerAdvancementDoneEvent#message() to edit
   * the message
  */
  doesAnnounceToChat(): boolean;
  /**
   * Gets whether this advancement is hidden.
   * 
   * Hidden advancements cannot be viewed by the player until they have been
   * unlocked.
   *
   * @return `true` if hidden
  */
  isHidden(): boolean;
  /**
   * Gets the texture displayed behind the advancement tree when selected.
   * 
   * This only affects root advancements without any parent. If the background
   * is not specified or doesn't exist, the tab background will be the missing
   * texture.
   *
   * @return the background texture path
  */
  backgroundPath(): NamespacedKey | null;
  /**
   * Gets the formatted display name for this display. This
   * is a part of the component that would be shown in chat when a player
   * completes the advancement.
   *
   * @return the display name
   * @see org.bukkit.advancement.Advancement#displayName()
  */
  displayName(): Component;
}

}
declare module 'io.papermc.paper.inventory' {
import { Enum } from 'java.lang';
import { TextColor } from 'net.kyori.adventure.text.format';
/**
 * @deprecated use {@link org.bukkit.inventory.ItemRarity} with {@link org.bukkit.inventory.meta.ItemMeta#getRarity()}
*/
export class ItemRarity extends Enum<ItemRarity> {
  static readonly COMMON: ItemRarity;
  static readonly UNCOMMON: ItemRarity;
  static readonly RARE: ItemRarity;
  static readonly EPIC: ItemRarity;
  static valueOf(name: string): ItemRarity;
  static values(): ItemRarity[];
  /**
   * Gets the color formatting associated with the rarity.
   * @return
  */
  get color(): TextColor;
}

}
declare module 'io.papermc.paper.registry.data.PaintingVariantRegistryEntry' {
import { Component } from 'net.kyori.adventure.text';
import { Key } from 'net.kyori.adventure.key';
import { PaintingVariantRegistryEntry } from 'io.papermc.paper.registry.data';
import { RegistryBuilder } from 'io.papermc.paper.registry';
import { Art } from 'org.bukkit';
/**
 * A mutable builder for the {@link PaintingVariantRegistryEntry} plugins may change in applicable registry events.
 * 
 * The following values are required for each builder:
 * 
 *     {@link #width(int)}
 *     {@link #height(int)}
 *     {@link #assetId(Key)}
 * 
*/
export class Builder extends PaintingVariantRegistryEntry {
  /**
   * Sets the width of the painting in blocks.
   *
   * @param width the width in blocks.
   * @return this builder instance.
   * @see PaintingVariantRegistryEntry#width()
   * @see Art#getBlockWidth()
  */
  width(width: number): Builder;
  /**
   * Sets the height of the painting in blocks.
   *
   * @param height the height in blocks.
   * @return this builder instance.
   * @see PaintingVariantRegistryEntry#height()
   * @see Art#getBlockHeight()
  */
  height(height: number): Builder;
  /**
   * Sets the title of the painting.
   *
   * @param title the title.
   * @return this builder instance.
   * @see PaintingVariantRegistryEntry#title()
   * @see Art#title()
  */
  title(title: Component | null): Builder;
  /**
   * Sets the author of the painting.
   *
   * @param author the author.
   * @return this builder instance.
   * @see PaintingVariantRegistryEntry#author()
   * @see Art#author()
  */
  author(author: Component | null): Builder;
  /**
   * Sets the asset id of the painting, which is the location of the sprite to use.
   *
   * @param assetId the asset id.
   * @return this builder instance.
   * @see PaintingVariantRegistryEntry#assetId()
   * @see Art#assetId()
  */
  assetId(assetId: Key): Builder;
}
export interface Builder extends PaintingVariantRegistryEntry, RegistryBuilder<Art> {}

}
declare module 'io.papermc.paper.registry.keys' {
import { StructureType, Structure } from 'org.bukkit.generator.structure';
import { Key } from 'net.kyori.adventure.key';
import { Attribute } from 'org.bukkit.attribute';
import { Enchantment } from 'org.bukkit.enchantments';
import { TrimMaterial, TrimPattern } from 'org.bukkit.inventory.meta.trim';
import { Type } from 'org.bukkit.entity.Cat';
import { MenuType, ItemType } from 'org.bukkit.inventory';
import { Art, Fluid, JukeboxSong, GameEvent, MusicInstrument, Sound } from 'org.bukkit';
import { PotionEffectType } from 'org.bukkit.potion';
import { Type as org_bukkit_map_MapCursor_Type } from 'org.bukkit.map.MapCursor';
import { Type as org_bukkit_entity_Villager_Type, Profession } from 'org.bukkit.entity.Villager';
import { DamageType } from 'org.bukkit.damage';
import { PatternType } from 'org.bukkit.block.banner';
import { Variant as org_bukkit_entity_Wolf_Variant } from 'org.bukkit.entity.Wolf';
import { TypedKey } from 'io.papermc.paper.registry';
import { Biome, BlockType } from 'org.bukkit.block';
import { Variant } from 'org.bukkit.entity.Frog';
/**
 * Vanilla keys for {@link RegistryKey#BANNER_PATTERN}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BannerPatternKeys {
  /**
   * `minecraft:base`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASE: TypedKey<PatternType>;
  /**
   * `minecraft:border`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BORDER: TypedKey<PatternType>;
  /**
   * `minecraft:bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICKS: TypedKey<PatternType>;
  /**
   * `minecraft:circle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CIRCLE: TypedKey<PatternType>;
  /**
   * `minecraft:creeper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER: TypedKey<PatternType>;
  /**
   * `minecraft:cross`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CROSS: TypedKey<PatternType>;
  /**
   * `minecraft:curly_border`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CURLY_BORDER: TypedKey<PatternType>;
  /**
   * `minecraft:diagonal_left`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAGONAL_LEFT: TypedKey<PatternType>;
  /**
   * `minecraft:diagonal_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAGONAL_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:diagonal_up_left`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAGONAL_UP_LEFT: TypedKey<PatternType>;
  /**
   * `minecraft:diagonal_up_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAGONAL_UP_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:flow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOW: TypedKey<PatternType>;
  /**
   * `minecraft:flower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER: TypedKey<PatternType>;
  /**
   * `minecraft:globe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOBE: TypedKey<PatternType>;
  /**
   * `minecraft:gradient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRADIENT: TypedKey<PatternType>;
  /**
   * `minecraft:gradient_up`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRADIENT_UP: TypedKey<PatternType>;
  /**
   * `minecraft:guster`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUSTER: TypedKey<PatternType>;
  /**
   * `minecraft:half_horizontal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HALF_HORIZONTAL: TypedKey<PatternType>;
  /**
   * `minecraft:half_horizontal_bottom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HALF_HORIZONTAL_BOTTOM: TypedKey<PatternType>;
  /**
   * `minecraft:half_vertical`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HALF_VERTICAL: TypedKey<PatternType>;
  /**
   * `minecraft:half_vertical_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HALF_VERTICAL_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:mojang`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOJANG: TypedKey<PatternType>;
  /**
   * `minecraft:piglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN: TypedKey<PatternType>;
  /**
   * `minecraft:rhombus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RHOMBUS: TypedKey<PatternType>;
  /**
   * `minecraft:skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKULL: TypedKey<PatternType>;
  /**
   * `minecraft:small_stripes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_STRIPES: TypedKey<PatternType>;
  /**
   * `minecraft:square_bottom_left`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SQUARE_BOTTOM_LEFT: TypedKey<PatternType>;
  /**
   * `minecraft:square_bottom_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SQUARE_BOTTOM_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:square_top_left`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SQUARE_TOP_LEFT: TypedKey<PatternType>;
  /**
   * `minecraft:square_top_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SQUARE_TOP_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:straight_cross`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRAIGHT_CROSS: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_bottom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_BOTTOM: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_center`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_CENTER: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_downleft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_DOWNLEFT: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_downright`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_DOWNRIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_left`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_LEFT: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_middle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_MIDDLE: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_right`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_RIGHT: TypedKey<PatternType>;
  /**
   * `minecraft:stripe_top`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPE_TOP: TypedKey<PatternType>;
  /**
   * `minecraft:triangle_bottom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIANGLE_BOTTOM: TypedKey<PatternType>;
  /**
   * `minecraft:triangle_top`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIANGLE_TOP: TypedKey<PatternType>;
  /**
   * `minecraft:triangles_bottom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIANGLES_BOTTOM: TypedKey<PatternType>;
  /**
   * `minecraft:triangles_top`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIANGLES_TOP: TypedKey<PatternType>;
  /**
   * Creates a key for {@link PatternType} in the registry `minecraft:banner_pattern`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<PatternType>;
}
/**
 * Vanilla keys for {@link RegistryKey#FLUID}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class FluidKeys {
  /**
   * `minecraft:empty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMPTY: TypedKey<Fluid>;
  /**
   * `minecraft:flowing_lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWING_LAVA: TypedKey<Fluid>;
  /**
   * `minecraft:flowing_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWING_WATER: TypedKey<Fluid>;
  /**
   * `minecraft:lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA: TypedKey<Fluid>;
  /**
   * `minecraft:water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER: TypedKey<Fluid>;
}
/**
 * Vanilla keys for {@link RegistryKey#PAINTING_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class PaintingVariantKeys {
  /**
   * `minecraft:alban`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALBAN: TypedKey<Art>;
  /**
   * `minecraft:aztec`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZTEC: TypedKey<Art>;
  /**
   * `minecraft:aztec2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZTEC2: TypedKey<Art>;
  /**
   * `minecraft:backyard`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BACKYARD: TypedKey<Art>;
  /**
   * `minecraft:baroque`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAROQUE: TypedKey<Art>;
  /**
   * `minecraft:bomb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOMB: TypedKey<Art>;
  /**
   * `minecraft:bouquet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOUQUET: TypedKey<Art>;
  /**
   * `minecraft:burning_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURNING_SKULL: TypedKey<Art>;
  /**
   * `minecraft:bust`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUST: TypedKey<Art>;
  /**
   * `minecraft:cavebird`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVEBIRD: TypedKey<Art>;
  /**
   * `minecraft:changing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHANGING: TypedKey<Art>;
  /**
   * `minecraft:cotan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COTAN: TypedKey<Art>;
  /**
   * `minecraft:courbet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COURBET: TypedKey<Art>;
  /**
   * `minecraft:creebet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEBET: TypedKey<Art>;
  /**
   * `minecraft:donkey_kong`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DONKEY_KONG: TypedKey<Art>;
  /**
   * `minecraft:earth`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EARTH: TypedKey<Art>;
  /**
   * `minecraft:endboss`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDBOSS: TypedKey<Art>;
  /**
   * `minecraft:fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FERN: TypedKey<Art>;
  /**
   * `minecraft:fighters`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIGHTERS: TypedKey<Art>;
  /**
   * `minecraft:finding`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FINDING: TypedKey<Art>;
  /**
   * `minecraft:fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE: TypedKey<Art>;
  /**
   * `minecraft:graham`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAHAM: TypedKey<Art>;
  /**
   * `minecraft:humble`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HUMBLE: TypedKey<Art>;
  /**
   * `minecraft:kebab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KEBAB: TypedKey<Art>;
  /**
   * `minecraft:lowmist`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOWMIST: TypedKey<Art>;
  /**
   * `minecraft:match`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MATCH: TypedKey<Art>;
  /**
   * `minecraft:meditative`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MEDITATIVE: TypedKey<Art>;
  /**
   * `minecraft:orb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORB: TypedKey<Art>;
  /**
   * `minecraft:owlemons`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OWLEMONS: TypedKey<Art>;
  /**
   * `minecraft:passage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PASSAGE: TypedKey<Art>;
  /**
   * `minecraft:pigscene`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGSCENE: TypedKey<Art>;
  /**
   * `minecraft:plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLANT: TypedKey<Art>;
  /**
   * `minecraft:pointer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POINTER: TypedKey<Art>;
  /**
   * `minecraft:pond`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POND: TypedKey<Art>;
  /**
   * `minecraft:pool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POOL: TypedKey<Art>;
  /**
   * `minecraft:prairie_ride`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRAIRIE_RIDE: TypedKey<Art>;
  /**
   * `minecraft:sea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEA: TypedKey<Art>;
  /**
   * `minecraft:skeleton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON: TypedKey<Art>;
  /**
   * `minecraft:skull_and_roses`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKULL_AND_ROSES: TypedKey<Art>;
  /**
   * `minecraft:stage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STAGE: TypedKey<Art>;
  /**
   * `minecraft:sunflowers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUNFLOWERS: TypedKey<Art>;
  /**
   * `minecraft:sunset`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUNSET: TypedKey<Art>;
  /**
   * `minecraft:tides`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TIDES: TypedKey<Art>;
  /**
   * `minecraft:unpacked`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNPACKED: TypedKey<Art>;
  /**
   * `minecraft:void`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VOID: TypedKey<Art>;
  /**
   * `minecraft:wanderer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WANDERER: TypedKey<Art>;
  /**
   * `minecraft:wasteland`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WASTELAND: TypedKey<Art>;
  /**
   * `minecraft:water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER: TypedKey<Art>;
  /**
   * `minecraft:wind`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WIND: TypedKey<Art>;
  /**
   * `minecraft:wither`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER: TypedKey<Art>;
  /**
   * Creates a key for {@link Art} in the registry `minecraft:painting_variant`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<Art>;
}
/**
 * Vanilla keys for {@link RegistryKey#BIOME}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BiomeKeys {
  /**
   * `minecraft:badlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BADLANDS: TypedKey<Biome>;
  /**
   * `minecraft:bamboo_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_JUNGLE: TypedKey<Biome>;
  /**
   * `minecraft:basalt_deltas`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASALT_DELTAS: TypedKey<Biome>;
  /**
   * `minecraft:beach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACH: TypedKey<Biome>;
  /**
   * `minecraft:birch_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:cherry_grove`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_GROVE: TypedKey<Biome>;
  /**
   * `minecraft:cold_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COLD_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:crimson_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:dark_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:deep_cold_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEP_COLD_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:deep_dark`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEP_DARK: TypedKey<Biome>;
  /**
   * `minecraft:deep_frozen_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEP_FROZEN_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:deep_lukewarm_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEP_LUKEWARM_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:deep_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEP_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DESERT: TypedKey<Biome>;
  /**
   * `minecraft:dripstone_caves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIPSTONE_CAVES: TypedKey<Biome>;
  /**
   * `minecraft:end_barrens`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_BARRENS: TypedKey<Biome>;
  /**
   * `minecraft:end_highlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_HIGHLANDS: TypedKey<Biome>;
  /**
   * `minecraft:end_midlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_MIDLANDS: TypedKey<Biome>;
  /**
   * `minecraft:eroded_badlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ERODED_BADLANDS: TypedKey<Biome>;
  /**
   * `minecraft:flower_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOREST: TypedKey<Biome>;
  /**
   * `minecraft:frozen_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROZEN_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:frozen_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROZEN_PEAKS: TypedKey<Biome>;
  /**
   * `minecraft:frozen_river`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROZEN_RIVER: TypedKey<Biome>;
  /**
   * `minecraft:grove`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GROVE: TypedKey<Biome>;
  /**
   * `minecraft:ice_spikes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ICE_SPIKES: TypedKey<Biome>;
  /**
   * `minecraft:jagged_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JAGGED_PEAKS: TypedKey<Biome>;
  /**
   * `minecraft:jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE: TypedKey<Biome>;
  /**
   * `minecraft:lukewarm_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUKEWARM_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:lush_caves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUSH_CAVES: TypedKey<Biome>;
  /**
   * `minecraft:mangrove_swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_SWAMP: TypedKey<Biome>;
  /**
   * `minecraft:meadow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MEADOW: TypedKey<Biome>;
  /**
   * `minecraft:mushroom_fields`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSHROOM_FIELDS: TypedKey<Biome>;
  /**
   * `minecraft:nether_wastes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_WASTES: TypedKey<Biome>;
  /**
   * `minecraft:ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:old_growth_birch_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OLD_GROWTH_BIRCH_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:old_growth_pine_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OLD_GROWTH_PINE_TAIGA: TypedKey<Biome>;
  /**
   * `minecraft:old_growth_spruce_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OLD_GROWTH_SPRUCE_TAIGA: TypedKey<Biome>;
  /**
   * `minecraft:pale_garden`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_GARDEN: TypedKey<Biome>;
  /**
   * `minecraft:plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAINS: TypedKey<Biome>;
  /**
   * `minecraft:river`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RIVER: TypedKey<Biome>;
  /**
   * `minecraft:savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAVANNA: TypedKey<Biome>;
  /**
   * `minecraft:savanna_plateau`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAVANNA_PLATEAU: TypedKey<Biome>;
  /**
   * `minecraft:small_end_islands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_END_ISLANDS: TypedKey<Biome>;
  /**
   * `minecraft:snowy_beach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWY_BEACH: TypedKey<Biome>;
  /**
   * `minecraft:snowy_plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWY_PLAINS: TypedKey<Biome>;
  /**
   * `minecraft:snowy_slopes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWY_SLOPES: TypedKey<Biome>;
  /**
   * `minecraft:snowy_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWY_TAIGA: TypedKey<Biome>;
  /**
   * `minecraft:soul_sand_valley`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SAND_VALLEY: TypedKey<Biome>;
  /**
   * `minecraft:sparse_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPARSE_JUNGLE: TypedKey<Biome>;
  /**
   * `minecraft:stony_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONY_PEAKS: TypedKey<Biome>;
  /**
   * `minecraft:stony_shore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONY_SHORE: TypedKey<Biome>;
  /**
   * `minecraft:sunflower_plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUNFLOWER_PLAINS: TypedKey<Biome>;
  /**
   * `minecraft:swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWAMP: TypedKey<Biome>;
  /**
   * `minecraft:taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TAIGA: TypedKey<Biome>;
  /**
   * `minecraft:the_end`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THE_END: TypedKey<Biome>;
  /**
   * `minecraft:the_void`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THE_VOID: TypedKey<Biome>;
  /**
   * `minecraft:warm_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARM_OCEAN: TypedKey<Biome>;
  /**
   * `minecraft:warped_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:windswept_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WINDSWEPT_FOREST: TypedKey<Biome>;
  /**
   * `minecraft:windswept_gravelly_hills`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WINDSWEPT_GRAVELLY_HILLS: TypedKey<Biome>;
  /**
   * `minecraft:windswept_hills`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WINDSWEPT_HILLS: TypedKey<Biome>;
  /**
   * `minecraft:windswept_savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WINDSWEPT_SAVANNA: TypedKey<Biome>;
  /**
   * `minecraft:wooded_badlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODED_BADLANDS: TypedKey<Biome>;
  /**
   * Creates a key for {@link Biome} in the registry `minecraft:worldgen/biome`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<Biome>;
}
/**
 * Vanilla keys for {@link RegistryKey#ATTRIBUTE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class AttributeKeys {
  /**
   * `minecraft:armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMOR: TypedKey<Attribute>;
  /**
   * `minecraft:armor_toughness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMOR_TOUGHNESS: TypedKey<Attribute>;
  /**
   * `minecraft:attack_damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ATTACK_DAMAGE: TypedKey<Attribute>;
  /**
   * `minecraft:attack_knockback`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ATTACK_KNOCKBACK: TypedKey<Attribute>;
  /**
   * `minecraft:attack_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ATTACK_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:block_break_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BREAK_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:block_interaction_range`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_INTERACTION_RANGE: TypedKey<Attribute>;
  /**
   * `minecraft:burning_time`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURNING_TIME: TypedKey<Attribute>;
  /**
   * `minecraft:entity_interaction_range`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_INTERACTION_RANGE: TypedKey<Attribute>;
  /**
   * `minecraft:explosion_knockback_resistance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPLOSION_KNOCKBACK_RESISTANCE: TypedKey<Attribute>;
  /**
   * `minecraft:fall_damage_multiplier`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALL_DAMAGE_MULTIPLIER: TypedKey<Attribute>;
  /**
   * `minecraft:flying_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLYING_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:follow_range`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOLLOW_RANGE: TypedKey<Attribute>;
  /**
   * `minecraft:gravity`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAVITY: TypedKey<Attribute>;
  /**
   * `minecraft:jump_strength`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUMP_STRENGTH: TypedKey<Attribute>;
  /**
   * `minecraft:knockback_resistance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KNOCKBACK_RESISTANCE: TypedKey<Attribute>;
  /**
   * `minecraft:luck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUCK: TypedKey<Attribute>;
  /**
   * `minecraft:max_absorption`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAX_ABSORPTION: TypedKey<Attribute>;
  /**
   * `minecraft:max_health`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAX_HEALTH: TypedKey<Attribute>;
  /**
   * `minecraft:mining_efficiency`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINING_EFFICIENCY: TypedKey<Attribute>;
  /**
   * `minecraft:movement_efficiency`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOVEMENT_EFFICIENCY: TypedKey<Attribute>;
  /**
   * `minecraft:movement_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOVEMENT_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:oxygen_bonus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXYGEN_BONUS: TypedKey<Attribute>;
  /**
   * `minecraft:safe_fall_distance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAFE_FALL_DISTANCE: TypedKey<Attribute>;
  /**
   * `minecraft:scale`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCALE: TypedKey<Attribute>;
  /**
   * `minecraft:sneaking_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNEAKING_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:spawn_reinforcements`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWN_REINFORCEMENTS: TypedKey<Attribute>;
  /**
   * `minecraft:step_height`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STEP_HEIGHT: TypedKey<Attribute>;
  /**
   * `minecraft:submerged_mining_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUBMERGED_MINING_SPEED: TypedKey<Attribute>;
  /**
   * `minecraft:sweeping_damage_ratio`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWEEPING_DAMAGE_RATIO: TypedKey<Attribute>;
  /**
   * `minecraft:tempt_range`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TEMPT_RANGE: TypedKey<Attribute>;
  /**
   * `minecraft:water_movement_efficiency`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER_MOVEMENT_EFFICIENCY: TypedKey<Attribute>;
}
/**
 * Vanilla keys for {@link RegistryKey#BLOCK}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class BlockTypeKeys {
  /**
   * `minecraft:acacia_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:acacia_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:activator_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACTIVATOR_RAIL: TypedKey<BlockType>;
  /**
   * `minecraft:air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AIR: TypedKey<BlockType>;
  /**
   * `minecraft:allium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLIUM: TypedKey<BlockType>;
  /**
   * `minecraft:amethyst_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:amethyst_cluster`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST_CLUSTER: TypedKey<BlockType>;
  /**
   * `minecraft:ancient_debris`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANCIENT_DEBRIS: TypedKey<BlockType>;
  /**
   * `minecraft:andesite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE: TypedKey<BlockType>;
  /**
   * `minecraft:andesite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:andesite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:andesite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANVIL: TypedKey<BlockType>;
  /**
   * `minecraft:attached_melon_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ATTACHED_MELON_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:attached_pumpkin_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ATTACHED_PUMPKIN_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:azalea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA: TypedKey<BlockType>;
  /**
   * `minecraft:azalea_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:azure_bluet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZURE_BLUET: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_mosaic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_mosaic_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_mosaic_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:bamboo_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:barrel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BARREL: TypedKey<BlockType>;
  /**
   * `minecraft:barrier`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BARRIER: TypedKey<BlockType>;
  /**
   * `minecraft:basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASALT: TypedKey<BlockType>;
  /**
   * `minecraft:beacon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACON: TypedKey<BlockType>;
  /**
   * `minecraft:bedrock`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEDROCK: TypedKey<BlockType>;
  /**
   * `minecraft:bee_nest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_NEST: TypedKey<BlockType>;
  /**
   * `minecraft:beehive`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEEHIVE: TypedKey<BlockType>;
  /**
   * `minecraft:beetroots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEETROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:bell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BELL: TypedKey<BlockType>;
  /**
   * `minecraft:big_dripleaf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIG_DRIPLEAF: TypedKey<BlockType>;
  /**
   * `minecraft:big_dripleaf_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIG_DRIPLEAF_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:birch_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:birch_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:birch_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:birch_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:birch_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:birch_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:birch_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:birch_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:birch_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:birch_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:birch_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:birch_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:birch_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:birch_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:birch_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:birch_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:birch_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:black_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:black_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_BED: TypedKey<BlockType>;
  /**
   * `minecraft:black_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:black_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:black_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:black_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:black_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:black_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:black_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:black_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:black_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:black_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:black_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:black_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:blackstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:blackstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:blackstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:blast_furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAST_FURNACE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:blue_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_BED: TypedKey<BlockType>;
  /**
   * `minecraft:blue_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:blue_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:blue_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:blue_ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_ICE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_orchid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_ORCHID: TypedKey<BlockType>;
  /**
   * `minecraft:blue_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:blue_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:blue_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:blue_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:blue_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:blue_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:bone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BONE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:bookshelf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOOKSHELF: TypedKey<BlockType>;
  /**
   * `minecraft:brain_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:brain_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:brain_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:brain_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:brewing_stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREWING_STAND: TypedKey<BlockType>;
  /**
   * `minecraft:brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:brown_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:brown_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_BED: TypedKey<BlockType>;
  /**
   * `minecraft:brown_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:brown_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:brown_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:brown_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:brown_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:brown_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:brown_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_MUSHROOM: TypedKey<BlockType>;
  /**
   * `minecraft:brown_mushroom_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_MUSHROOM_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:brown_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:brown_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:brown_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:brown_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:brown_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:brown_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:bubble_column`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_COLUMN: TypedKey<BlockType>;
  /**
   * `minecraft:bubble_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:bubble_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:bubble_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:bubble_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:budding_amethyst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUDDING_AMETHYST: TypedKey<BlockType>;
  /**
   * `minecraft:cactus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CACTUS: TypedKey<BlockType>;
  /**
   * `minecraft:cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:calcite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALCITE: TypedKey<BlockType>;
  /**
   * `minecraft:calibrated_sculk_sensor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALIBRATED_SCULK_SENSOR: TypedKey<BlockType>;
  /**
   * `minecraft:campfire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMPFIRE: TypedKey<BlockType>;
  /**
   * `minecraft:candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:carrots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARROTS: TypedKey<BlockType>;
  /**
   * `minecraft:cartography_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARTOGRAPHY_TABLE: TypedKey<BlockType>;
  /**
   * `minecraft:carved_pumpkin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARVED_PUMPKIN: TypedKey<BlockType>;
  /**
   * `minecraft:cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAULDRON: TypedKey<BlockType>;
  /**
   * `minecraft:cave_air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVE_AIR: TypedKey<BlockType>;
  /**
   * `minecraft:cave_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVE_VINES: TypedKey<BlockType>;
  /**
   * `minecraft:cave_vines_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVE_VINES_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:chain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAIN: TypedKey<BlockType>;
  /**
   * `minecraft:chain_command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAIN_COMMAND_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:cherry_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHEST: TypedKey<BlockType>;
  /**
   * `minecraft:chipped_anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHIPPED_ANVIL: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_bookshelf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_BOOKSHELF: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_NETHER_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_polished_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_POLISHED_BLACKSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_quartz_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_QUARTZ_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_RED_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_resin_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_RESIN_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_TUFF: TypedKey<BlockType>;
  /**
   * `minecraft:chiseled_tuff_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_TUFF_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:chorus_flower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHORUS_FLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:chorus_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHORUS_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:clay`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLAY: TypedKey<BlockType>;
  /**
   * `minecraft:closed_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLOSED_EYEBLOSSOM: TypedKey<BlockType>;
  /**
   * `minecraft:coal_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:coal_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:coarse_dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COARSE_DIRT: TypedKey<BlockType>;
  /**
   * `minecraft:cobbled_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:cobbled_deepslate_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cobbled_deepslate_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:cobbled_deepslate_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE: TypedKey<BlockType>;
  /**
   * `minecraft:cobblestone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cobblestone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:cobblestone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:cobweb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBWEB: TypedKey<BlockType>;
  /**
   * `minecraft:cocoa`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COCOA: TypedKey<BlockType>;
  /**
   * `minecraft:command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMMAND_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:comparator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPARATOR: TypedKey<BlockType>;
  /**
   * `minecraft:composter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPOSTER: TypedKey<BlockType>;
  /**
   * `minecraft:conduit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONDUIT: TypedKey<BlockType>;
  /**
   * `minecraft:copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:copper_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:cornflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CORNFLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:cracked_deepslate_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_DEEPSLATE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:cracked_deepslate_tiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_DEEPSLATE_TILES: TypedKey<BlockType>;
  /**
   * `minecraft:cracked_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_NETHER_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:cracked_polished_blackstone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_POLISHED_BLACKSTONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:cracked_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:crafter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTER: TypedKey<BlockType>;
  /**
   * `minecraft:crafting_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTING_TABLE: TypedKey<BlockType>;
  /**
   * `minecraft:creaking_heart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREAKING_HEART: TypedKey<BlockType>;
  /**
   * `minecraft:creeper_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:creeper_wall_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_WALL_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FUNGUS: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_HYPHAE: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_nylium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_NYLIUM: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:crimson_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:crying_obsidian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRYING_OBSIDIAN: TypedKey<BlockType>;
  /**
   * `minecraft:cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:cut_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_RED_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:cut_red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_RED_SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cut_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:cut_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_BED: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:cyan_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:damaged_anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAMAGED_ANVIL: TypedKey<BlockType>;
  /**
   * `minecraft:dandelion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DANDELION: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:dark_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:dark_prismarine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE: TypedKey<BlockType>;
  /**
   * `minecraft:dark_prismarine_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:dark_prismarine_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:daylight_detector`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAYLIGHT_DETECTOR: TypedKey<BlockType>;
  /**
   * `minecraft:dead_brain_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:dead_brain_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dead_brain_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_brain_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_bubble_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:dead_bubble_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dead_bubble_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_bubble_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:dead_fire_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:dead_fire_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dead_fire_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_fire_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_horn_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:dead_horn_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dead_horn_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_horn_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_tube_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:dead_tube_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dead_tube_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:dead_tube_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:decorated_pot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DECORATED_POT: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_coal_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_COAL_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_copper_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_COPPER_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_diamond_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_DIAMOND_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_emerald_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_EMERALD_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_GOLD_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_iron_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_IRON_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_lapis_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_LAPIS_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_redstone_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_REDSTONE_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_tile_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_tile_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_tile_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:deepslate_tiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILES: TypedKey<BlockType>;
  /**
   * `minecraft:detector_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DETECTOR_RAIL: TypedKey<BlockType>;
  /**
   * `minecraft:diamond_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:diamond_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:diorite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE: TypedKey<BlockType>;
  /**
   * `minecraft:diorite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:diorite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:diorite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT: TypedKey<BlockType>;
  /**
   * `minecraft:dirt_path`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT_PATH: TypedKey<BlockType>;
  /**
   * `minecraft:dispenser`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DISPENSER: TypedKey<BlockType>;
  /**
   * `minecraft:dragon_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_EGG: TypedKey<BlockType>;
  /**
   * `minecraft:dragon_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:dragon_wall_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_WALL_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:dried_kelp_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIED_KELP_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dripstone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIPSTONE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:dropper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DROPPER: TypedKey<BlockType>;
  /**
   * `minecraft:emerald_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:emerald_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:enchanting_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTING_TABLE: TypedKey<BlockType>;
  /**
   * `minecraft:end_gateway`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_GATEWAY: TypedKey<BlockType>;
  /**
   * `minecraft:end_portal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_PORTAL: TypedKey<BlockType>;
  /**
   * `minecraft:end_portal_frame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_PORTAL_FRAME: TypedKey<BlockType>;
  /**
   * `minecraft:end_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_ROD: TypedKey<BlockType>;
  /**
   * `minecraft:end_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE: TypedKey<BlockType>;
  /**
   * `minecraft:end_stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:end_stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:end_stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:end_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:ender_chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_CHEST: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:exposed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:farmland`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FARMLAND: TypedKey<BlockType>;
  /**
   * `minecraft:fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FERN: TypedKey<BlockType>;
  /**
   * `minecraft:fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE: TypedKey<BlockType>;
  /**
   * `minecraft:fire_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:fire_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:fire_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:fire_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:fletching_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLETCHING_TABLE: TypedKey<BlockType>;
  /**
   * `minecraft:flower_pot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER_POT: TypedKey<BlockType>;
  /**
   * `minecraft:flowering_azalea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWERING_AZALEA: TypedKey<BlockType>;
  /**
   * `minecraft:flowering_azalea_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWERING_AZALEA_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:frogspawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROGSPAWN: TypedKey<BlockType>;
  /**
   * `minecraft:frosted_ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROSTED_ICE: TypedKey<BlockType>;
  /**
   * `minecraft:furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FURNACE: TypedKey<BlockType>;
  /**
   * `minecraft:gilded_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GILDED_BLACKSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:glow_lichen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_LICHEN: TypedKey<BlockType>;
  /**
   * `minecraft:glowstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOWSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:gold_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:granite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE: TypedKey<BlockType>;
  /**
   * `minecraft:granite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:granite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:granite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:grass_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRASS_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:gravel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAVEL: TypedKey<BlockType>;
  /**
   * `minecraft:gray_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:gray_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_BED: TypedKey<BlockType>;
  /**
   * `minecraft:gray_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:gray_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:gray_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:gray_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:gray_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:gray_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:gray_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:gray_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:gray_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:gray_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:gray_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:gray_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:green_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:green_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_BED: TypedKey<BlockType>;
  /**
   * `minecraft:green_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:green_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:green_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:green_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:green_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:green_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:green_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:green_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:green_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:green_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:green_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:green_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:grindstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRINDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:hanging_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HANGING_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:hay_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAY_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:heavy_core`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEAVY_CORE: TypedKey<BlockType>;
  /**
   * `minecraft:heavy_weighted_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEAVY_WEIGHTED_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:honey_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEY_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:honeycomb_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEYCOMB_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:hopper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOPPER: TypedKey<BlockType>;
  /**
   * `minecraft:horn_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:horn_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:horn_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:horn_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ICE: TypedKey<BlockType>;
  /**
   * `minecraft:infested_chiseled_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_CHISELED_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:infested_cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_COBBLESTONE: TypedKey<BlockType>;
  /**
   * `minecraft:infested_cracked_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_CRACKED_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:infested_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:infested_mossy_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_MOSSY_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:infested_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_STONE: TypedKey<BlockType>;
  /**
   * `minecraft:infested_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:iron_bars`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_BARS: TypedKey<BlockType>;
  /**
   * `minecraft:iron_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:iron_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:iron_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:iron_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:jack_o_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JACK_O_LANTERN: TypedKey<BlockType>;
  /**
   * `minecraft:jigsaw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JIGSAW: TypedKey<BlockType>;
  /**
   * `minecraft:jukebox`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUKEBOX: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:jungle_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:kelp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KELP: TypedKey<BlockType>;
  /**
   * `minecraft:kelp_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KELP_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:ladder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LADDER: TypedKey<BlockType>;
  /**
   * `minecraft:lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LANTERN: TypedKey<BlockType>;
  /**
   * `minecraft:lapis_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:lapis_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:large_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LARGE_AMETHYST_BUD: TypedKey<BlockType>;
  /**
   * `minecraft:large_fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LARGE_FERN: TypedKey<BlockType>;
  /**
   * `minecraft:lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA: TypedKey<BlockType>;
  /**
   * `minecraft:lava_cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA_CAULDRON: TypedKey<BlockType>;
  /**
   * `minecraft:lectern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LECTERN: TypedKey<BlockType>;
  /**
   * `minecraft:lever`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEVER: TypedKey<BlockType>;
  /**
   * `minecraft:light`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_BED: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:light_blue_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_BED: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:light_gray_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:light_weighted_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_WEIGHTED_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:lightning_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHTNING_ROD: TypedKey<BlockType>;
  /**
   * `minecraft:lilac`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILAC: TypedKey<BlockType>;
  /**
   * `minecraft:lily_of_the_valley`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILY_OF_THE_VALLEY: TypedKey<BlockType>;
  /**
   * `minecraft:lily_pad`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILY_PAD: TypedKey<BlockType>;
  /**
   * `minecraft:lime_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:lime_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_BED: TypedKey<BlockType>;
  /**
   * `minecraft:lime_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:lime_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:lime_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:lime_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:lime_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:lime_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:lime_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:lime_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:lime_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:lime_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:lime_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:lime_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:lodestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LODESTONE: TypedKey<BlockType>;
  /**
   * `minecraft:loom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOOM: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_BED: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:magenta_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:magma_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGMA_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_propagule`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PROPAGULE: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:mangrove_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:medium_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MEDIUM_AMETHYST_BUD: TypedKey<BlockType>;
  /**
   * `minecraft:melon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELON: TypedKey<BlockType>;
  /**
   * `minecraft:melon_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELON_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:moss_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSS_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:moss_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSS_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_cobblestone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_cobblestone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_cobblestone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:mossy_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:moving_piston`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOVING_PISTON: TypedKey<BlockType>;
  /**
   * `minecraft:mud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD: TypedKey<BlockType>;
  /**
   * `minecraft:mud_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:mud_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:mud_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:mud_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:muddy_mangrove_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUDDY_MANGROVE_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:mushroom_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSHROOM_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:mycelium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MYCELIUM: TypedKey<BlockType>;
  /**
   * `minecraft:nether_brick_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:nether_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:nether_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:nether_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:nether_gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_GOLD_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:nether_portal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_PORTAL: TypedKey<BlockType>;
  /**
   * `minecraft:nether_quartz_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_QUARTZ_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:nether_sprouts`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_SPROUTS: TypedKey<BlockType>;
  /**
   * `minecraft:nether_wart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_WART: TypedKey<BlockType>;
  /**
   * `minecraft:nether_wart_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_WART_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:netherite_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:netherrack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERRACK: TypedKey<BlockType>;
  /**
   * `minecraft:note_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NOTE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:oak_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:oak_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:observer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OBSERVER: TypedKey<BlockType>;
  /**
   * `minecraft:obsidian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OBSIDIAN: TypedKey<BlockType>;
  /**
   * `minecraft:ochre_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCHRE_FROGLIGHT: TypedKey<BlockType>;
  /**
   * `minecraft:open_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OPEN_EYEBLOSSOM: TypedKey<BlockType>;
  /**
   * `minecraft:orange_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:orange_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_BED: TypedKey<BlockType>;
  /**
   * `minecraft:orange_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:orange_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:orange_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:orange_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:orange_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:orange_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:orange_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:orange_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:orange_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:orange_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:orange_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:orange_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:orange_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:oxeye_daisy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXEYE_DAISY: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:oxidized_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:packed_ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PACKED_ICE: TypedKey<BlockType>;
  /**
   * `minecraft:packed_mud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PACKED_MUD: TypedKey<BlockType>;
  /**
   * `minecraft:pale_hanging_moss`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_HANGING_MOSS: TypedKey<BlockType>;
  /**
   * `minecraft:pale_moss_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_MOSS_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:pale_moss_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_MOSS_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:pale_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:pearlescent_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PEARLESCENT_FROGLIGHT: TypedKey<BlockType>;
  /**
   * `minecraft:peony`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PEONY: TypedKey<BlockType>;
  /**
   * `minecraft:petrified_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PETRIFIED_OAK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:piglin_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:piglin_wall_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_WALL_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:pink_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:pink_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_BED: TypedKey<BlockType>;
  /**
   * `minecraft:pink_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:pink_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:pink_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:pink_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:pink_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:pink_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:pink_petals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_PETALS: TypedKey<BlockType>;
  /**
   * `minecraft:pink_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:pink_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:pink_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:pink_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:pink_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:pink_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:pink_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:piston`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PISTON: TypedKey<BlockType>;
  /**
   * `minecraft:piston_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PISTON_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:pitcher_crop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PITCHER_CROP: TypedKey<BlockType>;
  /**
   * `minecraft:pitcher_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PITCHER_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:player_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:player_wall_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_WALL_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:podzol`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PODZOL: TypedKey<BlockType>;
  /**
   * `minecraft:pointed_dripstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POINTED_DRIPSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_andesite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_andesite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_andesite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BASALT: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_blackstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:polished_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_deepslate_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_deepslate_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_deepslate_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:polished_diorite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_diorite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_diorite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_granite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE: TypedKey<BlockType>;
  /**
   * `minecraft:polished_granite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_granite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF: TypedKey<BlockType>;
  /**
   * `minecraft:polished_tuff_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:polished_tuff_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:polished_tuff_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:poppy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POPPY: TypedKey<BlockType>;
  /**
   * `minecraft:potatoes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTATOES: TypedKey<BlockType>;
  /**
   * `minecraft:potted_acacia_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_ACACIA_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_allium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_ALLIUM: TypedKey<BlockType>;
  /**
   * `minecraft:potted_azalea_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_AZALEA_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:potted_azure_bluet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_AZURE_BLUET: TypedKey<BlockType>;
  /**
   * `minecraft:potted_bamboo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_BAMBOO: TypedKey<BlockType>;
  /**
   * `minecraft:potted_birch_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_BIRCH_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_blue_orchid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_BLUE_ORCHID: TypedKey<BlockType>;
  /**
   * `minecraft:potted_brown_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_BROWN_MUSHROOM: TypedKey<BlockType>;
  /**
   * `minecraft:potted_cactus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CACTUS: TypedKey<BlockType>;
  /**
   * `minecraft:potted_cherry_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CHERRY_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_closed_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CLOSED_EYEBLOSSOM: TypedKey<BlockType>;
  /**
   * `minecraft:potted_cornflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CORNFLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:potted_crimson_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CRIMSON_FUNGUS: TypedKey<BlockType>;
  /**
   * `minecraft:potted_crimson_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_CRIMSON_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:potted_dandelion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_DANDELION: TypedKey<BlockType>;
  /**
   * `minecraft:potted_dark_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_DARK_OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_dead_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_DEAD_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:potted_fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_FERN: TypedKey<BlockType>;
  /**
   * `minecraft:potted_flowering_azalea_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_FLOWERING_AZALEA_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:potted_jungle_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_JUNGLE_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_lily_of_the_valley`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_LILY_OF_THE_VALLEY: TypedKey<BlockType>;
  /**
   * `minecraft:potted_mangrove_propagule`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_MANGROVE_PROPAGULE: TypedKey<BlockType>;
  /**
   * `minecraft:potted_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_open_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_OPEN_EYEBLOSSOM: TypedKey<BlockType>;
  /**
   * `minecraft:potted_orange_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_ORANGE_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:potted_oxeye_daisy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_OXEYE_DAISY: TypedKey<BlockType>;
  /**
   * `minecraft:potted_pale_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_PALE_OAK_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_pink_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_PINK_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:potted_poppy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_POPPY: TypedKey<BlockType>;
  /**
   * `minecraft:potted_red_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_RED_MUSHROOM: TypedKey<BlockType>;
  /**
   * `minecraft:potted_red_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_RED_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:potted_spruce_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_SPRUCE_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:potted_torchflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_TORCHFLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:potted_warped_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_WARPED_FUNGUS: TypedKey<BlockType>;
  /**
   * `minecraft:potted_warped_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_WARPED_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:potted_white_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_WHITE_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:potted_wither_rose`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTTED_WITHER_ROSE: TypedKey<BlockType>;
  /**
   * `minecraft:powder_snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWDER_SNOW: TypedKey<BlockType>;
  /**
   * `minecraft:powder_snow_cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWDER_SNOW_CAULDRON: TypedKey<BlockType>;
  /**
   * `minecraft:powered_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWERED_RAIL: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:prismarine_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:pumpkin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUMPKIN: TypedKey<BlockType>;
  /**
   * `minecraft:pumpkin_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUMPKIN_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:purple_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:purple_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_BED: TypedKey<BlockType>;
  /**
   * `minecraft:purple_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:purple_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:purple_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:purple_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:purple_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:purple_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:purple_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:purple_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:purple_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:purple_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:purple_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:purple_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:purpur_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:purpur_pillar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_PILLAR: TypedKey<BlockType>;
  /**
   * `minecraft:purpur_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:purpur_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:quartz_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:quartz_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:quartz_pillar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_PILLAR: TypedKey<BlockType>;
  /**
   * `minecraft:quartz_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:quartz_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAIL: TypedKey<BlockType>;
  /**
   * `minecraft:raw_copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_COPPER_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:raw_gold_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_GOLD_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:raw_iron_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_IRON_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:red_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:red_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_BED: TypedKey<BlockType>;
  /**
   * `minecraft:red_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:red_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:red_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:red_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:red_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:red_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:red_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_MUSHROOM: TypedKey<BlockType>;
  /**
   * `minecraft:red_mushroom_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_MUSHROOM_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:red_nether_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:red_nether_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:red_nether_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:red_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:red_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SAND: TypedKey<BlockType>;
  /**
   * `minecraft:red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:red_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:red_sandstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:red_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:red_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:red_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:red_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:red_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:red_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:red_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_lamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_LAMP: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_ORE: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_wall_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_WALL_TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:redstone_wire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_WIRE: TypedKey<BlockType>;
  /**
   * `minecraft:reinforced_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REINFORCED_DEEPSLATE: TypedKey<BlockType>;
  /**
   * `minecraft:repeater`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPEATER: TypedKey<BlockType>;
  /**
   * `minecraft:repeating_command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPEATING_COMMAND_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:resin_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:resin_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:resin_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:resin_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:resin_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:resin_clump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_CLUMP: TypedKey<BlockType>;
  /**
   * `minecraft:respawn_anchor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESPAWN_ANCHOR: TypedKey<BlockType>;
  /**
   * `minecraft:rooted_dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ROOTED_DIRT: TypedKey<BlockType>;
  /**
   * `minecraft:rose_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ROSE_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAND: TypedKey<BlockType>;
  /**
   * `minecraft:sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:sandstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:scaffolding`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCAFFOLDING: TypedKey<BlockType>;
  /**
   * `minecraft:sculk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK: TypedKey<BlockType>;
  /**
   * `minecraft:sculk_catalyst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_CATALYST: TypedKey<BlockType>;
  /**
   * `minecraft:sculk_sensor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_SENSOR: TypedKey<BlockType>;
  /**
   * `minecraft:sculk_shrieker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_SHRIEKER: TypedKey<BlockType>;
  /**
   * `minecraft:sculk_vein`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_VEIN: TypedKey<BlockType>;
  /**
   * `minecraft:sea_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEA_LANTERN: TypedKey<BlockType>;
  /**
   * `minecraft:sea_pickle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEA_PICKLE: TypedKey<BlockType>;
  /**
   * `minecraft:seagrass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEAGRASS: TypedKey<BlockType>;
  /**
   * `minecraft:short_grass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHORT_GRASS: TypedKey<BlockType>;
  /**
   * `minecraft:shroomlight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHROOMLIGHT: TypedKey<BlockType>;
  /**
   * `minecraft:shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:skeleton_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_SKULL: TypedKey<BlockType>;
  /**
   * `minecraft:skeleton_wall_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_WALL_SKULL: TypedKey<BlockType>;
  /**
   * `minecraft:slime_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLIME_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:small_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_AMETHYST_BUD: TypedKey<BlockType>;
  /**
   * `minecraft:small_dripleaf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_DRIPLEAF: TypedKey<BlockType>;
  /**
   * `minecraft:smithing_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMITHING_TABLE: TypedKey<BlockType>;
  /**
   * `minecraft:smoker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOKER: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_BASALT: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_quartz`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_quartz_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_quartz_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_red_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_STONE: TypedKey<BlockType>;
  /**
   * `minecraft:smooth_stone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_STONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:sniffer_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_EGG: TypedKey<BlockType>;
  /**
   * `minecraft:snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW: TypedKey<BlockType>;
  /**
   * `minecraft:snow_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:soul_campfire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_CAMPFIRE: TypedKey<BlockType>;
  /**
   * `minecraft:soul_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_FIRE: TypedKey<BlockType>;
  /**
   * `minecraft:soul_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_LANTERN: TypedKey<BlockType>;
  /**
   * `minecraft:soul_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SAND: TypedKey<BlockType>;
  /**
   * `minecraft:soul_soil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SOIL: TypedKey<BlockType>;
  /**
   * `minecraft:soul_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:soul_wall_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_WALL_TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:spawner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNER: TypedKey<BlockType>;
  /**
   * `minecraft:sponge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPONGE: TypedKey<BlockType>;
  /**
   * `minecraft:spore_blossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPORE_BLOSSOM: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LEAVES: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SAPLING: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:spruce_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:sticky_piston`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STICKY_PISTON: TypedKey<BlockType>;
  /**
   * `minecraft:stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE: TypedKey<BlockType>;
  /**
   * `minecraft:stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:stone_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:stone_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:stone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:stone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:stonecutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONECUTTER: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_acacia_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_ACACIA_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_acacia_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_ACACIA_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_bamboo_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BAMBOO_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_birch_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BIRCH_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_birch_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BIRCH_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_cherry_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CHERRY_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_cherry_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CHERRY_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_crimson_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CRIMSON_HYPHAE: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_crimson_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CRIMSON_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_dark_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_DARK_OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_dark_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_DARK_OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_jungle_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_JUNGLE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_jungle_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_JUNGLE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_mangrove_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_MANGROVE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_mangrove_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_MANGROVE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_pale_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_PALE_OAK_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_pale_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_PALE_OAK_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_spruce_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_SPRUCE_LOG: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_spruce_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_SPRUCE_WOOD: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_warped_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_WARPED_HYPHAE: TypedKey<BlockType>;
  /**
   * `minecraft:stripped_warped_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_WARPED_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:structure_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRUCTURE_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:structure_void`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRUCTURE_VOID: TypedKey<BlockType>;
  /**
   * `minecraft:sugar_cane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUGAR_CANE: TypedKey<BlockType>;
  /**
   * `minecraft:sunflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUNFLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:suspicious_gravel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUSPICIOUS_GRAVEL: TypedKey<BlockType>;
  /**
   * `minecraft:suspicious_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUSPICIOUS_SAND: TypedKey<BlockType>;
  /**
   * `minecraft:sweet_berry_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWEET_BERRY_BUSH: TypedKey<BlockType>;
  /**
   * `minecraft:tall_grass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TALL_GRASS: TypedKey<BlockType>;
  /**
   * `minecraft:tall_seagrass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TALL_SEAGRASS: TypedKey<BlockType>;
  /**
   * `minecraft:target`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TARGET: TypedKey<BlockType>;
  /**
   * `minecraft:terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:tinted_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TINTED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:tnt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TNT: TypedKey<BlockType>;
  /**
   * `minecraft:torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:torchflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCHFLOWER: TypedKey<BlockType>;
  /**
   * `minecraft:torchflower_crop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCHFLOWER_CROP: TypedKey<BlockType>;
  /**
   * `minecraft:trapped_chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAPPED_CHEST: TypedKey<BlockType>;
  /**
   * `minecraft:trial_spawner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_SPAWNER: TypedKey<BlockType>;
  /**
   * `minecraft:tripwire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIPWIRE: TypedKey<BlockType>;
  /**
   * `minecraft:tripwire_hook`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIPWIRE_HOOK: TypedKey<BlockType>;
  /**
   * `minecraft:tube_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL: TypedKey<BlockType>;
  /**
   * `minecraft:tube_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:tube_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:tube_coral_wall_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL_WALL_FAN: TypedKey<BlockType>;
  /**
   * `minecraft:tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICKS: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:tuff_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_WALL: TypedKey<BlockType>;
  /**
   * `minecraft:turtle_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_EGG: TypedKey<BlockType>;
  /**
   * `minecraft:twisting_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TWISTING_VINES: TypedKey<BlockType>;
  /**
   * `minecraft:twisting_vines_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TWISTING_VINES_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:vault`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VAULT: TypedKey<BlockType>;
  /**
   * `minecraft:verdant_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VERDANT_FROGLIGHT: TypedKey<BlockType>;
  /**
   * `minecraft:vine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VINE: TypedKey<BlockType>;
  /**
   * `minecraft:void_air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VOID_AIR: TypedKey<BlockType>;
  /**
   * `minecraft:wall_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WALL_TORCH: TypedKey<BlockType>;
  /**
   * `minecraft:warped_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_BUTTON: TypedKey<BlockType>;
  /**
   * `minecraft:warped_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:warped_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FENCE: TypedKey<BlockType>;
  /**
   * `minecraft:warped_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FENCE_GATE: TypedKey<BlockType>;
  /**
   * `minecraft:warped_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FUNGUS: TypedKey<BlockType>;
  /**
   * `minecraft:warped_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:warped_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_HYPHAE: TypedKey<BlockType>;
  /**
   * `minecraft:warped_nylium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_NYLIUM: TypedKey<BlockType>;
  /**
   * `minecraft:warped_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_PLANKS: TypedKey<BlockType>;
  /**
   * `minecraft:warped_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_PRESSURE_PLATE: TypedKey<BlockType>;
  /**
   * `minecraft:warped_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_ROOTS: TypedKey<BlockType>;
  /**
   * `minecraft:warped_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:warped_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:warped_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:warped_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STEM: TypedKey<BlockType>;
  /**
   * `minecraft:warped_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:warped_wall_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_WALL_HANGING_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:warped_wall_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_WALL_SIGN: TypedKey<BlockType>;
  /**
   * `minecraft:warped_wart_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_WART_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER: TypedKey<BlockType>;
  /**
   * `minecraft:water_cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER_CAULDRON: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_BLOCK: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_exposed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:waxed_weathered_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CHISELED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_BULB: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_DOOR: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_GRATE: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_TRAPDOOR: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER_SLAB: TypedKey<BlockType>;
  /**
   * `minecraft:weathered_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER_STAIRS: TypedKey<BlockType>;
  /**
   * `minecraft:weeping_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEEPING_VINES: TypedKey<BlockType>;
  /**
   * `minecraft:weeping_vines_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEEPING_VINES_PLANT: TypedKey<BlockType>;
  /**
   * `minecraft:wet_sponge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WET_SPONGE: TypedKey<BlockType>;
  /**
   * `minecraft:wheat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHEAT: TypedKey<BlockType>;
  /**
   * `minecraft:white_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:white_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_BED: TypedKey<BlockType>;
  /**
   * `minecraft:white_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:white_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:white_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:white_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:white_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:white_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:white_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:white_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:white_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:white_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:white_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_TULIP: TypedKey<BlockType>;
  /**
   * `minecraft:white_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:white_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:wither_rose`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_ROSE: TypedKey<BlockType>;
  /**
   * `minecraft:wither_skeleton_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKELETON_SKULL: TypedKey<BlockType>;
  /**
   * `minecraft:wither_skeleton_wall_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKELETON_WALL_SKULL: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_BED: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CANDLE: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_candle_cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CANDLE_CAKE: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CARPET: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CONCRETE: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CONCRETE_POWDER: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_GLAZED_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_SHULKER_BOX: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_STAINED_GLASS: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_STAINED_GLASS_PANE: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_TERRACOTTA: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_wall_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_WALL_BANNER: TypedKey<BlockType>;
  /**
   * `minecraft:yellow_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_WOOL: TypedKey<BlockType>;
  /**
   * `minecraft:zombie_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_HEAD: TypedKey<BlockType>;
  /**
   * `minecraft:zombie_wall_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_WALL_HEAD: TypedKey<BlockType>;
}
/**
 * Vanilla keys for {@link RegistryKey#DAMAGE_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class DamageTypeKeys {
  /**
   * `minecraft:arrow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARROW: TypedKey<DamageType>;
  /**
   * `minecraft:bad_respawn_point`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAD_RESPAWN_POINT: TypedKey<DamageType>;
  /**
   * `minecraft:cactus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CACTUS: TypedKey<DamageType>;
  /**
   * `minecraft:campfire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMPFIRE: TypedKey<DamageType>;
  /**
   * `minecraft:cramming`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAMMING: TypedKey<DamageType>;
  /**
   * `minecraft:dragon_breath`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_BREATH: TypedKey<DamageType>;
  /**
   * `minecraft:drown`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DROWN: TypedKey<DamageType>;
  /**
   * `minecraft:dry_out`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRY_OUT: TypedKey<DamageType>;
  /**
   * `minecraft:ender_pearl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_PEARL: TypedKey<DamageType>;
  /**
   * `minecraft:explosion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPLOSION: TypedKey<DamageType>;
  /**
   * `minecraft:fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALL: TypedKey<DamageType>;
  /**
   * `minecraft:falling_anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALLING_ANVIL: TypedKey<DamageType>;
  /**
   * `minecraft:falling_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALLING_BLOCK: TypedKey<DamageType>;
  /**
   * `minecraft:falling_stalactite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FALLING_STALACTITE: TypedKey<DamageType>;
  /**
   * `minecraft:fireball`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIREBALL: TypedKey<DamageType>;
  /**
   * `minecraft:fireworks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIREWORKS: TypedKey<DamageType>;
  /**
   * `minecraft:fly_into_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLY_INTO_WALL: TypedKey<DamageType>;
  /**
   * `minecraft:freeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FREEZE: TypedKey<DamageType>;
  /**
   * `minecraft:generic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC: TypedKey<DamageType>;
  /**
   * `minecraft:generic_kill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_KILL: TypedKey<DamageType>;
  /**
   * `minecraft:hot_floor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOT_FLOOR: TypedKey<DamageType>;
  /**
   * `minecraft:in_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IN_FIRE: TypedKey<DamageType>;
  /**
   * `minecraft:in_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IN_WALL: TypedKey<DamageType>;
  /**
   * `minecraft:indirect_magic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INDIRECT_MAGIC: TypedKey<DamageType>;
  /**
   * `minecraft:lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA: TypedKey<DamageType>;
  /**
   * `minecraft:lightning_bolt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHTNING_BOLT: TypedKey<DamageType>;
  /**
   * `minecraft:mace_smash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MACE_SMASH: TypedKey<DamageType>;
  /**
   * `minecraft:magic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGIC: TypedKey<DamageType>;
  /**
   * `minecraft:mob_attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOB_ATTACK: TypedKey<DamageType>;
  /**
   * `minecraft:mob_attack_no_aggro`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOB_ATTACK_NO_AGGRO: TypedKey<DamageType>;
  /**
   * `minecraft:mob_projectile`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOB_PROJECTILE: TypedKey<DamageType>;
  /**
   * `minecraft:on_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ON_FIRE: TypedKey<DamageType>;
  /**
   * `minecraft:out_of_world`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OUT_OF_WORLD: TypedKey<DamageType>;
  /**
   * `minecraft:outside_border`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OUTSIDE_BORDER: TypedKey<DamageType>;
  /**
   * `minecraft:player_attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_ATTACK: TypedKey<DamageType>;
  /**
   * `minecraft:player_explosion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_EXPLOSION: TypedKey<DamageType>;
  /**
   * `minecraft:sonic_boom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SONIC_BOOM: TypedKey<DamageType>;
  /**
   * `minecraft:spit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPIT: TypedKey<DamageType>;
  /**
   * `minecraft:stalagmite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STALAGMITE: TypedKey<DamageType>;
  /**
   * `minecraft:starve`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STARVE: TypedKey<DamageType>;
  /**
   * `minecraft:sting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STING: TypedKey<DamageType>;
  /**
   * `minecraft:sweet_berry_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWEET_BERRY_BUSH: TypedKey<DamageType>;
  /**
   * `minecraft:thorns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THORNS: TypedKey<DamageType>;
  /**
   * `minecraft:thrown`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THROWN: TypedKey<DamageType>;
  /**
   * `minecraft:trident`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIDENT: TypedKey<DamageType>;
  /**
   * `minecraft:unattributed_fireball`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNATTRIBUTED_FIREBALL: TypedKey<DamageType>;
  /**
   * `minecraft:wind_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WIND_CHARGE: TypedKey<DamageType>;
  /**
   * `minecraft:wither`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER: TypedKey<DamageType>;
  /**
   * `minecraft:wither_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKULL: TypedKey<DamageType>;
  /**
   * Creates a key for {@link DamageType} in the registry `minecraft:damage_type`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<DamageType>;
}
/**
 * Vanilla keys for {@link RegistryKey#CAT_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class CatVariantKeys {
  /**
   * `minecraft:all_black`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALL_BLACK: TypedKey<Type>;
  /**
   * `minecraft:black`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK: TypedKey<Type>;
  /**
   * `minecraft:british_shorthair`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRITISH_SHORTHAIR: TypedKey<Type>;
  /**
   * `minecraft:calico`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALICO: TypedKey<Type>;
  /**
   * `minecraft:jellie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JELLIE: TypedKey<Type>;
  /**
   * `minecraft:persian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PERSIAN: TypedKey<Type>;
  /**
   * `minecraft:ragdoll`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAGDOLL: TypedKey<Type>;
  /**
   * `minecraft:red`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED: TypedKey<Type>;
  /**
   * `minecraft:siamese`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SIAMESE: TypedKey<Type>;
  /**
   * `minecraft:tabby`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TABBY: TypedKey<Type>;
  /**
   * `minecraft:white`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE: TypedKey<Type>;
}
/**
 * Vanilla keys for {@link RegistryKey#ENCHANTMENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class EnchantmentKeys {
  /**
   * `minecraft:aqua_affinity`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AQUA_AFFINITY: TypedKey<Enchantment>;
  /**
   * `minecraft:bane_of_arthropods`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANE_OF_ARTHROPODS: TypedKey<Enchantment>;
  /**
   * `minecraft:binding_curse`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BINDING_CURSE: TypedKey<Enchantment>;
  /**
   * `minecraft:blast_protection`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAST_PROTECTION: TypedKey<Enchantment>;
  /**
   * `minecraft:breach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREACH: TypedKey<Enchantment>;
  /**
   * `minecraft:channeling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHANNELING: TypedKey<Enchantment>;
  /**
   * `minecraft:density`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DENSITY: TypedKey<Enchantment>;
  /**
   * `minecraft:depth_strider`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEPTH_STRIDER: TypedKey<Enchantment>;
  /**
   * `minecraft:efficiency`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EFFICIENCY: TypedKey<Enchantment>;
  /**
   * `minecraft:feather_falling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FEATHER_FALLING: TypedKey<Enchantment>;
  /**
   * `minecraft:fire_aspect`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_ASPECT: TypedKey<Enchantment>;
  /**
   * `minecraft:fire_protection`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_PROTECTION: TypedKey<Enchantment>;
  /**
   * `minecraft:flame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLAME: TypedKey<Enchantment>;
  /**
   * `minecraft:fortune`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FORTUNE: TypedKey<Enchantment>;
  /**
   * `minecraft:frost_walker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROST_WALKER: TypedKey<Enchantment>;
  /**
   * `minecraft:impaling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IMPALING: TypedKey<Enchantment>;
  /**
   * `minecraft:infinity`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFINITY: TypedKey<Enchantment>;
  /**
   * `minecraft:knockback`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KNOCKBACK: TypedKey<Enchantment>;
  /**
   * `minecraft:looting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOOTING: TypedKey<Enchantment>;
  /**
   * `minecraft:loyalty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOYALTY: TypedKey<Enchantment>;
  /**
   * `minecraft:luck_of_the_sea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUCK_OF_THE_SEA: TypedKey<Enchantment>;
  /**
   * `minecraft:lure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LURE: TypedKey<Enchantment>;
  /**
   * `minecraft:mending`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MENDING: TypedKey<Enchantment>;
  /**
   * `minecraft:multishot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MULTISHOT: TypedKey<Enchantment>;
  /**
   * `minecraft:piercing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIERCING: TypedKey<Enchantment>;
  /**
   * `minecraft:power`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWER: TypedKey<Enchantment>;
  /**
   * `minecraft:projectile_protection`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PROJECTILE_PROTECTION: TypedKey<Enchantment>;
  /**
   * `minecraft:protection`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PROTECTION: TypedKey<Enchantment>;
  /**
   * `minecraft:punch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUNCH: TypedKey<Enchantment>;
  /**
   * `minecraft:quick_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUICK_CHARGE: TypedKey<Enchantment>;
  /**
   * `minecraft:respiration`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESPIRATION: TypedKey<Enchantment>;
  /**
   * `minecraft:riptide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RIPTIDE: TypedKey<Enchantment>;
  /**
   * `minecraft:sharpness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHARPNESS: TypedKey<Enchantment>;
  /**
   * `minecraft:silk_touch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SILK_TOUCH: TypedKey<Enchantment>;
  /**
   * `minecraft:smite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMITE: TypedKey<Enchantment>;
  /**
   * `minecraft:soul_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SPEED: TypedKey<Enchantment>;
  /**
   * `minecraft:sweeping_edge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWEEPING_EDGE: TypedKey<Enchantment>;
  /**
   * `minecraft:swift_sneak`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWIFT_SNEAK: TypedKey<Enchantment>;
  /**
   * `minecraft:thorns`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THORNS: TypedKey<Enchantment>;
  /**
   * `minecraft:unbreaking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNBREAKING: TypedKey<Enchantment>;
  /**
   * `minecraft:vanishing_curse`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VANISHING_CURSE: TypedKey<Enchantment>;
  /**
   * `minecraft:wind_burst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WIND_BURST: TypedKey<Enchantment>;
  /**
   * Creates a key for {@link Enchantment} in the registry `minecraft:enchantment`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<Enchantment>;
}
/**
 * Vanilla keys for {@link RegistryKey#TRIM_PATTERN}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class TrimPatternKeys {
  /**
   * `minecraft:bolt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOLT: TypedKey<TrimPattern>;
  /**
   * `minecraft:coast`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAST: TypedKey<TrimPattern>;
  /**
   * `minecraft:dune`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DUNE: TypedKey<TrimPattern>;
  /**
   * `minecraft:eye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EYE: TypedKey<TrimPattern>;
  /**
   * `minecraft:flow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOW: TypedKey<TrimPattern>;
  /**
   * `minecraft:host`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOST: TypedKey<TrimPattern>;
  /**
   * `minecraft:raiser`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAISER: TypedKey<TrimPattern>;
  /**
   * `minecraft:rib`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RIB: TypedKey<TrimPattern>;
  /**
   * `minecraft:sentry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SENTRY: TypedKey<TrimPattern>;
  /**
   * `minecraft:shaper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHAPER: TypedKey<TrimPattern>;
  /**
   * `minecraft:silence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SILENCE: TypedKey<TrimPattern>;
  /**
   * `minecraft:snout`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOUT: TypedKey<TrimPattern>;
  /**
   * `minecraft:spire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPIRE: TypedKey<TrimPattern>;
  /**
   * `minecraft:tide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TIDE: TypedKey<TrimPattern>;
  /**
   * `minecraft:vex`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VEX: TypedKey<TrimPattern>;
  /**
   * `minecraft:ward`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARD: TypedKey<TrimPattern>;
  /**
   * `minecraft:wayfinder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAYFINDER: TypedKey<TrimPattern>;
  /**
   * `minecraft:wild`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WILD: TypedKey<TrimPattern>;
  /**
   * Creates a key for {@link TrimPattern} in the registry `minecraft:trim_pattern`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<TrimPattern>;
}
/**
 * Vanilla keys for {@link RegistryKey#FROG_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class FrogVariantKeys {
  /**
   * `minecraft:cold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COLD: TypedKey<Variant>;
  /**
   * `minecraft:temperate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TEMPERATE: TypedKey<Variant>;
  /**
   * `minecraft:warm`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARM: TypedKey<Variant>;
}
/**
 * Vanilla keys for {@link RegistryKey#MAP_DECORATION_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class MapDecorationTypeKeys {
  /**
   * `minecraft:banner_black`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_BLACK: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_blue`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_BLUE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_brown`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_BROWN: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_cyan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_CYAN: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_gray`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_GRAY: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_green`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_GREEN: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_light_blue`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_LIGHT_BLUE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_light_gray`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_LIGHT_GRAY: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_lime`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_LIME: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_magenta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_MAGENTA: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_orange`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_ORANGE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_pink`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_PINK: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_purple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_PURPLE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_red`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_RED: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_white`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_WHITE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:banner_yellow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BANNER_YELLOW: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:blue_marker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_MARKER: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:frame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FRAME: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:jungle_temple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_TEMPLE: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:mansion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANSION: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:monument`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MONUMENT: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:player`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:player_off_limits`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_OFF_LIMITS: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:player_off_map`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_OFF_MAP: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:red_marker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_MARKER: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:red_x`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_X: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:swamp_hut`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWAMP_HUT: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:target_point`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TARGET_POINT: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:target_x`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TARGET_X: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:trial_chambers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_CHAMBERS: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:village_desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_DESERT: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:village_plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_PLAINS: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:village_savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_SAVANNA: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:village_snowy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_SNOWY: TypedKey<org_bukkit_map_MapCursor_Type>;
  /**
   * `minecraft:village_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_TAIGA: TypedKey<org_bukkit_map_MapCursor_Type>;
}
/**
 * Vanilla keys for {@link RegistryKey#STRUCTURE_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class StructureTypeKeys {
  /**
   * `minecraft:buried_treasure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURIED_TREASURE: TypedKey<StructureType>;
  /**
   * `minecraft:desert_pyramid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DESERT_PYRAMID: TypedKey<StructureType>;
  /**
   * `minecraft:end_city`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_CITY: TypedKey<StructureType>;
  /**
   * `minecraft:fortress`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FORTRESS: TypedKey<StructureType>;
  /**
   * `minecraft:igloo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGLOO: TypedKey<StructureType>;
  /**
   * `minecraft:jigsaw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JIGSAW: TypedKey<StructureType>;
  /**
   * `minecraft:jungle_temple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_TEMPLE: TypedKey<StructureType>;
  /**
   * `minecraft:mineshaft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINESHAFT: TypedKey<StructureType>;
  /**
   * `minecraft:nether_fossil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_FOSSIL: TypedKey<StructureType>;
  /**
   * `minecraft:ocean_monument`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN_MONUMENT: TypedKey<StructureType>;
  /**
   * `minecraft:ocean_ruin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN_RUIN: TypedKey<StructureType>;
  /**
   * `minecraft:ruined_portal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL: TypedKey<StructureType>;
  /**
   * `minecraft:shipwreck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHIPWRECK: TypedKey<StructureType>;
  /**
   * `minecraft:stronghold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRONGHOLD: TypedKey<StructureType>;
  /**
   * `minecraft:swamp_hut`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWAMP_HUT: TypedKey<StructureType>;
  /**
   * `minecraft:woodland_mansion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODLAND_MANSION: TypedKey<StructureType>;
}
/**
 * Vanilla keys for {@link RegistryKey#SOUND_EVENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class SoundEventKeys {
  /**
   * `minecraft:ambient.basalt_deltas.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_BASALT_DELTAS_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.basalt_deltas.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_BASALT_DELTAS_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.basalt_deltas.mood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_BASALT_DELTAS_MOOD: TypedKey<Sound>;
  /**
   * `minecraft:ambient.cave`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_CAVE: TypedKey<Sound>;
  /**
   * `minecraft:ambient.crimson_forest.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_CRIMSON_FOREST_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.crimson_forest.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_CRIMSON_FOREST_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.crimson_forest.mood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_CRIMSON_FOREST_MOOD: TypedKey<Sound>;
  /**
   * `minecraft:ambient.nether_wastes.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_NETHER_WASTES_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.nether_wastes.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_NETHER_WASTES_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.nether_wastes.mood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_NETHER_WASTES_MOOD: TypedKey<Sound>;
  /**
   * `minecraft:ambient.soul_sand_valley.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_SOUL_SAND_VALLEY_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.soul_sand_valley.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_SOUL_SAND_VALLEY_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.soul_sand_valley.mood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_SOUL_SAND_VALLEY_MOOD: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.enter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_ENTER: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.exit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_EXIT: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.loop.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_LOOP_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.loop.additions.rare`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE: TypedKey<Sound>;
  /**
   * `minecraft:ambient.underwater.loop.additions.ultra_rare`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE: TypedKey<Sound>;
  /**
   * `minecraft:ambient.warped_forest.additions`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_WARPED_FOREST_ADDITIONS: TypedKey<Sound>;
  /**
   * `minecraft:ambient.warped_forest.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_WARPED_FOREST_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:ambient.warped_forest.mood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMBIENT_WARPED_FOREST_MOOD: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.chime`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_CHIME: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.resonate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_RESONATE: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_cluster.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_CLUSTER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_cluster.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_CLUSTER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_cluster.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_CLUSTER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_cluster.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_CLUSTER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.amethyst_cluster.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AMETHYST_CLUSTER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.ancient_debris.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANCIENT_DEBRIS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.ancient_debris.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANCIENT_DEBRIS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.ancient_debris.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANCIENT_DEBRIS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.ancient_debris.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANCIENT_DEBRIS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.ancient_debris.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANCIENT_DEBRIS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.destroy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_DESTROY: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_LAND: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.anvil.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ANVIL_USE: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea_leaves.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_LEAVES_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea_leaves.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_LEAVES_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea_leaves.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_LEAVES_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea_leaves.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_LEAVES_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.azalea_leaves.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_AZALEA_LEAVES_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_sapling.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_SAPLING_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_sapling.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_SAPLING_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_sapling.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_SAPLING_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_button.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_button.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_fence_gate.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_fence_gate.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_hanging_sign.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_hanging_sign.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_hanging_sign.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_hanging_sign.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_hanging_sign.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.bamboo_wood_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.barrel.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BARREL_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.barrel.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BARREL_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.basalt.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BASALT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.basalt.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BASALT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.basalt.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BASALT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.basalt.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BASALT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.basalt.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BASALT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.beacon.activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEACON_ACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.beacon.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEACON_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.beacon.deactivate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEACON_DEACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.beacon.power_select`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEACON_POWER_SELECT: TypedKey<Sound>;
  /**
   * `minecraft:block.beehive.drip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEEHIVE_DRIP: TypedKey<Sound>;
  /**
   * `minecraft:block.beehive.enter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEEHIVE_ENTER: TypedKey<Sound>;
  /**
   * `minecraft:block.beehive.exit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEEHIVE_EXIT: TypedKey<Sound>;
  /**
   * `minecraft:block.beehive.shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEEHIVE_SHEAR: TypedKey<Sound>;
  /**
   * `minecraft:block.beehive.work`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BEEHIVE_WORK: TypedKey<Sound>;
  /**
   * `minecraft:block.bell.resonate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BELL_RESONATE: TypedKey<Sound>;
  /**
   * `minecraft:block.bell.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BELL_USE: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.tilt_down`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_TILT_DOWN: TypedKey<Sound>;
  /**
   * `minecraft:block.big_dripleaf.tilt_up`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BIG_DRIPLEAF_TILT_UP: TypedKey<Sound>;
  /**
   * `minecraft:block.blastfurnace.fire_crackle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BLASTFURNACE_FIRE_CRACKLE: TypedKey<Sound>;
  /**
   * `minecraft:block.bone_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BONE_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.bone_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BONE_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.bone_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BONE_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.bone_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BONE_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.bone_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BONE_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.brewing_stand.brew`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BREWING_STAND_BREW: TypedKey<Sound>;
  /**
   * `minecraft:block.bubble_column.bubble_pop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BUBBLE_COLUMN_BUBBLE_POP: TypedKey<Sound>;
  /**
   * `minecraft:block.bubble_column.upwards_ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.bubble_column.upwards_inside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE: TypedKey<Sound>;
  /**
   * `minecraft:block.bubble_column.whirlpool_ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.bubble_column.whirlpool_inside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE: TypedKey<Sound>;
  /**
   * `minecraft:block.cake.add_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAKE_ADD_CANDLE: TypedKey<Sound>;
  /**
   * `minecraft:block.calcite.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CALCITE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.calcite.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CALCITE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.calcite.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CALCITE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.calcite.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CALCITE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.calcite.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CALCITE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.campfire.crackle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAMPFIRE_CRACKLE: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.extinguish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_EXTINGUISH: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.candle.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CANDLE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.pick_berries`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_PICK_BERRIES: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cave_vines.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CAVE_VINES_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.chain.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHAIN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.chain.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHAIN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.chain.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHAIN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.chain.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHAIN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.chain.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHAIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_leaves.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_LEAVES_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_leaves.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_LEAVES_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_leaves.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_LEAVES_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_leaves.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_LEAVES_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_leaves.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_LEAVES_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_sapling.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_SAPLING_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_sapling.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_SAPLING_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_sapling.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_SAPLING_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_sapling.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_SAPLING_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_sapling.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_SAPLING_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_button.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_button.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_fence_gate.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_fence_gate.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_hanging_sign.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_hanging_sign.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_hanging_sign.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_hanging_sign.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_hanging_sign.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.cherry_wood_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.chest.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHEST_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.chest.locked`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHEST_LOCKED: TypedKey<Sound>;
  /**
   * `minecraft:block.chest.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHEST_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.insert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_INSERT: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.insert.enchanted`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.pickup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_PICKUP: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.pickup.enchanted`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.chiseled_bookshelf.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHISELED_BOOKSHELF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.chorus_flower.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHORUS_FLOWER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:block.chorus_flower.grow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHORUS_FLOWER_GROW: TypedKey<Sound>;
  /**
   * `minecraft:block.cobweb.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COBWEB_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.cobweb.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COBWEB_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.cobweb.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COBWEB_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.cobweb.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COBWEB_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.cobweb.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COBWEB_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.comparator.click`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COMPARATOR_CLICK: TypedKey<Sound>;
  /**
   * `minecraft:block.composter.empty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COMPOSTER_EMPTY: TypedKey<Sound>;
  /**
   * `minecraft:block.composter.fill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COMPOSTER_FILL: TypedKey<Sound>;
  /**
   * `minecraft:block.composter.fill_success`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COMPOSTER_FILL_SUCCESS: TypedKey<Sound>;
  /**
   * `minecraft:block.composter.ready`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COMPOSTER_READY: TypedKey<Sound>;
  /**
   * `minecraft:block.conduit.activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CONDUIT_ACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.conduit.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CONDUIT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.conduit.ambient.short`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CONDUIT_AMBIENT_SHORT: TypedKey<Sound>;
  /**
   * `minecraft:block.conduit.attack.target`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CONDUIT_ATTACK_TARGET: TypedKey<Sound>;
  /**
   * `minecraft:block.conduit.deactivate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CONDUIT_DEACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.copper.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.copper.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.copper.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.turn_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_TURN_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_bulb.turn_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_BULB_TURN_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_grate.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_GRATE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_grate.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_GRATE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_grate.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_GRATE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_grate.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_GRATE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_grate.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_GRATE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.copper_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_COPPER_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.coral_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CORAL_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.coral_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CORAL_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.coral_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CORAL_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.coral_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CORAL_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.coral_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CORAL_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.crafter.craft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CRAFTER_CRAFT: TypedKey<Sound>;
  /**
   * `minecraft:block.crafter.fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CRAFTER_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_HURT: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.idle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_IDLE: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:block.creaking_heart.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CREAKING_HEART_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.crop.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CROP_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.insert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_INSERT: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.insert_fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_INSERT_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.shatter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_SHATTER: TypedKey<Sound>;
  /**
   * `minecraft:block.decorated_pot.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DECORATED_POT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_bricks.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BRICKS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_bricks.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BRICKS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_bricks.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BRICKS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_bricks.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BRICKS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_bricks.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_BRICKS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_tiles.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_TILES_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_tiles.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_TILES_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_tiles.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_TILES_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_tiles.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_TILES_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.deepslate_tiles.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEEPSLATE_TILES_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.dispenser.dispense`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DISPENSER_DISPENSE: TypedKey<Sound>;
  /**
   * `minecraft:block.dispenser.fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DISPENSER_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.dispenser.launch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DISPENSER_LAUNCH: TypedKey<Sound>;
  /**
   * `minecraft:block.dripstone_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DRIPSTONE_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.dripstone_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DRIPSTONE_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.dripstone_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DRIPSTONE_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.dripstone_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DRIPSTONE_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.dripstone_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DRIPSTONE_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.enchantment_table.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ENCHANTMENT_TABLE_USE: TypedKey<Sound>;
  /**
   * `minecraft:block.end_gateway.spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_END_GATEWAY_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:block.end_portal.spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_END_PORTAL_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:block.end_portal_frame.fill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_END_PORTAL_FRAME_FILL: TypedKey<Sound>;
  /**
   * `minecraft:block.ender_chest.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ENDER_CHEST_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.ender_chest.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ENDER_CHEST_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.eyeblossom.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_EYEBLOSSOM_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.eyeblossom.close_long`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_EYEBLOSSOM_CLOSE_LONG: TypedKey<Sound>;
  /**
   * `minecraft:block.eyeblossom.idle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_EYEBLOSSOM_IDLE: TypedKey<Sound>;
  /**
   * `minecraft:block.eyeblossom.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_EYEBLOSSOM_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.eyeblossom.open_long`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_EYEBLOSSOM_OPEN_LONG: TypedKey<Sound>;
  /**
   * `minecraft:block.fence_gate.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FENCE_GATE_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.fence_gate.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FENCE_GATE_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.fire.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FIRE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.fire.extinguish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FIRE_EXTINGUISH: TypedKey<Sound>;
  /**
   * `minecraft:block.flowering_azalea.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FLOWERING_AZALEA_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.flowering_azalea.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FLOWERING_AZALEA_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.flowering_azalea.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FLOWERING_AZALEA_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.flowering_azalea.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FLOWERING_AZALEA_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.flowering_azalea.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FLOWERING_AZALEA_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.froglight.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGLIGHT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.froglight.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGLIGHT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.froglight.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGLIGHT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.froglight.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGLIGHT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.froglight.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGLIGHT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.hatch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_HATCH: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.frogspawn.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FROGSPAWN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.fungus.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FUNGUS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.fungus.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FUNGUS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.fungus.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FUNGUS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.fungus.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FUNGUS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.fungus.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FUNGUS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.furnace.fire_crackle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_FURNACE_FIRE_CRACKLE: TypedKey<Sound>;
  /**
   * `minecraft:block.gilded_blackstone.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GILDED_BLACKSTONE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.gilded_blackstone.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GILDED_BLACKSTONE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.gilded_blackstone.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GILDED_BLACKSTONE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.gilded_blackstone.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GILDED_BLACKSTONE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.gilded_blackstone.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GILDED_BLACKSTONE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.glass.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GLASS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.glass.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GLASS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.glass.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GLASS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.glass.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GLASS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.glass.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GLASS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.grass.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRASS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.grass.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRASS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.grass.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRASS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.grass.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRASS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.grass.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRASS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.gravel.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRAVEL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.gravel.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRAVEL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.gravel.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRAVEL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.gravel.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRAVEL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.gravel.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRAVEL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.grindstone.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GRINDSTONE_USE: TypedKey<Sound>;
  /**
   * `minecraft:block.growing_plant.crop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_GROWING_PLANT_CROP: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_roots.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_ROOTS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_roots.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_ROOTS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_roots.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_ROOTS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_roots.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_ROOTS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_roots.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_ROOTS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.hanging_sign.waxed_interact_fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.heavy_core.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HEAVY_CORE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.heavy_core.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HEAVY_CORE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.heavy_core.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HEAVY_CORE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.heavy_core.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HEAVY_CORE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.heavy_core.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HEAVY_CORE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.slide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_SLIDE: TypedKey<Sound>;
  /**
   * `minecraft:block.honey_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_HONEY_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.iron_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_IRON_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.iron_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_IRON_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.iron_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_IRON_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.iron_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_IRON_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.ladder.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LADDER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.ladder.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LADDER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.ladder.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LADDER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.ladder.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LADDER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.ladder.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LADDER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.lantern.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LANTERN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.lantern.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LANTERN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.lantern.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LANTERN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.lantern.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LANTERN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.lantern.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LANTERN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.large_amethyst_bud.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LARGE_AMETHYST_BUD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.large_amethyst_bud.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LARGE_AMETHYST_BUD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.lava.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LAVA_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.lava.extinguish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LAVA_EXTINGUISH: TypedKey<Sound>;
  /**
   * `minecraft:block.lava.pop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LAVA_POP: TypedKey<Sound>;
  /**
   * `minecraft:block.lever.click`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LEVER_CLICK: TypedKey<Sound>;
  /**
   * `minecraft:block.lily_pad.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LILY_PAD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.lodestone.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LODESTONE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.lodestone.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LODESTONE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.lodestone.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LODESTONE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.lodestone.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LODESTONE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.lodestone.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_LODESTONE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.mangrove_roots.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MANGROVE_ROOTS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.mangrove_roots.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MANGROVE_ROOTS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.mangrove_roots.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MANGROVE_ROOTS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.mangrove_roots.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MANGROVE_ROOTS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.mangrove_roots.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MANGROVE_ROOTS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.medium_amethyst_bud.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MEDIUM_AMETHYST_BUD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.medium_amethyst_bud.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MEDIUM_AMETHYST_BUD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.metal.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.metal.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.metal.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.metal.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.metal.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.metal_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.metal_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_METAL_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.moss.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.moss.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.moss.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.moss.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.moss.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.moss_carpet.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_CARPET_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.moss_carpet.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_CARPET_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.moss_carpet.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_CARPET_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.moss_carpet.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_CARPET_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.moss_carpet.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MOSS_CARPET_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.mud.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.mud.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.mud.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.mud.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.mud.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.mud_bricks.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BRICKS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.mud_bricks.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BRICKS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.mud_bricks.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BRICKS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.mud_bricks.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BRICKS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.mud_bricks.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUD_BRICKS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.muddy_mangrove_roots.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUDDY_MANGROVE_ROOTS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.muddy_mangrove_roots.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUDDY_MANGROVE_ROOTS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.muddy_mangrove_roots.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUDDY_MANGROVE_ROOTS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.muddy_mangrove_roots.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUDDY_MANGROVE_ROOTS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.muddy_mangrove_roots.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_MUDDY_MANGROVE_ROOTS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_bricks.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_BRICKS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_bricks.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_BRICKS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_bricks.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_BRICKS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_bricks.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_BRICKS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_bricks.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_BRICKS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_gold_ore.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_GOLD_ORE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_gold_ore.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_GOLD_ORE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_gold_ore.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_GOLD_ORE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_gold_ore.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_GOLD_ORE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_gold_ore.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_GOLD_ORE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_ore.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_ORE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_ore.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_ORE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_ore.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_ORE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_ore.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_ORE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_ore.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_ORE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_sprouts.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_SPROUTS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_sprouts.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_SPROUTS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_sprouts.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_SPROUTS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_sprouts.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_SPROUTS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_sprouts.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_SPROUTS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wart.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WART_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_button.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_button.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_BUTTON_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_fence_gate.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_fence_gate.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_FENCE_GATE_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_hanging_sign.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_hanging_sign.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HANGING_SIGN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_hanging_sign.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HANGING_SIGN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_hanging_sign.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_hanging_sign.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_HANGING_SIGN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.nether_wood_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHER_WOOD_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.netherite_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERITE_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.netherite_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERITE_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.netherite_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERITE_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.netherite_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERITE_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.netherite_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERITE_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.netherrack.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERRACK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.netherrack.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERRACK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.netherrack.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERRACK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.netherrack.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERRACK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.netherrack.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NETHERRACK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.banjo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_BANJO: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.basedrum`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_BASEDRUM: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.bass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_BASS: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.bell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_BELL: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.bit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_BIT: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.chime`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_CHIME: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.cow_bell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_COW_BELL: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.didgeridoo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_DIDGERIDOO: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.flute`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_FLUTE: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.guitar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_GUITAR: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.harp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_HARP: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.hat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_HAT: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.creeper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_CREEPER: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.ender_dragon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.piglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_PIGLIN: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.skeleton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_SKELETON: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.wither_skeleton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.imitate.zombie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.iron_xylophone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_IRON_XYLOPHONE: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.pling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_PLING: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.snare`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_SNARE: TypedKey<Sound>;
  /**
   * `minecraft:block.note_block.xylophone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NOTE_BLOCK_XYLOPHONE: TypedKey<Sound>;
  /**
   * `minecraft:block.nylium.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NYLIUM_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.nylium.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NYLIUM_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.nylium.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NYLIUM_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.nylium.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NYLIUM_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.nylium.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_NYLIUM_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.packed_mud.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PACKED_MUD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.packed_mud.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PACKED_MUD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.packed_mud.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PACKED_MUD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.packed_mud.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PACKED_MUD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.packed_mud.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PACKED_MUD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.pale_hanging_moss.idle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PALE_HANGING_MOSS_IDLE: TypedKey<Sound>;
  /**
   * `minecraft:block.pink_petals.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PINK_PETALS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.pink_petals.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PINK_PETALS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.pink_petals.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PINK_PETALS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.pink_petals.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PINK_PETALS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.pink_petals.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PINK_PETALS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.piston.contract`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PISTON_CONTRACT: TypedKey<Sound>;
  /**
   * `minecraft:block.piston.extend`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PISTON_EXTEND: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.drip_lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_DRIP_LAVA: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.drip_lava_into_cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.drip_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_DRIP_WATER: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.drip_water_into_cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_LAND: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.pointed_dripstone.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POINTED_DRIPSTONE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_deepslate.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_DEEPSLATE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_deepslate.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_DEEPSLATE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_deepslate.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_DEEPSLATE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_deepslate.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_DEEPSLATE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_deepslate.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_DEEPSLATE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_tuff.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_TUFF_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_tuff.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_TUFF_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_tuff.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_TUFF_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_tuff.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_TUFF_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.polished_tuff.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POLISHED_TUFF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.portal.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PORTAL_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.portal.travel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PORTAL_TRAVEL: TypedKey<Sound>;
  /**
   * `minecraft:block.portal.trigger`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PORTAL_TRIGGER: TypedKey<Sound>;
  /**
   * `minecraft:block.powder_snow.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POWDER_SNOW_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.powder_snow.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POWDER_SNOW_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.powder_snow.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POWDER_SNOW_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.powder_snow.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POWDER_SNOW_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.powder_snow.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_POWDER_SNOW_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.pumpkin.carve`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PUMPKIN_CARVE: TypedKey<Sound>;
  /**
   * `minecraft:block.redstone_torch.burnout`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_REDSTONE_TORCH_BURNOUT: TypedKey<Sound>;
  /**
   * `minecraft:block.resin.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.resin.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.resin.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.resin.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.resin_bricks.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BRICKS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.resin_bricks.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BRICKS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.resin_bricks.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BRICKS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.resin_bricks.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BRICKS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.resin_bricks.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESIN_BRICKS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.respawn_anchor.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESPAWN_ANCHOR_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.respawn_anchor.charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESPAWN_ANCHOR_CHARGE: TypedKey<Sound>;
  /**
   * `minecraft:block.respawn_anchor.deplete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESPAWN_ANCHOR_DEPLETE: TypedKey<Sound>;
  /**
   * `minecraft:block.respawn_anchor.set_spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_RESPAWN_ANCHOR_SET_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:block.rooted_dirt.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTED_DIRT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.rooted_dirt.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTED_DIRT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.rooted_dirt.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTED_DIRT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.rooted_dirt.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTED_DIRT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.rooted_dirt.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTED_DIRT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.roots.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.roots.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.roots.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.roots.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.roots.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ROOTS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sand.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SAND_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sand.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SAND_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sand.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SAND_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sand.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SAND_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sand.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SAND_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.scaffolding.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCAFFOLDING_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.scaffolding.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCAFFOLDING_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.scaffolding.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCAFFOLDING_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.scaffolding.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCAFFOLDING_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.scaffolding.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCAFFOLDING_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CHARGE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.spread`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SPREAD: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.bloom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_BLOOM: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_catalyst.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_CATALYST_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.clicking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_CLICKING: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.clicking_stop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_CLICKING_STOP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_sensor.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SENSOR_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.shriek`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_SHRIEK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_shrieker.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_SHRIEKER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_vein.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_VEIN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_vein.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_VEIN_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_vein.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_VEIN_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_vein.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_VEIN_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sculk_vein.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SCULK_VEIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.shroomlight.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHROOMLIGHT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.shroomlight.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHROOMLIGHT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.shroomlight.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHROOMLIGHT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.shroomlight.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHROOMLIGHT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.shroomlight.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHROOMLIGHT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.shulker_box.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHULKER_BOX_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.shulker_box.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SHULKER_BOX_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.sign.waxed_interact_fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SIGN_WAXED_INTERACT_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.slime_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SLIME_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.slime_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SLIME_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.slime_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SLIME_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.slime_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SLIME_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.slime_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SLIME_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.small_amethyst_bud.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_AMETHYST_BUD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.small_amethyst_bud.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_AMETHYST_BUD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.small_dripleaf.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_DRIPLEAF_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.small_dripleaf.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_DRIPLEAF_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.small_dripleaf.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_DRIPLEAF_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.small_dripleaf.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_DRIPLEAF_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.small_dripleaf.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMALL_DRIPLEAF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.smithing_table.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMITHING_TABLE_USE: TypedKey<Sound>;
  /**
   * `minecraft:block.smoker.smoke`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SMOKER_SMOKE: TypedKey<Sound>;
  /**
   * `minecraft:block.sniffer_egg.crack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNIFFER_EGG_CRACK: TypedKey<Sound>;
  /**
   * `minecraft:block.sniffer_egg.hatch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNIFFER_EGG_HATCH: TypedKey<Sound>;
  /**
   * `minecraft:block.sniffer_egg.plop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNIFFER_EGG_PLOP: TypedKey<Sound>;
  /**
   * `minecraft:block.snow.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNOW_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.snow.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNOW_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.snow.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNOW_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.snow.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNOW_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.snow.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SNOW_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_sand.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SAND_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_sand.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SAND_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_sand.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SAND_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_sand.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SAND_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_sand.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SAND_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_soil.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SOIL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_soil.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SOIL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_soil.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SOIL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_soil.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SOIL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.soul_soil.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SOUL_SOIL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.spawner.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPAWNER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.spawner.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPAWNER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.spawner.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPAWNER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.spawner.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPAWNER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.spawner.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPAWNER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.absorb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_ABSORB: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.sponge.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPONGE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.spore_blossom.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPORE_BLOSSOM_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.spore_blossom.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPORE_BLOSSOM_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.spore_blossom.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPORE_BLOSSOM_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.spore_blossom.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPORE_BLOSSOM_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.spore_blossom.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SPORE_BLOSSOM_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.stem.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STEM_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.stem.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STEM_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.stem.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STEM_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.stem.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STEM_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.stem.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STEM_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.stone.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.stone.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.stone.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.stone.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.stone.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.stone_button.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_BUTTON_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.stone_button.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_BUTTON_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.stone_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.stone_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_STONE_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_gravel.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_GRAVEL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_gravel.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_GRAVEL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_gravel.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_GRAVEL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_gravel.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_GRAVEL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_gravel.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_GRAVEL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_sand.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_SAND_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_sand.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_SAND_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_sand.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_SAND_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_sand.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_SAND_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.suspicious_sand.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SUSPICIOUS_SAND_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.sweet_berry_bush.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SWEET_BERRY_BUSH_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.sweet_berry_bush.pick_berries`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES: TypedKey<Sound>;
  /**
   * `minecraft:block.sweet_berry_bush.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_SWEET_BERRY_BUSH_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.about_to_spawn_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_ABOUT_TO_SPAWN_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.ambient_ominous`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_AMBIENT_OMINOUS: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.close_shutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.detect_player`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_DETECT_PLAYER: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.eject_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_EJECT_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.ominous_activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_OMINOUS_ACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.open_shutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.spawn_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_SPAWN_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.spawn_item_begin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_SPAWN_ITEM_BEGIN: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.spawn_mob`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_SPAWN_MOB: TypedKey<Sound>;
  /**
   * `minecraft:block.trial_spawner.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIAL_SPAWNER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.tripwire.attach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIPWIRE_ATTACH: TypedKey<Sound>;
  /**
   * `minecraft:block.tripwire.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIPWIRE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.tripwire.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIPWIRE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.tripwire.detach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TRIPWIRE_DETACH: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff_bricks.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BRICKS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff_bricks.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BRICKS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff_bricks.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BRICKS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff_bricks.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BRICKS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.tuff_bricks.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_TUFF_BRICKS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_ACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.close_shutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_CLOSE_SHUTTER: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.deactivate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_DEACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.eject_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_EJECT_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.insert_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_INSERT_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.insert_item_fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_INSERT_ITEM_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.open_shutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_OPEN_SHUTTER: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.reject_rewarded_player`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_REJECT_REWARDED_PLAYER: TypedKey<Sound>;
  /**
   * `minecraft:block.vault.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VAULT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.vine.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VINE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.vine.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VINE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.vine.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VINE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.vine.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VINE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.vine.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_VINE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.wart_block.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WART_BLOCK_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.wart_block.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WART_BLOCK_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.wart_block.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WART_BLOCK_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.wart_block.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WART_BLOCK_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.wart_block.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WART_BLOCK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.water.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WATER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:block.weeping_vines.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WEEPING_VINES_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.weeping_vines.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WEEPING_VINES_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.weeping_vines.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WEEPING_VINES_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.weeping_vines.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WEEPING_VINES_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.weeping_vines.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WEEPING_VINES_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_grass.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_GRASS_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_grass.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_GRASS_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_grass.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_GRASS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_grass.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_GRASS_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_grass.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_GRASS_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.dries`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_DRIES: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.wet_sponge.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WET_SPONGE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.wood.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.wood.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOD_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.wood.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOD_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.wood.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOD_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.wood.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOD_STEP: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_button.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_BUTTON_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_button.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_BUTTON_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_door.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_DOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_door.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_DOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_pressure_plate.click_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_pressure_plate.click_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_trapdoor.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_TRAPDOOR_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:block.wooden_trapdoor.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOODEN_TRAPDOOR_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:block.wool.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOL_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:block.wool.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:block.wool.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOL_HIT: TypedKey<Sound>;
  /**
   * `minecraft:block.wool.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOL_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:block.wool.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_WOOL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:enchant.thorns.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANT_THORNS_HIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.ambient_with_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_AMBIENT_WITH_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.ambient_without_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.item_given`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_ITEM_GIVEN: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.item_taken`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_ITEM_TAKEN: TypedKey<Sound>;
  /**
   * `minecraft:entity.allay.item_thrown`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ALLAY_ITEM_THROWN: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.brush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_BRUSH: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.hurt_reduced`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_HURT_REDUCED: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.peek`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_PEEK: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.roll`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_ROLL: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.scute_drop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_SCUTE_DROP: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.unroll_finish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_UNROLL_FINISH: TypedKey<Sound>;
  /**
   * `minecraft:entity.armadillo.unroll_start`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMADILLO_UNROLL_START: TypedKey<Sound>;
  /**
   * `minecraft:entity.armor_stand.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMOR_STAND_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.armor_stand.fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMOR_STAND_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.armor_stand.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMOR_STAND_HIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.armor_stand.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARMOR_STAND_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:entity.arrow.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARROW_HIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.arrow.hit_player`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARROW_HIT_PLAYER: TypedKey<Sound>;
  /**
   * `minecraft:entity.arrow.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ARROW_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.idle_air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_IDLE_AIR: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.idle_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_IDLE_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.axolotl.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_AXOLOTL_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.bat.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BAT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.bat.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BAT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.bat.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BAT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.bat.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BAT_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.bat.takeoff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BAT_TAKEOFF: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.loop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_LOOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.loop_aggressive`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_LOOP_AGGRESSIVE: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.pollinate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_POLLINATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.bee.sting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BEE_STING: TypedKey<Sound>;
  /**
   * `minecraft:entity.blaze.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BLAZE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.blaze.burn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BLAZE_BURN: TypedKey<Sound>;
  /**
   * `minecraft:entity.blaze.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BLAZE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.blaze.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BLAZE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.blaze.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BLAZE_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.boat.paddle_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOAT_PADDLE_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.boat.paddle_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOAT_PADDLE_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.bogged.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOGGED_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.bogged.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOGGED_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.bogged.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOGGED_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.bogged.shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOGGED_SHEAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.bogged.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BOGGED_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_CHARGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.deflect`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_DEFLECT: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.idle_air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_IDLE_AIR: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.idle_ground`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_IDLE_GROUND: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.inhale`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_INHALE: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.slide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_SLIDE: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.whirl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_WHIRL: TypedKey<Sound>;
  /**
   * `minecraft:entity.breeze.wind_burst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_BREEZE_WIND_BURST: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.dash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_DASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.dash_ready`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_DASH_READY: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.saddle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_SADDLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.sit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_SIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_STAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.camel.step_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAMEL_STEP_SAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.beg_for_food`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_BEG_FOR_FOOD: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.hiss`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_HISS: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.purr`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_PURR: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.purreow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_PURREOW: TypedKey<Sound>;
  /**
   * `minecraft:entity.cat.stray_ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CAT_STRAY_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.chicken.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CHICKEN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.chicken.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CHICKEN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.chicken.egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CHICKEN_EGG: TypedKey<Sound>;
  /**
   * `minecraft:entity.chicken.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CHICKEN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.chicken.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CHICKEN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.cod.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COD_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cod.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COD_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.cod.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COD_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.cod.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COD_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cow.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COW_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cow.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COW_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.cow.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COW_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.cow.milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COW_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.cow.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_COW_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_ACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.deactivate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_DEACTIVATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.freeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_FREEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.sway`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_SWAY: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.twitch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_TWITCH: TypedKey<Sound>;
  /**
   * `minecraft:entity.creaking.unfreeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREAKING_UNFREEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.creeper.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREEPER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.creeper.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREEPER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.creeper.primed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_CREEPER_PRIMED: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.ambient_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_AMBIENT_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.play`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_PLAY: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.dolphin.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DOLPHIN_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_CHEST: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.donkey.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DONKEY_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.dragon_fireball.explode`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DRAGON_FIREBALL_EXPLODE: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.ambient_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_AMBIENT_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.death_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_DEATH_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.hurt_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_HURT_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.drowned.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DROWNED_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.egg.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EGG_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.ambient_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_AMBIENT_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.curse`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_CURSE: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.death_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_DEATH_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.elder_guardian.hurt_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ELDER_GUARDIAN_HURT_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.flap`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_FLAP: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.growl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_GROWL: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_dragon.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_DRAGON_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_eye.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_EYE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_eye.launch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_EYE_LAUNCH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ender_pearl.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDER_PEARL_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.scream`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_SCREAM: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.stare`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_STARE: TypedKey<Sound>;
  /**
   * `minecraft:entity.enderman.teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMAN_TELEPORT: TypedKey<Sound>;
  /**
   * `minecraft:entity.endermite.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMITE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.endermite.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMITE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.endermite.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMITE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.endermite.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ENDERMITE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.cast_spell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_CAST_SPELL: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.prepare_attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_PREPARE_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.prepare_summon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_PREPARE_SUMMON: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker.prepare_wololo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_PREPARE_WOLOLO: TypedKey<Sound>;
  /**
   * `minecraft:entity.evoker_fangs.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EVOKER_FANGS_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.experience_bottle.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EXPERIENCE_BOTTLE_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.experience_orb.pickup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_EXPERIENCE_ORB_PICKUP: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.blast`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_BLAST: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.blast_far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_BLAST_FAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.large_blast`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_LARGE_BLAST: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.large_blast_far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.launch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_LAUNCH: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.twinkle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_TWINKLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.firework_rocket.twinkle_far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FIREWORK_ROCKET_TWINKLE_FAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.fish.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FISH_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.fishing_bobber.retrieve`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FISHING_BOBBER_RETRIEVE: TypedKey<Sound>;
  /**
   * `minecraft:entity.fishing_bobber.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FISHING_BOBBER_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.fishing_bobber.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FISHING_BOBBER_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.aggro`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_AGGRO: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.bite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_BITE: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.screech`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_SCREECH: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.sleep`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_SLEEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.sniff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_SNIFF: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.spit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_SPIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.fox.teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FOX_TELEPORT: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.lay_spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_LAY_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.long_jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_LONG_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.frog.tongue`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_FROG_TONGUE: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.big_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_BIG_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.burn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_BURN: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.drink`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_DRINK: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.explode`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_EXPLODE: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.extinguish_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_EXTINGUISH_FIRE: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.small_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_SMALL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.generic.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GENERIC_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.scream`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_SCREAM: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ghast.warn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GHAST_WARN: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_item_frame.add_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_ITEM_FRAME_ADD_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_item_frame.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_ITEM_FRAME_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_item_frame.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_ITEM_FRAME_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_item_frame.remove_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_item_frame.rotate_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_squid.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_SQUID_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_squid.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_SQUID_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_squid.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_SQUID_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.glow_squid.squirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GLOW_SQUID_SQUIRT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.horn_break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_HORN_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.long_jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_LONG_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.prepare_ram`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_PREPARE_RAM: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.ram_impact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_RAM_IMPACT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.long_jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_LONG_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.prepare_ram`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_PREPARE_RAM: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.screaming.ram_impact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_SCREAMING_RAM_IMPACT: TypedKey<Sound>;
  /**
   * `minecraft:entity.goat.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GOAT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.ambient_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_AMBIENT_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.death_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_DEATH_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.guardian.hurt_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_GUARDIAN_HURT_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.converted_to_zombified`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.retreat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_RETREAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.hoglin.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOGLIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_ARMOR: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.breathe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_BREATHE: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.gallop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_GALLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.saddle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_SADDLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.horse.step_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HORSE_STEP_WOOD: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.big_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_BIG_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.small_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_SMALL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.hostile.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HOSTILE_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.husk.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HUSK_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.husk.converted_to_zombie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HUSK_CONVERTED_TO_ZOMBIE: TypedKey<Sound>;
  /**
   * `minecraft:entity.husk.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HUSK_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.husk.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HUSK_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.husk.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_HUSK_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.cast_spell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_CAST_SPELL: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.mirror_move`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_MIRROR_MOVE: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.prepare_blindness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_PREPARE_BLINDNESS: TypedKey<Sound>;
  /**
   * `minecraft:entity.illusioner.prepare_mirror`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ILLUSIONER_PREPARE_MIRROR: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_DAMAGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.repair`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_REPAIR: TypedKey<Sound>;
  /**
   * `minecraft:entity.iron_golem.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_IRON_GOLEM_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.item.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.item.pickup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_PICKUP: TypedKey<Sound>;
  /**
   * `minecraft:entity.item_frame.add_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_FRAME_ADD_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.item_frame.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_FRAME_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.item_frame.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_FRAME_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:entity.item_frame.remove_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_FRAME_REMOVE_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.item_frame.rotate_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ITEM_FRAME_ROTATE_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.leash_knot.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LEASH_KNOT_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.leash_knot.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LEASH_KNOT_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:entity.lightning_bolt.impact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LIGHTNING_BOLT_IMPACT: TypedKey<Sound>;
  /**
   * `minecraft:entity.lightning_bolt.thunder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LIGHTNING_BOLT_THUNDER: TypedKey<Sound>;
  /**
   * `minecraft:entity.lingering_potion.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LINGERING_POTION_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_CHEST: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.spit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_SPIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.llama.swag`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_LLAMA_SWAG: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.death_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_DEATH_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.hurt_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_HURT_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.squish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_SQUISH: TypedKey<Sound>;
  /**
   * `minecraft:entity.magma_cube.squish_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MAGMA_CUBE_SQUISH_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.minecart.inside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MINECART_INSIDE: TypedKey<Sound>;
  /**
   * `minecraft:entity.minecart.inside.underwater`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MINECART_INSIDE_UNDERWATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.minecart.riding`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MINECART_RIDING: TypedKey<Sound>;
  /**
   * `minecraft:entity.mooshroom.convert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOOSHROOM_CONVERT: TypedKey<Sound>;
  /**
   * `minecraft:entity.mooshroom.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOOSHROOM_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.mooshroom.milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOOSHROOM_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.mooshroom.shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOOSHROOM_SHEAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.mooshroom.suspicious_milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOOSHROOM_SUSPICIOUS_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_CHEST: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.mule.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MULE_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.ocelot.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_OCELOT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ocelot.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_OCELOT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ocelot.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_OCELOT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.painting.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PAINTING_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.painting.place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PAINTING_PLACE: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.aggressive_ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_AGGRESSIVE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.bite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_BITE: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.cant_breed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_CANT_BREED: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.pre_sneeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_PRE_SNEEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.sneeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_SNEEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.panda.worried_ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PANDA_WORRIED_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.fly`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_FLY: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.blaze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_BLAZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.bogged`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_BOGGED: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.breeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_BREEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.creaking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_CREAKING: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.creeper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_CREEPER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.drowned`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_DROWNED: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.elder_guardian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ELDER_GUARDIAN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.ender_dragon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ENDER_DRAGON: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.endermite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ENDERMITE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.evoker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_EVOKER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.ghast`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_GHAST: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.guardian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_GUARDIAN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.hoglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_HOGLIN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.husk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_HUSK: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.illusioner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ILLUSIONER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.magma_cube`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_MAGMA_CUBE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.phantom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_PHANTOM: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.piglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_PIGLIN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.piglin_brute`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_PIGLIN_BRUTE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.pillager`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_PILLAGER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.ravager`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_RAVAGER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.shulker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_SHULKER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.silverfish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_SILVERFISH: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.skeleton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_SKELETON: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.slime`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_SLIME: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.spider`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_SPIDER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.stray`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_STRAY: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.vex`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_VEX: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.vindicator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_VINDICATOR: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.warden`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_WARDEN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.witch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_WITCH: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.wither`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_WITHER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.wither_skeleton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_WITHER_SKELETON: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.zoglin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ZOGLIN: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.zombie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ZOMBIE: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.imitate.zombie_villager`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER: TypedKey<Sound>;
  /**
   * `minecraft:entity.parrot.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PARROT_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.bite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_BITE: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.flap`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_FLAP: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.phantom.swoop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PHANTOM_SWOOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.pig.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIG_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.pig.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIG_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.pig.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIG_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.pig.saddle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIG_SADDLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.pig.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIG_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.admiring_item`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_ADMIRING_ITEM: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.converted_to_zombified`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.jealous`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_JEALOUS: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.retreat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_RETREAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.converted_to_zombified`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.piglin_brute.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PIGLIN_BRUTE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.pillager.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PILLAGER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.pillager.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PILLAGER_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.pillager.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PILLAGER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.pillager.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PILLAGER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.crit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_CRIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.knockback`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_KNOCKBACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.nodamage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_NODAMAGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.strong`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_STRONG: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.sweep`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_SWEEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.attack.weak`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_ATTACK_WEAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.big_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_BIG_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.breath`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_BREATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.burp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_BURP: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.hurt_drown`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_HURT_DROWN: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.hurt_freeze`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_HURT_FREEZE: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.hurt_on_fire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_HURT_ON_FIRE: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.hurt_sweet_berry_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.levelup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_LEVELUP: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.small_fall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_SMALL_FALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_SPLASH: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.splash.high_speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_SPLASH_HIGH_SPEED: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.player.teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLAYER_TELEPORT: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.ambient_baby`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_AMBIENT_BABY: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.polar_bear.warning`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_POLAR_BEAR_WARNING: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.blow_out`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_BLOW_OUT: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.blow_up`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_BLOW_UP: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.puffer_fish.sting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PUFFER_FISH_STING: TypedKey<Sound>;
  /**
   * `minecraft:entity.rabbit.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RABBIT_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.rabbit.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RABBIT_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.rabbit.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RABBIT_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.rabbit.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RABBIT_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.rabbit.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RABBIT_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.roar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_ROAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.ravager.stunned`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_RAVAGER_STUNNED: TypedKey<Sound>;
  /**
   * `minecraft:entity.salmon.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SALMON_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.salmon.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SALMON_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.salmon.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SALMON_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.salmon.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SALMON_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.sheep.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHEEP_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.sheep.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHEEP_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.sheep.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHEEP_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.sheep.shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHEEP_SHEAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.sheep.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHEEP_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.hurt_closed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_HURT_CLOSED: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_OPEN: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker.teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_TELEPORT: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker_bullet.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_BULLET_HIT: TypedKey<Sound>;
  /**
   * `minecraft:entity.shulker_bullet.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SHULKER_BULLET_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.silverfish.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SILVERFISH_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.silverfish.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SILVERFISH_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.silverfish.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SILVERFISH_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.silverfish.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SILVERFISH_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.converted_to_stray`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_CONVERTED_TO_STRAY: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.ambient_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_AMBIENT_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.gallop_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_GALLOP_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.jump_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_JUMP_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.step_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_STEP_WATER: TypedKey<Sound>;
  /**
   * `minecraft:entity.skeleton_horse.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SKELETON_HORSE_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.death_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_DEATH_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.hurt_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_HURT_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.jump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_JUMP: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.jump_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_JUMP_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.squish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_SQUISH: TypedKey<Sound>;
  /**
   * `minecraft:entity.slime.squish_small`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SLIME_SQUISH_SMALL: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.digging`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_DIGGING: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.digging_stop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_DIGGING_STOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.drop_seed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_DROP_SEED: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.happy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_HAPPY: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.idle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_IDLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.scenting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_SCENTING: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.searching`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_SEARCHING: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.sniffing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_SNIFFING: TypedKey<Sound>;
  /**
   * `minecraft:entity.sniffer.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNIFFER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.snow_golem.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOW_GOLEM_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.snow_golem.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOW_GOLEM_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.snow_golem.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOW_GOLEM_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.snow_golem.shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOW_GOLEM_SHEAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.snow_golem.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOW_GOLEM_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.snowball.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SNOWBALL_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.spider.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPIDER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.spider.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPIDER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.spider.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPIDER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.spider.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPIDER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.splash_potion.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPLASH_POTION_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.splash_potion.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SPLASH_POTION_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.squid.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SQUID_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.squid.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SQUID_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.squid.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SQUID_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.squid.squirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_SQUID_SQUIRT: TypedKey<Sound>;
  /**
   * `minecraft:entity.stray.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRAY_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.stray.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRAY_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.stray.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRAY_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.stray.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRAY_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_EAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.happy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_HAPPY: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.retreat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_RETREAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.saddle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_SADDLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.strider.step_lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_STRIDER_STEP_LAVA: TypedKey<Sound>;
  /**
   * `minecraft:entity.tadpole.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TADPOLE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.tadpole.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TADPOLE_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.tadpole.grow_up`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TADPOLE_GROW_UP: TypedKey<Sound>;
  /**
   * `minecraft:entity.tadpole.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TADPOLE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.tnt.primed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TNT_PRIMED: TypedKey<Sound>;
  /**
   * `minecraft:entity.tropical_fish.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TROPICAL_FISH_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.tropical_fish.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TROPICAL_FISH_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.tropical_fish.flop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TROPICAL_FISH_FLOP: TypedKey<Sound>;
  /**
   * `minecraft:entity.tropical_fish.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TROPICAL_FISH_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.ambient_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_AMBIENT_LAND: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.death_baby`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_DEATH_BABY: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.egg_break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_EGG_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.egg_crack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_EGG_CRACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.egg_hatch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_EGG_HATCH: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.hurt_baby`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_HURT_BABY: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.lay_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_LAY_EGG: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.shamble`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_SHAMBLE: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.shamble_baby`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_SHAMBLE_BABY: TypedKey<Sound>;
  /**
   * `minecraft:entity.turtle.swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_TURTLE_SWIM: TypedKey<Sound>;
  /**
   * `minecraft:entity.vex.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VEX_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.vex.charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VEX_CHARGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.vex.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VEX_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.vex.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VEX_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.no`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_NO: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.trade`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_TRADE: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_armorer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_ARMORER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_butcher`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_BUTCHER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_cartographer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_CARTOGRAPHER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_cleric`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_CLERIC: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_farmer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_FARMER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_fisherman`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_FISHERMAN: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_fletcher`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_FLETCHER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_leatherworker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_LEATHERWORKER: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_librarian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_LIBRARIAN: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_mason`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_MASON: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_shepherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_SHEPHERD: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_toolsmith`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_TOOLSMITH: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.work_weaponsmith`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_WORK_WEAPONSMITH: TypedKey<Sound>;
  /**
   * `minecraft:entity.villager.yes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VILLAGER_YES: TypedKey<Sound>;
  /**
   * `minecraft:entity.vindicator.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VINDICATOR_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.vindicator.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VINDICATOR_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.vindicator.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VINDICATOR_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.vindicator.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_VINDICATOR_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.disappeared`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_DISAPPEARED: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.drink_milk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_DRINK_MILK: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.drink_potion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_DRINK_POTION: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.no`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_NO: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.reappeared`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_REAPPEARED: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.trade`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_TRADE: TypedKey<Sound>;
  /**
   * `minecraft:entity.wandering_trader.yes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WANDERING_TRADER_YES: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.agitated`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_AGITATED: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.attack_impact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_ATTACK_IMPACT: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.dig`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_DIG: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.emerge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_EMERGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.heartbeat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_HEARTBEAT: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.listening`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_LISTENING: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.listening_angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_LISTENING_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.nearby_close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_NEARBY_CLOSE: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.nearby_closer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_NEARBY_CLOSER: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.nearby_closest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_NEARBY_CLOSEST: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.roar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_ROAR: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.sniff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_SNIFF: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.sonic_boom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_SONIC_BOOM: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.sonic_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_SONIC_CHARGE: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.warden.tendril_clicks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WARDEN_TENDRIL_CLICKS: TypedKey<Sound>;
  /**
   * `minecraft:entity.wind_charge.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WIND_CHARGE_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.wind_charge.wind_burst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WIND_CHARGE_WIND_BURST: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.celebrate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_CELEBRATE: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.drink`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_DRINK: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.witch.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITCH_THROW: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.break_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_BREAK_BLOCK: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither.spawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SPAWN: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither_skeleton.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SKELETON_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither_skeleton.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SKELETON_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither_skeleton.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SKELETON_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wither_skeleton.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WITHER_SKELETON_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.growl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_GROWL: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.howl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_HOWL: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.pant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_PANT: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.shake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_SHAKE: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.wolf.whine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_WOLF_WHINE: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.attack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_ATTACK: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zoglin.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOGLIN_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.attack_iron_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_ATTACK_IRON_DOOR: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.attack_wooden_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.break_wooden_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_BREAK_WOODEN_DOOR: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.converted_to_drowned`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_CONVERTED_TO_DROWNED: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.destroy_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_DESTROY_EGG: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.infect`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_INFECT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_horse.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_HORSE_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_horse.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_HORSE_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_horse.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_HORSE_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.converted`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_CONVERTED: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.cure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_CURE: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_HURT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombie_villager.step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIE_VILLAGER_STEP: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombified_piglin.ambient`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIFIED_PIGLIN_AMBIENT: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombified_piglin.angry`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIFIED_PIGLIN_ANGRY: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombified_piglin.death`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIFIED_PIGLIN_DEATH: TypedKey<Sound>;
  /**
   * `minecraft:entity.zombified_piglin.hurt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ZOMBIFIED_PIGLIN_HURT: TypedKey<Sound>;
  /**
   * `minecraft:event.mob_effect.bad_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EVENT_MOB_EFFECT_BAD_OMEN: TypedKey<Sound>;
  /**
   * `minecraft:event.mob_effect.raid_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EVENT_MOB_EFFECT_RAID_OMEN: TypedKey<Sound>;
  /**
   * `minecraft:event.mob_effect.trial_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EVENT_MOB_EFFECT_TRIAL_OMEN: TypedKey<Sound>;
  /**
   * `minecraft:event.raid.horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EVENT_RAID_HORN: TypedKey<Sound>;
  /**
   * `minecraft:intentionally_empty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INTENTIONALLY_EMPTY: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_chain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_CHAIN: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_diamond`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_DIAMOND: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_elytra`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_ELYTRA: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_generic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_GENERIC: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_gold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_GOLD: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_iron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_IRON: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_leather`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_LEATHER: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_netherite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_NETHERITE: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_turtle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_TURTLE: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.equip_wolf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_EQUIP_WOLF: TypedKey<Sound>;
  /**
   * `minecraft:item.armor.unequip_wolf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ARMOR_UNEQUIP_WOLF: TypedKey<Sound>;
  /**
   * `minecraft:item.axe.scrape`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_AXE_SCRAPE: TypedKey<Sound>;
  /**
   * `minecraft:item.axe.strip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_AXE_STRIP: TypedKey<Sound>;
  /**
   * `minecraft:item.axe.wax_off`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_AXE_WAX_OFF: TypedKey<Sound>;
  /**
   * `minecraft:item.bone_meal.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BONE_MEAL_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.book.page_turn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BOOK_PAGE_TURN: TypedKey<Sound>;
  /**
   * `minecraft:item.book.put`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BOOK_PUT: TypedKey<Sound>;
  /**
   * `minecraft:item.bottle.empty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BOTTLE_EMPTY: TypedKey<Sound>;
  /**
   * `minecraft:item.bottle.fill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BOTTLE_FILL: TypedKey<Sound>;
  /**
   * `minecraft:item.bottle.fill_dragonbreath`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BOTTLE_FILL_DRAGONBREATH: TypedKey<Sound>;
  /**
   * `minecraft:item.brush.brushing.generic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BRUSH_BRUSHING_GENERIC: TypedKey<Sound>;
  /**
   * `minecraft:item.brush.brushing.gravel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BRUSH_BRUSHING_GRAVEL: TypedKey<Sound>;
  /**
   * `minecraft:item.brush.brushing.gravel.complete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE: TypedKey<Sound>;
  /**
   * `minecraft:item.brush.brushing.sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BRUSH_BRUSHING_SAND: TypedKey<Sound>;
  /**
   * `minecraft:item.brush.brushing.sand.complete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BRUSH_BRUSHING_SAND_COMPLETE: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty_axolotl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY_AXOLOTL: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty_fish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY_FISH: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty_lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY_LAVA: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty_powder_snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY_POWDER_SNOW: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.empty_tadpole`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_EMPTY_TADPOLE: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill_axolotl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL_AXOLOTL: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill_fish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL_FISH: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill_lava`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL_LAVA: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill_powder_snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL_POWDER_SNOW: TypedKey<Sound>;
  /**
   * `minecraft:item.bucket.fill_tadpole`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUCKET_FILL_TADPOLE: TypedKey<Sound>;
  /**
   * `minecraft:item.bundle.drop_contents`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUNDLE_DROP_CONTENTS: TypedKey<Sound>;
  /**
   * `minecraft:item.bundle.insert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUNDLE_INSERT: TypedKey<Sound>;
  /**
   * `minecraft:item.bundle.insert_fail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUNDLE_INSERT_FAIL: TypedKey<Sound>;
  /**
   * `minecraft:item.bundle.remove_one`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_BUNDLE_REMOVE_ONE: TypedKey<Sound>;
  /**
   * `minecraft:item.chorus_fruit.teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CHORUS_FRUIT_TELEPORT: TypedKey<Sound>;
  /**
   * `minecraft:item.crop.plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROP_PLANT: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_HIT: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.loading_end`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_LOADING_END: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.loading_middle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_LOADING_MIDDLE: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.loading_start`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_LOADING_START: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.quick_charge_1`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_QUICK_CHARGE_1: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.quick_charge_2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_QUICK_CHARGE_2: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.quick_charge_3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_QUICK_CHARGE_3: TypedKey<Sound>;
  /**
   * `minecraft:item.crossbow.shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_CROSSBOW_SHOOT: TypedKey<Sound>;
  /**
   * `minecraft:item.dye.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_DYE_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.elytra.flying`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_ELYTRA_FLYING: TypedKey<Sound>;
  /**
   * `minecraft:item.firecharge.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_FIRECHARGE_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.flintandsteel.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_FLINTANDSTEEL_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.glow_ink_sac.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GLOW_INK_SAC_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.0`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_0: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.1`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_1: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_2: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_3: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.4`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_4: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_5: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.6`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_6: TypedKey<Sound>;
  /**
   * `minecraft:item.goat_horn.sound.7`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_GOAT_HORN_SOUND_7: TypedKey<Sound>;
  /**
   * `minecraft:item.hoe.till`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_HOE_TILL: TypedKey<Sound>;
  /**
   * `minecraft:item.honey_bottle.drink`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_HONEY_BOTTLE_DRINK: TypedKey<Sound>;
  /**
   * `minecraft:item.honeycomb.wax_on`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_HONEYCOMB_WAX_ON: TypedKey<Sound>;
  /**
   * `minecraft:item.ink_sac.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_INK_SAC_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.lodestone_compass.lock`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_LODESTONE_COMPASS_LOCK: TypedKey<Sound>;
  /**
   * `minecraft:item.mace.smash_air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_MACE_SMASH_AIR: TypedKey<Sound>;
  /**
   * `minecraft:item.mace.smash_ground`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_MACE_SMASH_GROUND: TypedKey<Sound>;
  /**
   * `minecraft:item.mace.smash_ground_heavy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_MACE_SMASH_GROUND_HEAVY: TypedKey<Sound>;
  /**
   * `minecraft:item.nether_wart.plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_NETHER_WART_PLANT: TypedKey<Sound>;
  /**
   * `minecraft:item.ominous_bottle.dispose`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_OMINOUS_BOTTLE_DISPOSE: TypedKey<Sound>;
  /**
   * `minecraft:item.shield.block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_SHIELD_BLOCK: TypedKey<Sound>;
  /**
   * `minecraft:item.shield.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_SHIELD_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:item.shovel.flatten`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_SHOVEL_FLATTEN: TypedKey<Sound>;
  /**
   * `minecraft:item.spyglass.stop_using`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_SPYGLASS_STOP_USING: TypedKey<Sound>;
  /**
   * `minecraft:item.spyglass.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_SPYGLASS_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.totem.use`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TOTEM_USE: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.hit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_HIT: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.hit_ground`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_HIT_GROUND: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.return`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_RETURN: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.riptide_1`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_RIPTIDE_1: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.riptide_2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_RIPTIDE_2: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.riptide_3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_RIPTIDE_3: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.throw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_THROW: TypedKey<Sound>;
  /**
   * `minecraft:item.trident.thunder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_TRIDENT_THUNDER: TypedKey<Sound>;
  /**
   * `minecraft:item.wolf_armor.break`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_WOLF_ARMOR_BREAK: TypedKey<Sound>;
  /**
   * `minecraft:item.wolf_armor.crack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_WOLF_ARMOR_CRACK: TypedKey<Sound>;
  /**
   * `minecraft:item.wolf_armor.damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_WOLF_ARMOR_DAMAGE: TypedKey<Sound>;
  /**
   * `minecraft:item.wolf_armor.repair`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_WOLF_ARMOR_REPAIR: TypedKey<Sound>;
  /**
   * `minecraft:music.creative`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_CREATIVE: TypedKey<Sound>;
  /**
   * `minecraft:music.credits`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_CREDITS: TypedKey<Sound>;
  /**
   * `minecraft:music.dragon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DRAGON: TypedKey<Sound>;
  /**
   * `minecraft:music.end`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_END: TypedKey<Sound>;
  /**
   * `minecraft:music.game`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_GAME: TypedKey<Sound>;
  /**
   * `minecraft:music.menu`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_MENU: TypedKey<Sound>;
  /**
   * `minecraft:music.nether.basalt_deltas`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_NETHER_BASALT_DELTAS: TypedKey<Sound>;
  /**
   * `minecraft:music.nether.crimson_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_NETHER_CRIMSON_FOREST: TypedKey<Sound>;
  /**
   * `minecraft:music.nether.nether_wastes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_NETHER_NETHER_WASTES: TypedKey<Sound>;
  /**
   * `minecraft:music.nether.soul_sand_valley`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_NETHER_SOUL_SAND_VALLEY: TypedKey<Sound>;
  /**
   * `minecraft:music.nether.warped_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_NETHER_WARPED_FOREST: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.badlands`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_BADLANDS: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.bamboo_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_BAMBOO_JUNGLE: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.cherry_grove`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_CHERRY_GROVE: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.deep_dark`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_DEEP_DARK: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_DESERT: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.dripstone_caves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_DRIPSTONE_CAVES: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.flower_forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_FLOWER_FOREST: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.forest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_FOREST: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.frozen_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_FROZEN_PEAKS: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.grove`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_GROVE: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.jagged_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_JAGGED_PEAKS: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_JUNGLE: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.lush_caves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_LUSH_CAVES: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.meadow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_MEADOW: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.old_growth_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_OLD_GROWTH_TAIGA: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.snowy_slopes`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_SNOWY_SLOPES: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.sparse_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_SPARSE_JUNGLE: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.stony_peaks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_STONY_PEAKS: TypedKey<Sound>;
  /**
   * `minecraft:music.overworld.swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_OVERWORLD_SWAMP: TypedKey<Sound>;
  /**
   * `minecraft:music.under_water`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_UNDER_WATER: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.11`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_11: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.13`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_13: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_5: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_BLOCKS: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.cat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CAT: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.chirp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CHIRP: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.creator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CREATOR: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.creator_music_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CREATOR_MUSIC_BOX: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_FAR: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.mall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_MALL: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.mellohi`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_MELLOHI: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.otherside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_OTHERSIDE: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.pigstep`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_PIGSTEP: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.precipice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_PRECIPICE: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.relic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_RELIC: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.stal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_STAL: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.strad`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_STRAD: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.wait`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_WAIT: TypedKey<Sound>;
  /**
   * `minecraft:music_disc.ward`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_WARD: TypedKey<Sound>;
  /**
   * `minecraft:particle.soul_escape`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PARTICLE_SOUL_ESCAPE: TypedKey<Sound>;
  /**
   * `minecraft:ui.button.click`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_BUTTON_CLICK: TypedKey<Sound>;
  /**
   * `minecraft:ui.cartography_table.take_result`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_CARTOGRAPHY_TABLE_TAKE_RESULT: TypedKey<Sound>;
  /**
   * `minecraft:ui.hud.bubble_pop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_HUD_BUBBLE_POP: TypedKey<Sound>;
  /**
   * `minecraft:ui.loom.select_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_LOOM_SELECT_PATTERN: TypedKey<Sound>;
  /**
   * `minecraft:ui.loom.take_result`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_LOOM_TAKE_RESULT: TypedKey<Sound>;
  /**
   * `minecraft:ui.stonecutter.select_recipe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_STONECUTTER_SELECT_RECIPE: TypedKey<Sound>;
  /**
   * `minecraft:ui.stonecutter.take_result`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_STONECUTTER_TAKE_RESULT: TypedKey<Sound>;
  /**
   * `minecraft:ui.toast.challenge_complete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_TOAST_CHALLENGE_COMPLETE: TypedKey<Sound>;
  /**
   * `minecraft:ui.toast.in`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_TOAST_IN: TypedKey<Sound>;
  /**
   * `minecraft:ui.toast.out`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UI_TOAST_OUT: TypedKey<Sound>;
  /**
   * `minecraft:weather.rain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHER_RAIN: TypedKey<Sound>;
  /**
   * `minecraft:weather.rain.above`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHER_RAIN_ABOVE: TypedKey<Sound>;
}
/**
 * Vanilla keys for {@link RegistryKey#GAME_EVENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class GameEventKeys {
  /**
   * `minecraft:block_activate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ACTIVATE: TypedKey<GameEvent>;
  /**
   * `minecraft:block_attach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_ATTACH: TypedKey<GameEvent>;
  /**
   * `minecraft:block_change`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CHANGE: TypedKey<GameEvent>;
  /**
   * `minecraft:block_close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_CLOSE: TypedKey<GameEvent>;
  /**
   * `minecraft:block_deactivate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DEACTIVATE: TypedKey<GameEvent>;
  /**
   * `minecraft:block_destroy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DESTROY: TypedKey<GameEvent>;
  /**
   * `minecraft:block_detach`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_DETACH: TypedKey<GameEvent>;
  /**
   * `minecraft:block_open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_OPEN: TypedKey<GameEvent>;
  /**
   * `minecraft:block_place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCK_PLACE: TypedKey<GameEvent>;
  /**
   * `minecraft:container_close`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONTAINER_CLOSE: TypedKey<GameEvent>;
  /**
   * `minecraft:container_open`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONTAINER_OPEN: TypedKey<GameEvent>;
  /**
   * `minecraft:drink`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRINK: TypedKey<GameEvent>;
  /**
   * `minecraft:eat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EAT: TypedKey<GameEvent>;
  /**
   * `minecraft:elytra_glide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ELYTRA_GLIDE: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_action`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_ACTION: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DAMAGE: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_die`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DIE: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_dismount`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_DISMOUNT: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_interact`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_INTERACT: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_mount`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_MOUNT: TypedKey<GameEvent>;
  /**
   * `minecraft:entity_place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENTITY_PLACE: TypedKey<GameEvent>;
  /**
   * `minecraft:equip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EQUIP: TypedKey<GameEvent>;
  /**
   * `minecraft:explode`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPLODE: TypedKey<GameEvent>;
  /**
   * `minecraft:flap`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLAP: TypedKey<GameEvent>;
  /**
   * `minecraft:fluid_pickup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLUID_PICKUP: TypedKey<GameEvent>;
  /**
   * `minecraft:fluid_place`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLUID_PLACE: TypedKey<GameEvent>;
  /**
   * `minecraft:hit_ground`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HIT_GROUND: TypedKey<GameEvent>;
  /**
   * `minecraft:instrument_play`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INSTRUMENT_PLAY: TypedKey<GameEvent>;
  /**
   * `minecraft:item_interact_finish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_INTERACT_FINISH: TypedKey<GameEvent>;
  /**
   * `minecraft:item_interact_start`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_INTERACT_START: TypedKey<GameEvent>;
  /**
   * `minecraft:jukebox_play`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUKEBOX_PLAY: TypedKey<GameEvent>;
  /**
   * `minecraft:jukebox_stop_play`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUKEBOX_STOP_PLAY: TypedKey<GameEvent>;
  /**
   * `minecraft:lightning_strike`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHTNING_STRIKE: TypedKey<GameEvent>;
  /**
   * `minecraft:note_block_play`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NOTE_BLOCK_PLAY: TypedKey<GameEvent>;
  /**
   * `minecraft:prime_fuse`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRIME_FUSE: TypedKey<GameEvent>;
  /**
   * `minecraft:projectile_land`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PROJECTILE_LAND: TypedKey<GameEvent>;
  /**
   * `minecraft:projectile_shoot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PROJECTILE_SHOOT: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_1`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_1: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_2: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_3: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_4`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_4: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_5: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_6`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_6: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_7`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_7: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_8`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_8: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_9`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_9: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_10`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_10: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_11`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_11: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_12`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_12: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_13`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_13: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_14`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_14: TypedKey<GameEvent>;
  /**
   * `minecraft:resonate_15`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESONATE_15: TypedKey<GameEvent>;
  /**
   * `minecraft:sculk_sensor_tendrils_clicking`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_SENSOR_TENDRILS_CLICKING: TypedKey<GameEvent>;
  /**
   * `minecraft:shear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEAR: TypedKey<GameEvent>;
  /**
   * `minecraft:shriek`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHRIEK: TypedKey<GameEvent>;
  /**
   * `minecraft:splash`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPLASH: TypedKey<GameEvent>;
  /**
   * `minecraft:step`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STEP: TypedKey<GameEvent>;
  /**
   * `minecraft:swim`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWIM: TypedKey<GameEvent>;
  /**
   * `minecraft:teleport`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TELEPORT: TypedKey<GameEvent>;
  /**
   * `minecraft:unequip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNEQUIP: TypedKey<GameEvent>;
  /**
   * Creates a key for {@link GameEvent} in the registry `minecraft:game_event`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<GameEvent>;
}
/**
 * Vanilla keys for {@link RegistryKey#STRUCTURE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class StructureKeys {
  /**
   * `minecraft:ancient_city`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANCIENT_CITY: TypedKey<Structure>;
  /**
   * `minecraft:bastion_remnant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASTION_REMNANT: TypedKey<Structure>;
  /**
   * `minecraft:buried_treasure`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURIED_TREASURE: TypedKey<Structure>;
  /**
   * `minecraft:desert_pyramid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DESERT_PYRAMID: TypedKey<Structure>;
  /**
   * `minecraft:end_city`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_CITY: TypedKey<Structure>;
  /**
   * `minecraft:fortress`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FORTRESS: TypedKey<Structure>;
  /**
   * `minecraft:igloo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IGLOO: TypedKey<Structure>;
  /**
   * `minecraft:jungle_pyramid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_PYRAMID: TypedKey<Structure>;
  /**
   * `minecraft:mansion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANSION: TypedKey<Structure>;
  /**
   * `minecraft:mineshaft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINESHAFT: TypedKey<Structure>;
  /**
   * `minecraft:mineshaft_mesa`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINESHAFT_MESA: TypedKey<Structure>;
  /**
   * `minecraft:monument`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MONUMENT: TypedKey<Structure>;
  /**
   * `minecraft:nether_fossil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_FOSSIL: TypedKey<Structure>;
  /**
   * `minecraft:ocean_ruin_cold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN_RUIN_COLD: TypedKey<Structure>;
  /**
   * `minecraft:ocean_ruin_warm`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCEAN_RUIN_WARM: TypedKey<Structure>;
  /**
   * `minecraft:pillager_outpost`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PILLAGER_OUTPOST: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_DESERT: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_JUNGLE: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_mountain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_MOUNTAIN: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_nether`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_NETHER: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_ocean`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_OCEAN: TypedKey<Structure>;
  /**
   * `minecraft:ruined_portal_swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUINED_PORTAL_SWAMP: TypedKey<Structure>;
  /**
   * `minecraft:shipwreck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHIPWRECK: TypedKey<Structure>;
  /**
   * `minecraft:shipwreck_beached`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHIPWRECK_BEACHED: TypedKey<Structure>;
  /**
   * `minecraft:stronghold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRONGHOLD: TypedKey<Structure>;
  /**
   * `minecraft:swamp_hut`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWAMP_HUT: TypedKey<Structure>;
  /**
   * `minecraft:trail_ruins`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAIL_RUINS: TypedKey<Structure>;
  /**
   * `minecraft:trial_chambers`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_CHAMBERS: TypedKey<Structure>;
  /**
   * `minecraft:village_desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_DESERT: TypedKey<Structure>;
  /**
   * `minecraft:village_plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_PLAINS: TypedKey<Structure>;
  /**
   * `minecraft:village_savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_SAVANNA: TypedKey<Structure>;
  /**
   * `minecraft:village_snowy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_SNOWY: TypedKey<Structure>;
  /**
   * `minecraft:village_taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGE_TAIGA: TypedKey<Structure>;
  /**
   * Creates a key for {@link Structure} in the registry `minecraft:worldgen/structure`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<Structure>;
}
/**
 * Vanilla keys for {@link RegistryKey#ITEM}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class ItemTypeKeys {
  /**
   * `minecraft:acacia_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:acacia_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACACIA_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:activator_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ACTIVATOR_RAIL: TypedKey<ItemType>;
  /**
   * `minecraft:air`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AIR: TypedKey<ItemType>;
  /**
   * `minecraft:allay_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLAY_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:allium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ALLIUM: TypedKey<ItemType>;
  /**
   * `minecraft:amethyst_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:amethyst_cluster`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST_CLUSTER: TypedKey<ItemType>;
  /**
   * `minecraft:amethyst_shard`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST_SHARD: TypedKey<ItemType>;
  /**
   * `minecraft:ancient_debris`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANCIENT_DEBRIS: TypedKey<ItemType>;
  /**
   * `minecraft:andesite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE: TypedKey<ItemType>;
  /**
   * `minecraft:andesite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:andesite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:andesite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANDESITE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:angler_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANGLER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANVIL: TypedKey<ItemType>;
  /**
   * `minecraft:apple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly APPLE: TypedKey<ItemType>;
  /**
   * `minecraft:archer_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARCHER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:armadillo_scute`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMADILLO_SCUTE: TypedKey<ItemType>;
  /**
   * `minecraft:armadillo_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMADILLO_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:armor_stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMOR_STAND: TypedKey<ItemType>;
  /**
   * `minecraft:arms_up_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMS_UP_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:arrow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARROW: TypedKey<ItemType>;
  /**
   * `minecraft:axolotl_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTL_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:axolotl_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AXOLOTL_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:azalea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA: TypedKey<ItemType>;
  /**
   * `minecraft:azalea_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZALEA_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:azure_bluet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AZURE_BLUET: TypedKey<ItemType>;
  /**
   * `minecraft:baked_potato`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAKED_POTATO: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_chest_raft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_CHEST_RAFT: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_mosaic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_mosaic_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_mosaic_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_MOSAIC_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_raft`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_RAFT: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:bamboo_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAMBOO_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:barrel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BARREL: TypedKey<ItemType>;
  /**
   * `minecraft:barrier`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BARRIER: TypedKey<ItemType>;
  /**
   * `minecraft:basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BASALT: TypedKey<ItemType>;
  /**
   * `minecraft:bat_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:beacon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACON: TypedKey<ItemType>;
  /**
   * `minecraft:bedrock`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEDROCK: TypedKey<ItemType>;
  /**
   * `minecraft:bee_nest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_NEST: TypedKey<ItemType>;
  /**
   * `minecraft:bee_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:beef`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEEF: TypedKey<ItemType>;
  /**
   * `minecraft:beehive`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEEHIVE: TypedKey<ItemType>;
  /**
   * `minecraft:beetroot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEETROOT: TypedKey<ItemType>;
  /**
   * `minecraft:beetroot_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEETROOT_SEEDS: TypedKey<ItemType>;
  /**
   * `minecraft:beetroot_soup`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEETROOT_SOUP: TypedKey<ItemType>;
  /**
   * `minecraft:bell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BELL: TypedKey<ItemType>;
  /**
   * `minecraft:big_dripleaf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIG_DRIPLEAF: TypedKey<ItemType>;
  /**
   * `minecraft:birch_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:birch_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:birch_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:birch_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:birch_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:birch_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:birch_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:birch_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:birch_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:birch_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:birch_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:birch_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:birch_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:birch_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:birch_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:birch_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:birch_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BIRCH_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:black_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:black_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_BED: TypedKey<ItemType>;
  /**
   * `minecraft:black_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:black_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:black_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:black_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:black_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:black_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:black_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:black_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:black_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:black_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:black_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:black_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:blackstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:blackstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:blackstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACKSTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:blade_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLADE_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:blast_furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAST_FURNACE: TypedKey<ItemType>;
  /**
   * `minecraft:blaze_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAZE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:blaze_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAZE_ROD: TypedKey<ItemType>;
  /**
   * `minecraft:blaze_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAZE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:blue_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:blue_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_BED: TypedKey<ItemType>;
  /**
   * `minecraft:blue_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:blue_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:blue_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:blue_ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_ICE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_orchid`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_ORCHID: TypedKey<ItemType>;
  /**
   * `minecraft:blue_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:blue_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:blue_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:blue_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:blue_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLUE_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:bogged_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOGGED_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:bolt_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOLT_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:bone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BONE: TypedKey<ItemType>;
  /**
   * `minecraft:bone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BONE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:bone_meal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BONE_MEAL: TypedKey<ItemType>;
  /**
   * `minecraft:book`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOOK: TypedKey<ItemType>;
  /**
   * `minecraft:bookshelf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOOKSHELF: TypedKey<ItemType>;
  /**
   * `minecraft:bordure_indented_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BORDURE_INDENTED_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:bow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOW: TypedKey<ItemType>;
  /**
   * `minecraft:bowl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BOWL: TypedKey<ItemType>;
  /**
   * `minecraft:brain_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:brain_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:brain_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRAIN_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:bread`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREAD: TypedKey<ItemType>;
  /**
   * `minecraft:breeze_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREEZE_ROD: TypedKey<ItemType>;
  /**
   * `minecraft:breeze_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREEZE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:brewer_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREWER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:brewing_stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREWING_STAND: TypedKey<ItemType>;
  /**
   * `minecraft:brick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK: TypedKey<ItemType>;
  /**
   * `minecraft:brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:brown_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:brown_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_BED: TypedKey<ItemType>;
  /**
   * `minecraft:brown_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:brown_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:brown_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:brown_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:brown_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:brown_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:brown_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:brown_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_MUSHROOM: TypedKey<ItemType>;
  /**
   * `minecraft:brown_mushroom_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_MUSHROOM_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:brown_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:brown_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:brown_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:brown_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:brown_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BROWN_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:brush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BRUSH: TypedKey<ItemType>;
  /**
   * `minecraft:bubble_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:bubble_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:bubble_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUBBLE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:budding_amethyst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUDDING_AMETHYST: TypedKey<ItemType>;
  /**
   * `minecraft:bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:burn_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BURN_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:cactus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CACTUS: TypedKey<ItemType>;
  /**
   * `minecraft:cake`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAKE: TypedKey<ItemType>;
  /**
   * `minecraft:calcite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALCITE: TypedKey<ItemType>;
  /**
   * `minecraft:calibrated_sculk_sensor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALIBRATED_SCULK_SENSOR: TypedKey<ItemType>;
  /**
   * `minecraft:camel_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMEL_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:campfire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAMPFIRE: TypedKey<ItemType>;
  /**
   * `minecraft:candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:carrot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARROT: TypedKey<ItemType>;
  /**
   * `minecraft:carrot_on_a_stick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARROT_ON_A_STICK: TypedKey<ItemType>;
  /**
   * `minecraft:cartography_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARTOGRAPHY_TABLE: TypedKey<ItemType>;
  /**
   * `minecraft:carved_pumpkin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARVED_PUMPKIN: TypedKey<ItemType>;
  /**
   * `minecraft:cat_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:cauldron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAULDRON: TypedKey<ItemType>;
  /**
   * `minecraft:cave_spider_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAVE_SPIDER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:chain`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAIN: TypedKey<ItemType>;
  /**
   * `minecraft:chain_command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAIN_COMMAND_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:chainmail_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAINMAIL_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:chainmail_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAINMAIL_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:chainmail_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAINMAIL_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:chainmail_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHAINMAIL_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:charcoal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHARCOAL: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:cherry_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHERRY_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHEST: TypedKey<ItemType>;
  /**
   * `minecraft:chest_minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHEST_MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:chicken`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHICKEN: TypedKey<ItemType>;
  /**
   * `minecraft:chicken_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHICKEN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:chipped_anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHIPPED_ANVIL: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_bookshelf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_BOOKSHELF: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_NETHER_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_polished_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_POLISHED_BLACKSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_quartz_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_QUARTZ_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_RED_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_resin_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_RESIN_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_TUFF: TypedKey<ItemType>;
  /**
   * `minecraft:chiseled_tuff_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHISELED_TUFF_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:chorus_flower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHORUS_FLOWER: TypedKey<ItemType>;
  /**
   * `minecraft:chorus_fruit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHORUS_FRUIT: TypedKey<ItemType>;
  /**
   * `minecraft:chorus_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHORUS_PLANT: TypedKey<ItemType>;
  /**
   * `minecraft:clay`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLAY: TypedKey<ItemType>;
  /**
   * `minecraft:clay_ball`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLAY_BALL: TypedKey<ItemType>;
  /**
   * `minecraft:clock`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:closed_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLOSED_EYEBLOSSOM: TypedKey<ItemType>;
  /**
   * `minecraft:coal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL: TypedKey<ItemType>;
  /**
   * `minecraft:coal_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:coal_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAL_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:coarse_dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COARSE_DIRT: TypedKey<ItemType>;
  /**
   * `minecraft:coast_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COAST_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:cobbled_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:cobbled_deepslate_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cobbled_deepslate_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:cobbled_deepslate_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLED_DEEPSLATE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE: TypedKey<ItemType>;
  /**
   * `minecraft:cobblestone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cobblestone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:cobblestone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBBLESTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:cobweb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COBWEB: TypedKey<ItemType>;
  /**
   * `minecraft:cocoa_beans`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COCOA_BEANS: TypedKey<ItemType>;
  /**
   * `minecraft:cod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COD: TypedKey<ItemType>;
  /**
   * `minecraft:cod_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COD_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:cod_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COD_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMMAND_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:command_block_minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMMAND_BLOCK_MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:comparator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPARATOR: TypedKey<ItemType>;
  /**
   * `minecraft:compass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPASS: TypedKey<ItemType>;
  /**
   * `minecraft:composter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COMPOSTER: TypedKey<ItemType>;
  /**
   * `minecraft:conduit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONDUIT: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_beef`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_BEEF: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_chicken`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_CHICKEN: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_cod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_COD: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_mutton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_MUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_porkchop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_PORKCHOP: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_rabbit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_RABBIT: TypedKey<ItemType>;
  /**
   * `minecraft:cooked_salmon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKED_SALMON: TypedKey<ItemType>;
  /**
   * `minecraft:cookie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COOKIE: TypedKey<ItemType>;
  /**
   * `minecraft:copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:copper_ingot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_INGOT: TypedKey<ItemType>;
  /**
   * `minecraft:copper_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:cornflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CORNFLOWER: TypedKey<ItemType>;
  /**
   * `minecraft:cow_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COW_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:cracked_deepslate_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_DEEPSLATE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:cracked_deepslate_tiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_DEEPSLATE_TILES: TypedKey<ItemType>;
  /**
   * `minecraft:cracked_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_NETHER_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:cracked_polished_blackstone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_POLISHED_BLACKSTONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:cracked_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRACKED_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:crafter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTER: TypedKey<ItemType>;
  /**
   * `minecraft:crafting_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTING_TABLE: TypedKey<ItemType>;
  /**
   * `minecraft:creaking_heart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREAKING_HEART: TypedKey<ItemType>;
  /**
   * `minecraft:creaking_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREAKING_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:creeper_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:creeper_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_HEAD: TypedKey<ItemType>;
  /**
   * `minecraft:creeper_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREEPER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_FUNGUS: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_HYPHAE: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_nylium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_NYLIUM: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_ROOTS: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_STEM: TypedKey<ItemType>;
  /**
   * `minecraft:crimson_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRIMSON_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:crossbow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CROSSBOW: TypedKey<ItemType>;
  /**
   * `minecraft:crying_obsidian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRYING_OBSIDIAN: TypedKey<ItemType>;
  /**
   * `minecraft:cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:cut_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_RED_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:cut_red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_RED_SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cut_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:cut_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CUT_SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_BED: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:cyan_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CYAN_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:damaged_anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAMAGED_ANVIL: TypedKey<ItemType>;
  /**
   * `minecraft:dandelion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DANDELION: TypedKey<ItemType>;
  /**
   * `minecraft:danger_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DANGER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:dark_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:dark_prismarine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE: TypedKey<ItemType>;
  /**
   * `minecraft:dark_prismarine_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:dark_prismarine_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARK_PRISMARINE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:daylight_detector`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DAYLIGHT_DETECTOR: TypedKey<ItemType>;
  /**
   * `minecraft:dead_brain_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:dead_brain_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dead_brain_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BRAIN_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:dead_bubble_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:dead_bubble_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dead_bubble_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUBBLE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:dead_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_BUSH: TypedKey<ItemType>;
  /**
   * `minecraft:dead_fire_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:dead_fire_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dead_fire_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_FIRE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:dead_horn_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:dead_horn_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dead_horn_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_HORN_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:dead_tube_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:dead_tube_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dead_tube_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEAD_TUBE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:debug_stick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEBUG_STICK: TypedKey<ItemType>;
  /**
   * `minecraft:decorated_pot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DECORATED_POT: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_coal_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_COAL_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_copper_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_COPPER_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_diamond_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_DIAMOND_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_emerald_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_EMERALD_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_GOLD_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_iron_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_IRON_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_lapis_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_LAPIS_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_redstone_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_REDSTONE_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_tile_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_tile_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_tile_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:deepslate_tiles`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DEEPSLATE_TILES: TypedKey<ItemType>;
  /**
   * `minecraft:detector_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DETECTOR_RAIL: TypedKey<ItemType>;
  /**
   * `minecraft:diamond`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_horse_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_HORSE_ARMOR: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:diamond_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:diorite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE: TypedKey<ItemType>;
  /**
   * `minecraft:diorite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:diorite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:diorite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIORITE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT: TypedKey<ItemType>;
  /**
   * `minecraft:dirt_path`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIRT_PATH: TypedKey<ItemType>;
  /**
   * `minecraft:field_masoned_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIELD_MASONED_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:fletching_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLETCHING_TABLE: TypedKey<ItemType>;
  /**
   * `minecraft:flow_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOW_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:flower_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:glow_berries`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_BERRIES: TypedKey<ItemType>;
  /**
   * `minecraft:goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOAT_HORN: TypedKey<ItemType>;
  /**
   * `minecraft:grindstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRINDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:honeycomb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEYCOMB: TypedKey<ItemType>;
  /**
   * `minecraft:lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LANTERN: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_5: TypedKey<ItemType>;
  /**
   * `minecraft:disc_fragment_5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DISC_FRAGMENT_5: TypedKey<ItemType>;
  /**
   * `minecraft:dispenser`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DISPENSER: TypedKey<ItemType>;
  /**
   * `minecraft:dolphin_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOLPHIN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:donkey_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DONKEY_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:dragon_breath`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_BREATH: TypedKey<ItemType>;
  /**
   * `minecraft:dragon_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:dragon_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRAGON_HEAD: TypedKey<ItemType>;
  /**
   * `minecraft:dried_kelp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIED_KELP: TypedKey<ItemType>;
  /**
   * `minecraft:dried_kelp_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIED_KELP_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dripstone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DRIPSTONE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:dropper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DROPPER: TypedKey<ItemType>;
  /**
   * `minecraft:drowned_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DROWNED_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:dune_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DUNE_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:echo_shard`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ECHO_SHARD: TypedKey<ItemType>;
  /**
   * `minecraft:egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EGG: TypedKey<ItemType>;
  /**
   * `minecraft:elder_guardian_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ELDER_GUARDIAN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:elytra`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ELYTRA: TypedKey<ItemType>;
  /**
   * `minecraft:emerald`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD: TypedKey<ItemType>;
  /**
   * `minecraft:emerald_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:emerald_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:enchanted_book`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTED_BOOK: TypedKey<ItemType>;
  /**
   * `minecraft:enchanted_golden_apple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTED_GOLDEN_APPLE: TypedKey<ItemType>;
  /**
   * `minecraft:enchanting_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTING_TABLE: TypedKey<ItemType>;
  /**
   * `minecraft:end_crystal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_CRYSTAL: TypedKey<ItemType>;
  /**
   * `minecraft:end_portal_frame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_PORTAL_FRAME: TypedKey<ItemType>;
  /**
   * `minecraft:end_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_ROD: TypedKey<ItemType>;
  /**
   * `minecraft:end_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE: TypedKey<ItemType>;
  /**
   * `minecraft:end_stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:end_stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:end_stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:end_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly END_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:ender_chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_CHEST: TypedKey<ItemType>;
  /**
   * `minecraft:ender_dragon_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_DRAGON_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:ender_eye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_EYE: TypedKey<ItemType>;
  /**
   * `minecraft:ender_pearl`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDER_PEARL: TypedKey<ItemType>;
  /**
   * `minecraft:enderman_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDERMAN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:endermite_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENDERMITE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:evoker_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EVOKER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:experience_bottle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPERIENCE_BOTTLE: TypedKey<ItemType>;
  /**
   * `minecraft:explorer_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPLORER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:exposed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EXPOSED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:eye_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EYE_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:farmland`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FARMLAND: TypedKey<ItemType>;
  /**
   * `minecraft:feather`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FEATHER: TypedKey<ItemType>;
  /**
   * `minecraft:fermented_spider_eye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FERMENTED_SPIDER_EYE: TypedKey<ItemType>;
  /**
   * `minecraft:fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FERN: TypedKey<ItemType>;
  /**
   * `minecraft:filled_map`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FILLED_MAP: TypedKey<ItemType>;
  /**
   * `minecraft:fire_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CHARGE: TypedKey<ItemType>;
  /**
   * `minecraft:fire_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:fire_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:fire_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:firework_rocket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIREWORK_ROCKET: TypedKey<ItemType>;
  /**
   * `minecraft:firework_star`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIREWORK_STAR: TypedKey<ItemType>;
  /**
   * `minecraft:fishing_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FISHING_ROD: TypedKey<ItemType>;
  /**
   * `minecraft:flint`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLINT: TypedKey<ItemType>;
  /**
   * `minecraft:flint_and_steel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLINT_AND_STEEL: TypedKey<ItemType>;
  /**
   * `minecraft:flow_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOW_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:flow_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOW_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:flower_pot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWER_POT: TypedKey<ItemType>;
  /**
   * `minecraft:flowering_azalea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWERING_AZALEA: TypedKey<ItemType>;
  /**
   * `minecraft:flowering_azalea_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLOWERING_AZALEA_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:fox_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FOX_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:friend_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FRIEND_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:frog_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROG_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:frogspawn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FROGSPAWN: TypedKey<ItemType>;
  /**
   * `minecraft:furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FURNACE: TypedKey<ItemType>;
  /**
   * `minecraft:furnace_minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FURNACE_MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:ghast_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GHAST_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:ghast_tear`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GHAST_TEAR: TypedKey<ItemType>;
  /**
   * `minecraft:gilded_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GILDED_BLACKSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:glass_bottle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLASS_BOTTLE: TypedKey<ItemType>;
  /**
   * `minecraft:glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:glistering_melon_slice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLISTERING_MELON_SLICE: TypedKey<ItemType>;
  /**
   * `minecraft:globe_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOBE_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:glow_ink_sac`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_INK_SAC: TypedKey<ItemType>;
  /**
   * `minecraft:glow_item_frame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_ITEM_FRAME: TypedKey<ItemType>;
  /**
   * `minecraft:glow_lichen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_LICHEN: TypedKey<ItemType>;
  /**
   * `minecraft:glow_squid_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOW_SQUID_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:glowstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOWSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:glowstone_dust`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOWSTONE_DUST: TypedKey<ItemType>;
  /**
   * `minecraft:goat_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOAT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:gold_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:gold_ingot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_INGOT: TypedKey<ItemType>;
  /**
   * `minecraft:gold_nugget`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_NUGGET: TypedKey<ItemType>;
  /**
   * `minecraft:gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_apple`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_APPLE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:golden_carrot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_CARROT: TypedKey<ItemType>;
  /**
   * `minecraft:golden_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:golden_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_horse_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_HORSE_ARMOR: TypedKey<ItemType>;
  /**
   * `minecraft:golden_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:golden_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:golden_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:golden_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLDEN_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:granite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE: TypedKey<ItemType>;
  /**
   * `minecraft:granite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:granite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:granite_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRANITE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:grass_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRASS_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:gravel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAVEL: TypedKey<ItemType>;
  /**
   * `minecraft:gray_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:gray_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_BED: TypedKey<ItemType>;
  /**
   * `minecraft:gray_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:gray_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:gray_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:gray_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:gray_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:gray_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:gray_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:gray_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:gray_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:gray_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:gray_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:gray_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRAY_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:green_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:green_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_BED: TypedKey<ItemType>;
  /**
   * `minecraft:green_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:green_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:green_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:green_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:green_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:green_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:green_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:green_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:green_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:green_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:green_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:green_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GREEN_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:guardian_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUARDIAN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:gunpowder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUNPOWDER: TypedKey<ItemType>;
  /**
   * `minecraft:guster_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUSTER_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:guster_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GUSTER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:hanging_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HANGING_ROOTS: TypedKey<ItemType>;
  /**
   * `minecraft:hay_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HAY_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:heart_of_the_sea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEART_OF_THE_SEA: TypedKey<ItemType>;
  /**
   * `minecraft:heart_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEART_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:heartbreak_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEARTBREAK_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:heavy_core`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEAVY_CORE: TypedKey<ItemType>;
  /**
   * `minecraft:heavy_weighted_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEAVY_WEIGHTED_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:hoglin_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOGLIN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:honey_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEY_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:honey_bottle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEY_BOTTLE: TypedKey<ItemType>;
  /**
   * `minecraft:honeycomb_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HONEYCOMB_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:hopper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOPPER: TypedKey<ItemType>;
  /**
   * `minecraft:hopper_minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOPPER_MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:horn_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:horn_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:horn_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORN_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:horse_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HORSE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:host_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOST_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:howl_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOWL_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:husk_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HUSK_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ICE: TypedKey<ItemType>;
  /**
   * `minecraft:infested_chiseled_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_CHISELED_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:infested_cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_COBBLESTONE: TypedKey<ItemType>;
  /**
   * `minecraft:infested_cracked_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_CRACKED_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:infested_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:infested_mossy_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_MOSSY_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:infested_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_STONE: TypedKey<ItemType>;
  /**
   * `minecraft:infested_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:ink_sac`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INK_SAC: TypedKey<ItemType>;
  /**
   * `minecraft:iron_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:iron_bars`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_BARS: TypedKey<ItemType>;
  /**
   * `minecraft:iron_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:iron_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:iron_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:iron_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:iron_golem_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_GOLEM_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:iron_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:iron_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:iron_horse_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_HORSE_ARMOR: TypedKey<ItemType>;
  /**
   * `minecraft:iron_ingot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_INGOT: TypedKey<ItemType>;
  /**
   * `minecraft:iron_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:iron_nugget`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_NUGGET: TypedKey<ItemType>;
  /**
   * `minecraft:iron_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:iron_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:iron_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:iron_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:iron_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:item_frame`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ITEM_FRAME: TypedKey<ItemType>;
  /**
   * `minecraft:jack_o_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JACK_O_LANTERN: TypedKey<ItemType>;
  /**
   * `minecraft:jigsaw`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JIGSAW: TypedKey<ItemType>;
  /**
   * `minecraft:jukebox`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUKEBOX: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:jungle_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:kelp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KELP: TypedKey<ItemType>;
  /**
   * `minecraft:knowledge_book`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly KNOWLEDGE_BOOK: TypedKey<ItemType>;
  /**
   * `minecraft:ladder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LADDER: TypedKey<ItemType>;
  /**
   * `minecraft:lapis_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:lapis_lazuli`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_LAZULI: TypedKey<ItemType>;
  /**
   * `minecraft:lapis_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:large_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LARGE_AMETHYST_BUD: TypedKey<ItemType>;
  /**
   * `minecraft:large_fern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LARGE_FERN: TypedKey<ItemType>;
  /**
   * `minecraft:lava_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAVA_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:lead`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEAD: TypedKey<ItemType>;
  /**
   * `minecraft:leather`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER: TypedKey<ItemType>;
  /**
   * `minecraft:leather_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:leather_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:leather_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:leather_horse_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER_HORSE_ARMOR: TypedKey<ItemType>;
  /**
   * `minecraft:leather_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHER_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:lectern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LECTERN: TypedKey<ItemType>;
  /**
   * `minecraft:lever`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEVER: TypedKey<ItemType>;
  /**
   * `minecraft:light`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_BED: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:light_blue_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_BLUE_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_BED: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:light_gray_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_GRAY_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:light_weighted_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHT_WEIGHTED_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:lightning_rod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIGHTNING_ROD: TypedKey<ItemType>;
  /**
   * `minecraft:lilac`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILAC: TypedKey<ItemType>;
  /**
   * `minecraft:lily_of_the_valley`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILY_OF_THE_VALLEY: TypedKey<ItemType>;
  /**
   * `minecraft:lily_pad`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LILY_PAD: TypedKey<ItemType>;
  /**
   * `minecraft:lime_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:lime_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_BED: TypedKey<ItemType>;
  /**
   * `minecraft:lime_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:lime_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:lime_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:lime_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:lime_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:lime_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:lime_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:lime_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:lime_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:lime_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:lime_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:lime_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIME_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:lingering_potion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LINGERING_POTION: TypedKey<ItemType>;
  /**
   * `minecraft:llama_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LLAMA_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:lodestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LODESTONE: TypedKey<ItemType>;
  /**
   * `minecraft:loom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOOM: TypedKey<ItemType>;
  /**
   * `minecraft:mace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MACE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_BED: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:magenta_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGENTA_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:magma_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGMA_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:magma_cream`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGMA_CREAM: TypedKey<ItemType>;
  /**
   * `minecraft:magma_cube_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAGMA_CUBE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_propagule`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_PROPAGULE: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_ROOTS: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:mangrove_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MANGROVE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:map`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MAP: TypedKey<ItemType>;
  /**
   * `minecraft:medium_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MEDIUM_AMETHYST_BUD: TypedKey<ItemType>;
  /**
   * `minecraft:melon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELON: TypedKey<ItemType>;
  /**
   * `minecraft:melon_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELON_SEEDS: TypedKey<ItemType>;
  /**
   * `minecraft:melon_slice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELON_SLICE: TypedKey<ItemType>;
  /**
   * `minecraft:milk_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MILK_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:miner_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:mojang_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOJANG_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:mooshroom_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOOSHROOM_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:moss_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSS_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:moss_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSS_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_cobblestone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_cobblestone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_cobblestone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_cobblestone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_COBBLESTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:mossy_stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOSSY_STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:mourner_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MOURNER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:mud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD: TypedKey<ItemType>;
  /**
   * `minecraft:mud_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:mud_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:mud_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:mud_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUD_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:muddy_mangrove_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUDDY_MANGROVE_ROOTS: TypedKey<ItemType>;
  /**
   * `minecraft:mule_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MULE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:mushroom_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSHROOM_STEM: TypedKey<ItemType>;
  /**
   * `minecraft:mushroom_stew`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSHROOM_STEW: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_11`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_11: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_13`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_13: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_BLOCKS: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_cat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CAT: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_chirp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CHIRP: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_creator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CREATOR: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_creator_music_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_CREATOR_MUSIC_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_FAR: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_mall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_MALL: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_mellohi`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_MELLOHI: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_otherside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_OTHERSIDE: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_pigstep`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_PIGSTEP: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_precipice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_PRECIPICE: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_relic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_RELIC: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_stal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_STAL: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_strad`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_STRAD: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_wait`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_WAIT: TypedKey<ItemType>;
  /**
   * `minecraft:music_disc_ward`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUSIC_DISC_WARD: TypedKey<ItemType>;
  /**
   * `minecraft:mutton`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:mycelium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MYCELIUM: TypedKey<ItemType>;
  /**
   * `minecraft:name_tag`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NAME_TAG: TypedKey<ItemType>;
  /**
   * `minecraft:nautilus_shell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NAUTILUS_SHELL: TypedKey<ItemType>;
  /**
   * `minecraft:nether_brick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK: TypedKey<ItemType>;
  /**
   * `minecraft:nether_brick_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:nether_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:nether_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:nether_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:nether_gold_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_GOLD_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:nether_quartz_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_QUARTZ_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:nether_sprouts`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_SPROUTS: TypedKey<ItemType>;
  /**
   * `minecraft:nether_star`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_STAR: TypedKey<ItemType>;
  /**
   * `minecraft:nether_wart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_WART: TypedKey<ItemType>;
  /**
   * `minecraft:nether_wart_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHER_WART_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_boots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_BOOTS: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_chestplate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_CHESTPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_ingot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_INGOT: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_leggings`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_LEGGINGS: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_scrap`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_SCRAP: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:netherite_upgrade_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE_UPGRADE_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:netherrack`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERRACK: TypedKey<ItemType>;
  /**
   * `minecraft:note_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NOTE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:oak_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:oak_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:observer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OBSERVER: TypedKey<ItemType>;
  /**
   * `minecraft:obsidian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OBSIDIAN: TypedKey<ItemType>;
  /**
   * `minecraft:ocelot_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCELOT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:ochre_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OCHRE_FROGLIGHT: TypedKey<ItemType>;
  /**
   * `minecraft:ominous_bottle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OMINOUS_BOTTLE: TypedKey<ItemType>;
  /**
   * `minecraft:ominous_trial_key`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OMINOUS_TRIAL_KEY: TypedKey<ItemType>;
  /**
   * `minecraft:open_eyeblossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OPEN_EYEBLOSSOM: TypedKey<ItemType>;
  /**
   * `minecraft:orange_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:orange_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_BED: TypedKey<ItemType>;
  /**
   * `minecraft:orange_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:orange_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:orange_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:orange_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:orange_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:orange_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:orange_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:orange_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:orange_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:orange_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:orange_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:orange_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_TULIP: TypedKey<ItemType>;
  /**
   * `minecraft:orange_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ORANGE_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:oxeye_daisy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXEYE_DAISY: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:oxidized_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OXIDIZED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:packed_ice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PACKED_ICE: TypedKey<ItemType>;
  /**
   * `minecraft:packed_mud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PACKED_MUD: TypedKey<ItemType>;
  /**
   * `minecraft:painting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PAINTING: TypedKey<ItemType>;
  /**
   * `minecraft:pale_hanging_moss`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_HANGING_MOSS: TypedKey<ItemType>;
  /**
   * `minecraft:pale_moss_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_MOSS_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:pale_moss_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_MOSS_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:pale_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE_OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:panda_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PANDA_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:paper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PAPER: TypedKey<ItemType>;
  /**
   * `minecraft:parrot_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PARROT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:pearlescent_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PEARLESCENT_FROGLIGHT: TypedKey<ItemType>;
  /**
   * `minecraft:peony`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PEONY: TypedKey<ItemType>;
  /**
   * `minecraft:petrified_oak_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PETRIFIED_OAK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:phantom_membrane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PHANTOM_MEMBRANE: TypedKey<ItemType>;
  /**
   * `minecraft:phantom_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PHANTOM_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:pig_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIG_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:piglin_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:piglin_brute_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_BRUTE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:piglin_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_HEAD: TypedKey<ItemType>;
  /**
   * `minecraft:piglin_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGLIN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:pillager_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PILLAGER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:pink_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:pink_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_BED: TypedKey<ItemType>;
  /**
   * `minecraft:pink_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:pink_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:pink_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:pink_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:pink_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:pink_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:pink_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:pink_petals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_PETALS: TypedKey<ItemType>;
  /**
   * `minecraft:pink_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:pink_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:pink_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:pink_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:pink_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_TULIP: TypedKey<ItemType>;
  /**
   * `minecraft:pink_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PINK_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:piston`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PISTON: TypedKey<ItemType>;
  /**
   * `minecraft:pitcher_plant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PITCHER_PLANT: TypedKey<ItemType>;
  /**
   * `minecraft:pitcher_pod`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PITCHER_POD: TypedKey<ItemType>;
  /**
   * `minecraft:player_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAYER_HEAD: TypedKey<ItemType>;
  /**
   * `minecraft:plenty_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLENTY_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:podzol`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PODZOL: TypedKey<ItemType>;
  /**
   * `minecraft:pointed_dripstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POINTED_DRIPSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:poisonous_potato`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POISONOUS_POTATO: TypedKey<ItemType>;
  /**
   * `minecraft:polar_bear_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLAR_BEAR_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:polished_andesite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_andesite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_andesite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_ANDESITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BASALT: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_blackstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_BLACKSTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:polished_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_deepslate_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_deepslate_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_deepslate_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DEEPSLATE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:polished_diorite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_diorite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_diorite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_DIORITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_granite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE: TypedKey<ItemType>;
  /**
   * `minecraft:polished_granite_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_granite_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_GRANITE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF: TypedKey<ItemType>;
  /**
   * `minecraft:polished_tuff_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:polished_tuff_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:polished_tuff_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POLISHED_TUFF_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:popped_chorus_fruit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POPPED_CHORUS_FRUIT: TypedKey<ItemType>;
  /**
   * `minecraft:poppy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POPPY: TypedKey<ItemType>;
  /**
   * `minecraft:porkchop`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PORKCHOP: TypedKey<ItemType>;
  /**
   * `minecraft:potato`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTATO: TypedKey<ItemType>;
  /**
   * `minecraft:potion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POTION: TypedKey<ItemType>;
  /**
   * `minecraft:powder_snow_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWDER_SNOW_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:powered_rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POWERED_RAIL: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_crystals`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_CRYSTALS: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_shard`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_SHARD: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:prismarine_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRISMARINE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:prize_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRIZE_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:pufferfish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUFFERFISH: TypedKey<ItemType>;
  /**
   * `minecraft:pufferfish_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUFFERFISH_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:pufferfish_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUFFERFISH_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:pumpkin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUMPKIN: TypedKey<ItemType>;
  /**
   * `minecraft:pumpkin_pie`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUMPKIN_PIE: TypedKey<ItemType>;
  /**
   * `minecraft:pumpkin_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PUMPKIN_SEEDS: TypedKey<ItemType>;
  /**
   * `minecraft:purple_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:purple_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_BED: TypedKey<ItemType>;
  /**
   * `minecraft:purple_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:purple_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:purple_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:purple_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:purple_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:purple_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:purple_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:purple_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:purple_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:purple_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:purple_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:purple_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPLE_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:purpur_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:purpur_pillar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_PILLAR: TypedKey<ItemType>;
  /**
   * `minecraft:purpur_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:purpur_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PURPUR_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:quartz`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ: TypedKey<ItemType>;
  /**
   * `minecraft:quartz_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:quartz_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:quartz_pillar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_PILLAR: TypedKey<ItemType>;
  /**
   * `minecraft:quartz_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:quartz_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:rabbit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT: TypedKey<ItemType>;
  /**
   * `minecraft:rabbit_foot`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT_FOOT: TypedKey<ItemType>;
  /**
   * `minecraft:rabbit_hide`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT_HIDE: TypedKey<ItemType>;
  /**
   * `minecraft:rabbit_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:rabbit_stew`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RABBIT_STEW: TypedKey<ItemType>;
  /**
   * `minecraft:rail`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAIL: TypedKey<ItemType>;
  /**
   * `minecraft:raiser_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAISER_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:ravager_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAVAGER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:raw_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:raw_copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_COPPER_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:raw_gold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_GOLD: TypedKey<ItemType>;
  /**
   * `minecraft:raw_gold_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_GOLD_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:raw_iron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_IRON: TypedKey<ItemType>;
  /**
   * `minecraft:raw_iron_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAW_IRON_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:recovery_compass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RECOVERY_COMPASS: TypedKey<ItemType>;
  /**
   * `minecraft:red_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:red_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_BED: TypedKey<ItemType>;
  /**
   * `minecraft:red_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:red_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:red_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:red_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:red_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:red_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:red_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:red_mushroom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_MUSHROOM: TypedKey<ItemType>;
  /**
   * `minecraft:red_mushroom_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_MUSHROOM_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:red_nether_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:red_nether_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:red_nether_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:red_nether_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_NETHER_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:red_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SAND: TypedKey<ItemType>;
  /**
   * `minecraft:red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:red_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:red_sandstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SANDSTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:red_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:red_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:red_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:red_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:red_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_TULIP: TypedKey<ItemType>;
  /**
   * `minecraft:red_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RED_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:redstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:redstone_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:redstone_lamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_LAMP: TypedKey<ItemType>;
  /**
   * `minecraft:redstone_ore`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_ORE: TypedKey<ItemType>;
  /**
   * `minecraft:redstone_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE_TORCH: TypedKey<ItemType>;
  /**
   * `minecraft:reinforced_deepslate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REINFORCED_DEEPSLATE: TypedKey<ItemType>;
  /**
   * `minecraft:repeater`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPEATER: TypedKey<ItemType>;
  /**
   * `minecraft:repeating_command_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REPEATING_COMMAND_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:resin_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:resin_brick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK: TypedKey<ItemType>;
  /**
   * `minecraft:resin_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:resin_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:resin_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:resin_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:resin_clump`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN_CLUMP: TypedKey<ItemType>;
  /**
   * `minecraft:respawn_anchor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESPAWN_ANCHOR: TypedKey<ItemType>;
  /**
   * `minecraft:rib_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RIB_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:rooted_dirt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ROOTED_DIRT: TypedKey<ItemType>;
  /**
   * `minecraft:rose_bush`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ROSE_BUSH: TypedKey<ItemType>;
  /**
   * `minecraft:rotten_flesh`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ROTTEN_FLESH: TypedKey<ItemType>;
  /**
   * `minecraft:saddle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SADDLE: TypedKey<ItemType>;
  /**
   * `minecraft:salmon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SALMON: TypedKey<ItemType>;
  /**
   * `minecraft:salmon_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SALMON_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:salmon_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SALMON_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAND: TypedKey<ItemType>;
  /**
   * `minecraft:sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:sandstone_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SANDSTONE_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:scaffolding`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCAFFOLDING: TypedKey<ItemType>;
  /**
   * `minecraft:scrape_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCRAPE_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:sculk`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK: TypedKey<ItemType>;
  /**
   * `minecraft:sculk_catalyst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_CATALYST: TypedKey<ItemType>;
  /**
   * `minecraft:sculk_sensor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_SENSOR: TypedKey<ItemType>;
  /**
   * `minecraft:sculk_shrieker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_SHRIEKER: TypedKey<ItemType>;
  /**
   * `minecraft:sculk_vein`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SCULK_VEIN: TypedKey<ItemType>;
  /**
   * `minecraft:sea_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEA_LANTERN: TypedKey<ItemType>;
  /**
   * `minecraft:sea_pickle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEA_PICKLE: TypedKey<ItemType>;
  /**
   * `minecraft:seagrass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEAGRASS: TypedKey<ItemType>;
  /**
   * `minecraft:sentry_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:shaper_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:sheaf_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEAF_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:shears`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEARS: TypedKey<ItemType>;
  /**
   * `minecraft:sheep_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEEP_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:shelter_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHELTER_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:shield`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHIELD: TypedKey<ItemType>;
  /**
   * `minecraft:short_grass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHORT_GRASS: TypedKey<ItemType>;
  /**
   * `minecraft:shroomlight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHROOMLIGHT: TypedKey<ItemType>;
  /**
   * `minecraft:shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:shulker_shell`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_SHELL: TypedKey<ItemType>;
  /**
   * `minecraft:shulker_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:silence_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:silverfish_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SILVERFISH_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:skeleton_horse_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_HORSE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:skeleton_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_SKULL: TypedKey<ItemType>;
  /**
   * `minecraft:skeleton_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKELETON_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:skull_banner_pattern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKULL_BANNER_PATTERN: TypedKey<ItemType>;
  /**
   * `minecraft:skull_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SKULL_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:slime_ball`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLIME_BALL: TypedKey<ItemType>;
  /**
   * `minecraft:slime_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLIME_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:slime_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLIME_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:small_amethyst_bud`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_AMETHYST_BUD: TypedKey<ItemType>;
  /**
   * `minecraft:small_dripleaf`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMALL_DRIPLEAF: TypedKey<ItemType>;
  /**
   * `minecraft:smithing_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMITHING_TABLE: TypedKey<ItemType>;
  /**
   * `minecraft:smoker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOKER: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_basalt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_BASALT: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_quartz`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_quartz_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_quartz_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_QUARTZ_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_red_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_red_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_red_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_RED_SANDSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_sandstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_sandstone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_sandstone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_SANDSTONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_STONE: TypedKey<ItemType>;
  /**
   * `minecraft:smooth_stone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOOTH_STONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:sniffer_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:sniffer_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNIFFER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:snort_pottery_sherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNORT_POTTERY_SHERD: TypedKey<ItemType>;
  /**
   * `minecraft:snout_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW: TypedKey<ItemType>;
  /**
   * `minecraft:snow_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:snow_golem_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW_GOLEM_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:snowball`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWBALL: TypedKey<ItemType>;
  /**
   * `minecraft:soul_campfire`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_CAMPFIRE: TypedKey<ItemType>;
  /**
   * `minecraft:soul_lantern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_LANTERN: TypedKey<ItemType>;
  /**
   * `minecraft:soul_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SAND: TypedKey<ItemType>;
  /**
   * `minecraft:soul_soil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_SOIL: TypedKey<ItemType>;
  /**
   * `minecraft:soul_torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SOUL_TORCH: TypedKey<ItemType>;
  /**
   * `minecraft:spawner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPAWNER: TypedKey<ItemType>;
  /**
   * `minecraft:spectral_arrow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPECTRAL_ARROW: TypedKey<ItemType>;
  /**
   * `minecraft:spider_eye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPIDER_EYE: TypedKey<ItemType>;
  /**
   * `minecraft:spider_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPIDER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:spire_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:splash_potion`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPLASH_POTION: TypedKey<ItemType>;
  /**
   * `minecraft:sponge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPONGE: TypedKey<ItemType>;
  /**
   * `minecraft:spore_blossom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPORE_BLOSSOM: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_chest_boat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_CHEST_BOAT: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_leaves`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LEAVES: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_sapling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SAPLING: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:spruce_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPRUCE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:spyglass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPYGLASS: TypedKey<ItemType>;
  /**
   * `minecraft:squid_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SQUID_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:stick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STICK: TypedKey<ItemType>;
  /**
   * `minecraft:sticky_piston`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STICKY_PISTON: TypedKey<ItemType>;
  /**
   * `minecraft:stone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE: TypedKey<ItemType>;
  /**
   * `minecraft:stone_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:stone_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:stone_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:stone_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:stone_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:stone_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:stone_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:stone_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:stone_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:stone_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:stone_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:stone_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:stone_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONE_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:stonecutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONECUTTER: TypedKey<ItemType>;
  /**
   * `minecraft:stray_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRAY_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:strider_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIDER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:string`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRING: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_acacia_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_ACACIA_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_acacia_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_ACACIA_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_bamboo_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BAMBOO_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_birch_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BIRCH_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_birch_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_BIRCH_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_cherry_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CHERRY_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_cherry_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CHERRY_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_crimson_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CRIMSON_HYPHAE: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_crimson_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_CRIMSON_STEM: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_dark_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_DARK_OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_dark_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_DARK_OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_jungle_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_JUNGLE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_jungle_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_JUNGLE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_mangrove_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_MANGROVE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_mangrove_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_MANGROVE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_pale_oak_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_PALE_OAK_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_pale_oak_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_PALE_OAK_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_spruce_log`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_SPRUCE_LOG: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_spruce_wood`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_SPRUCE_WOOD: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_warped_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_WARPED_HYPHAE: TypedKey<ItemType>;
  /**
   * `minecraft:stripped_warped_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPPED_WARPED_STEM: TypedKey<ItemType>;
  /**
   * `minecraft:structure_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRUCTURE_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:structure_void`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRUCTURE_VOID: TypedKey<ItemType>;
  /**
   * `minecraft:sugar`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUGAR: TypedKey<ItemType>;
  /**
   * `minecraft:sugar_cane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUGAR_CANE: TypedKey<ItemType>;
  /**
   * `minecraft:sunflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUNFLOWER: TypedKey<ItemType>;
  /**
   * `minecraft:suspicious_gravel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUSPICIOUS_GRAVEL: TypedKey<ItemType>;
  /**
   * `minecraft:suspicious_sand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUSPICIOUS_SAND: TypedKey<ItemType>;
  /**
   * `minecraft:suspicious_stew`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SUSPICIOUS_STEW: TypedKey<ItemType>;
  /**
   * `minecraft:sweet_berries`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWEET_BERRIES: TypedKey<ItemType>;
  /**
   * `minecraft:tadpole_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TADPOLE_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:tadpole_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TADPOLE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:tall_grass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TALL_GRASS: TypedKey<ItemType>;
  /**
   * `minecraft:target`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TARGET: TypedKey<ItemType>;
  /**
   * `minecraft:terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:tide_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TIDE_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:tinted_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TINTED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:tipped_arrow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TIPPED_ARROW: TypedKey<ItemType>;
  /**
   * `minecraft:tnt`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TNT: TypedKey<ItemType>;
  /**
   * `minecraft:tnt_minecart`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TNT_MINECART: TypedKey<ItemType>;
  /**
   * `minecraft:torch`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCH: TypedKey<ItemType>;
  /**
   * `minecraft:torchflower`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCHFLOWER: TypedKey<ItemType>;
  /**
   * `minecraft:torchflower_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TORCHFLOWER_SEEDS: TypedKey<ItemType>;
  /**
   * `minecraft:totem_of_undying`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TOTEM_OF_UNDYING: TypedKey<ItemType>;
  /**
   * `minecraft:trader_llama_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRADER_LLAMA_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:trapped_chest`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRAPPED_CHEST: TypedKey<ItemType>;
  /**
   * `minecraft:trial_key`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_KEY: TypedKey<ItemType>;
  /**
   * `minecraft:trial_spawner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_SPAWNER: TypedKey<ItemType>;
  /**
   * `minecraft:trident`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIDENT: TypedKey<ItemType>;
  /**
   * `minecraft:tripwire_hook`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIPWIRE_HOOK: TypedKey<ItemType>;
  /**
   * `minecraft:tropical_fish`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TROPICAL_FISH: TypedKey<ItemType>;
  /**
   * `minecraft:tropical_fish_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TROPICAL_FISH_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:tropical_fish_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TROPICAL_FISH_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:tube_coral`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL: TypedKey<ItemType>;
  /**
   * `minecraft:tube_coral_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:tube_coral_fan`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUBE_CORAL_FAN: TypedKey<ItemType>;
  /**
   * `minecraft:tuff`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_brick_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_brick_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_brick_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICK_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_bricks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_BRICKS: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:tuff_wall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TUFF_WALL: TypedKey<ItemType>;
  /**
   * `minecraft:turtle_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:turtle_helmet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_HELMET: TypedKey<ItemType>;
  /**
   * `minecraft:turtle_scute`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_SCUTE: TypedKey<ItemType>;
  /**
   * `minecraft:turtle_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TURTLE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:twisting_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TWISTING_VINES: TypedKey<ItemType>;
  /**
   * `minecraft:vault`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VAULT: TypedKey<ItemType>;
  /**
   * `minecraft:verdant_froglight`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VERDANT_FROGLIGHT: TypedKey<ItemType>;
  /**
   * `minecraft:vex_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VEX_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:vex_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VEX_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:villager_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VILLAGER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:vindicator_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VINDICATOR_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:vine`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly VINE: TypedKey<ItemType>;
  /**
   * `minecraft:wandering_trader_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WANDERING_TRADER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:ward_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARD_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:warden_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARDEN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:warped_button`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_BUTTON: TypedKey<ItemType>;
  /**
   * `minecraft:warped_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:warped_fence`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FENCE: TypedKey<ItemType>;
  /**
   * `minecraft:warped_fence_gate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FENCE_GATE: TypedKey<ItemType>;
  /**
   * `minecraft:warped_fungus`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FUNGUS: TypedKey<ItemType>;
  /**
   * `minecraft:warped_fungus_on_a_stick`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_FUNGUS_ON_A_STICK: TypedKey<ItemType>;
  /**
   * `minecraft:warped_hanging_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_HANGING_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:warped_hyphae`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_HYPHAE: TypedKey<ItemType>;
  /**
   * `minecraft:warped_nylium`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_NYLIUM: TypedKey<ItemType>;
  /**
   * `minecraft:warped_planks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_PLANKS: TypedKey<ItemType>;
  /**
   * `minecraft:warped_pressure_plate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_PRESSURE_PLATE: TypedKey<ItemType>;
  /**
   * `minecraft:warped_roots`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_ROOTS: TypedKey<ItemType>;
  /**
   * `minecraft:warped_sign`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_SIGN: TypedKey<ItemType>;
  /**
   * `minecraft:warped_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:warped_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:warped_stem`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_STEM: TypedKey<ItemType>;
  /**
   * `minecraft:warped_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:warped_wart_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARPED_WART_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:water_bucket`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER_BUCKET: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_copper_block`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_BLOCK: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_exposed_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_EXPOSED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_oxidized_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_OXIDIZED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:waxed_weathered_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAXED_WEATHERED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:wayfinder_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_chiseled_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CHISELED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_copper_bulb`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_BULB: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_copper_door`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_DOOR: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_copper_grate`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_GRATE: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_copper_trapdoor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_COPPER_TRAPDOOR: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_cut_copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_cut_copper_slab`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER_SLAB: TypedKey<ItemType>;
  /**
   * `minecraft:weathered_cut_copper_stairs`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEATHERED_CUT_COPPER_STAIRS: TypedKey<ItemType>;
  /**
   * `minecraft:weeping_vines`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEEPING_VINES: TypedKey<ItemType>;
  /**
   * `minecraft:wet_sponge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WET_SPONGE: TypedKey<ItemType>;
  /**
   * `minecraft:wheat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHEAT: TypedKey<ItemType>;
  /**
   * `minecraft:wheat_seeds`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHEAT_SEEDS: TypedKey<ItemType>;
  /**
   * `minecraft:white_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:white_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_BED: TypedKey<ItemType>;
  /**
   * `minecraft:white_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:white_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:white_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:white_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:white_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:white_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:white_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:white_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:white_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:white_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:white_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:white_tulip`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_TULIP: TypedKey<ItemType>;
  /**
   * `minecraft:white_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WHITE_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:wild_armor_trim_smithing_template`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WILD_ARMOR_TRIM_SMITHING_TEMPLATE: TypedKey<ItemType>;
  /**
   * `minecraft:wind_charge`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WIND_CHARGE: TypedKey<ItemType>;
  /**
   * `minecraft:witch_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITCH_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:wither_rose`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_ROSE: TypedKey<ItemType>;
  /**
   * `minecraft:wither_skeleton_skull`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKELETON_SKULL: TypedKey<ItemType>;
  /**
   * `minecraft:wither_skeleton_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SKELETON_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:wither_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:wolf_armor`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOLF_ARMOR: TypedKey<ItemType>;
  /**
   * `minecraft:wolf_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOLF_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:wooden_axe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_AXE: TypedKey<ItemType>;
  /**
   * `minecraft:wooden_hoe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_HOE: TypedKey<ItemType>;
  /**
   * `minecraft:wooden_pickaxe`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_PICKAXE: TypedKey<ItemType>;
  /**
   * `minecraft:wooden_shovel`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_SHOVEL: TypedKey<ItemType>;
  /**
   * `minecraft:wooden_sword`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODEN_SWORD: TypedKey<ItemType>;
  /**
   * `minecraft:writable_book`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WRITABLE_BOOK: TypedKey<ItemType>;
  /**
   * `minecraft:written_book`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WRITTEN_BOOK: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_banner`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_BANNER: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_bed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_BED: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_bundle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_BUNDLE: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_candle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CANDLE: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_carpet`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CARPET: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_concrete`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CONCRETE: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_concrete_powder`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_CONCRETE_POWDER: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_dye`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_DYE: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_glazed_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_GLAZED_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_SHULKER_BOX: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_stained_glass`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_STAINED_GLASS: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_stained_glass_pane`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_STAINED_GLASS_PANE: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_terracotta`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_TERRACOTTA: TypedKey<ItemType>;
  /**
   * `minecraft:yellow_wool`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YELLOW_WOOL: TypedKey<ItemType>;
  /**
   * `minecraft:zoglin_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOGLIN_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:zombie_head`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_HEAD: TypedKey<ItemType>;
  /**
   * `minecraft:zombie_horse_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_HORSE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:zombie_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:zombie_villager_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIE_VILLAGER_SPAWN_EGG: TypedKey<ItemType>;
  /**
   * `minecraft:zombified_piglin_spawn_egg`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ZOMBIFIED_PIGLIN_SPAWN_EGG: TypedKey<ItemType>;
}
/**
 * Vanilla keys for {@link RegistryKey#MENU}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class MenuTypeKeys {
  /**
   * `minecraft:anvil`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ANVIL: TypedKey<MenuType>;
  /**
   * `minecraft:beacon`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BEACON: TypedKey<MenuType>;
  /**
   * `minecraft:blast_furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLAST_FURNACE: TypedKey<MenuType>;
  /**
   * `minecraft:brewing_stand`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BREWING_STAND: TypedKey<MenuType>;
  /**
   * `minecraft:cartography_table`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARTOGRAPHY_TABLE: TypedKey<MenuType>;
  /**
   * `minecraft:crafter_3x3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTER_3X3: TypedKey<MenuType>;
  /**
   * `minecraft:crafting`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CRAFTING: TypedKey<MenuType>;
  /**
   * `minecraft:enchantment`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ENCHANTMENT: TypedKey<MenuType>;
  /**
   * `minecraft:furnace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FURNACE: TypedKey<MenuType>;
  /**
   * `minecraft:generic_3x3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_3X3: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x1`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X1: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x2`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X2: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x3`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X3: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x4`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X4: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X5: TypedKey<MenuType>;
  /**
   * `minecraft:generic_9x6`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GENERIC_9X6: TypedKey<MenuType>;
  /**
   * `minecraft:grindstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GRINDSTONE: TypedKey<MenuType>;
  /**
   * `minecraft:hopper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HOPPER: TypedKey<MenuType>;
  /**
   * `minecraft:lectern`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LECTERN: TypedKey<MenuType>;
  /**
   * `minecraft:loom`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LOOM: TypedKey<MenuType>;
  /**
   * `minecraft:merchant`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MERCHANT: TypedKey<MenuType>;
  /**
   * `minecraft:shulker_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHULKER_BOX: TypedKey<MenuType>;
  /**
   * `minecraft:smithing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMITHING: TypedKey<MenuType>;
  /**
   * `minecraft:smoker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SMOKER: TypedKey<MenuType>;
  /**
   * `minecraft:stonecutter`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STONECUTTER: TypedKey<MenuType>;
}
/**
 * Vanilla keys for {@link RegistryKey#VILLAGER_PROFESSION}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class VillagerProfessionKeys {
  /**
   * `minecraft:armorer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ARMORER: TypedKey<Profession>;
  /**
   * `minecraft:butcher`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BUTCHER: TypedKey<Profession>;
  /**
   * `minecraft:cartographer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CARTOGRAPHER: TypedKey<Profession>;
  /**
   * `minecraft:cleric`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CLERIC: TypedKey<Profession>;
  /**
   * `minecraft:farmer`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FARMER: TypedKey<Profession>;
  /**
   * `minecraft:fisherman`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FISHERMAN: TypedKey<Profession>;
  /**
   * `minecraft:fletcher`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FLETCHER: TypedKey<Profession>;
  /**
   * `minecraft:leatherworker`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEATHERWORKER: TypedKey<Profession>;
  /**
   * `minecraft:librarian`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LIBRARIAN: TypedKey<Profession>;
  /**
   * `minecraft:mason`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MASON: TypedKey<Profession>;
  /**
   * `minecraft:nitwit`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NITWIT: TypedKey<Profession>;
  /**
   * `minecraft:none`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NONE: TypedKey<Profession>;
  /**
   * `minecraft:shepherd`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SHEPHERD: TypedKey<Profession>;
  /**
   * `minecraft:toolsmith`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TOOLSMITH: TypedKey<Profession>;
  /**
   * `minecraft:weaponsmith`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEAPONSMITH: TypedKey<Profession>;
}
/**
 * Vanilla keys for {@link RegistryKey#VILLAGER_TYPE}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class VillagerTypeKeys {
  /**
   * `minecraft:desert`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DESERT: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:jungle`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUNGLE: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:plains`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PLAINS: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:savanna`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SAVANNA: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:snow`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOW: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:swamp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SWAMP: TypedKey<org_bukkit_entity_Villager_Type>;
  /**
   * `minecraft:taiga`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TAIGA: TypedKey<org_bukkit_entity_Villager_Type>;
}
/**
 * Vanilla keys for {@link RegistryKey#INSTRUMENT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class InstrumentKeys {
  /**
   * `minecraft:admire_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ADMIRE_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:call_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CALL_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:dream_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DREAM_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:feel_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FEEL_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:ponder_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PONDER_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:seek_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SEEK_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:sing_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SING_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * `minecraft:yearn_goat_horn`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly YEARN_GOAT_HORN: TypedKey<MusicInstrument>;
  /**
   * Creates a key for {@link MusicInstrument} in the registry `minecraft:instrument`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<MusicInstrument>;
}
/**
 * Vanilla keys for {@link RegistryKey#WOLF_VARIANT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class WolfVariantKeys {
  /**
   * `minecraft:ashen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ASHEN: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:black`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLACK: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:chestnut`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHESTNUT: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:pale`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PALE: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:rusty`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RUSTY: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:snowy`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SNOWY: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:spotted`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPOTTED: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:striped`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRIPED: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * `minecraft:woods`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WOODS: TypedKey<org_bukkit_entity_Wolf_Variant>;
  /**
   * Creates a key for {@link Wolf.Variant} in the registry `minecraft:wolf_variant`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<org_bukkit_entity_Wolf_Variant>;
}
/**
 * Vanilla keys for {@link RegistryKey#MOB_EFFECT}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class MobEffectKeys {
  /**
   * `minecraft:absorption`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ABSORPTION: TypedKey<PotionEffectType>;
  /**
   * `minecraft:bad_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BAD_OMEN: TypedKey<PotionEffectType>;
  /**
   * `minecraft:blindness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLINDNESS: TypedKey<PotionEffectType>;
  /**
   * `minecraft:conduit_power`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CONDUIT_POWER: TypedKey<PotionEffectType>;
  /**
   * `minecraft:darkness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DARKNESS: TypedKey<PotionEffectType>;
  /**
   * `minecraft:dolphins_grace`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DOLPHINS_GRACE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:fire_resistance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIRE_RESISTANCE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:glowing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GLOWING: TypedKey<PotionEffectType>;
  /**
   * `minecraft:haste`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HASTE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:health_boost`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HEALTH_BOOST: TypedKey<PotionEffectType>;
  /**
   * `minecraft:hero_of_the_village`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HERO_OF_THE_VILLAGE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:hunger`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly HUNGER: TypedKey<PotionEffectType>;
  /**
   * `minecraft:infested`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INFESTED: TypedKey<PotionEffectType>;
  /**
   * `minecraft:instant_damage`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INSTANT_DAMAGE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:instant_health`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INSTANT_HEALTH: TypedKey<PotionEffectType>;
  /**
   * `minecraft:invisibility`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly INVISIBILITY: TypedKey<PotionEffectType>;
  /**
   * `minecraft:jump_boost`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly JUMP_BOOST: TypedKey<PotionEffectType>;
  /**
   * `minecraft:levitation`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LEVITATION: TypedKey<PotionEffectType>;
  /**
   * `minecraft:luck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LUCK: TypedKey<PotionEffectType>;
  /**
   * `minecraft:mining_fatigue`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MINING_FATIGUE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:nausea`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NAUSEA: TypedKey<PotionEffectType>;
  /**
   * `minecraft:night_vision`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NIGHT_VISION: TypedKey<PotionEffectType>;
  /**
   * `minecraft:oozing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OOZING: TypedKey<PotionEffectType>;
  /**
   * `minecraft:poison`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly POISON: TypedKey<PotionEffectType>;
  /**
   * `minecraft:raid_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RAID_OMEN: TypedKey<PotionEffectType>;
  /**
   * `minecraft:regeneration`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REGENERATION: TypedKey<PotionEffectType>;
  /**
   * `minecraft:resistance`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESISTANCE: TypedKey<PotionEffectType>;
  /**
   * `minecraft:saturation`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SATURATION: TypedKey<PotionEffectType>;
  /**
   * `minecraft:slow_falling`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLOW_FALLING: TypedKey<PotionEffectType>;
  /**
   * `minecraft:slowness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SLOWNESS: TypedKey<PotionEffectType>;
  /**
   * `minecraft:speed`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly SPEED: TypedKey<PotionEffectType>;
  /**
   * `minecraft:strength`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRENGTH: TypedKey<PotionEffectType>;
  /**
   * `minecraft:trial_omen`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly TRIAL_OMEN: TypedKey<PotionEffectType>;
  /**
   * `minecraft:unluck`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly UNLUCK: TypedKey<PotionEffectType>;
  /**
   * `minecraft:water_breathing`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WATER_BREATHING: TypedKey<PotionEffectType>;
  /**
   * `minecraft:weakness`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEAKNESS: TypedKey<PotionEffectType>;
  /**
   * `minecraft:weaving`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WEAVING: TypedKey<PotionEffectType>;
  /**
   * `minecraft:wind_charged`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WIND_CHARGED: TypedKey<PotionEffectType>;
  /**
   * `minecraft:wither`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WITHER: TypedKey<PotionEffectType>;
}
/**
 * Vanilla keys for {@link RegistryKey#TRIM_MATERIAL}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class TrimMaterialKeys {
  /**
   * `minecraft:amethyst`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly AMETHYST: TypedKey<TrimMaterial>;
  /**
   * `minecraft:copper`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly COPPER: TypedKey<TrimMaterial>;
  /**
   * `minecraft:diamond`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly DIAMOND: TypedKey<TrimMaterial>;
  /**
   * `minecraft:emerald`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly EMERALD: TypedKey<TrimMaterial>;
  /**
   * `minecraft:gold`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly GOLD: TypedKey<TrimMaterial>;
  /**
   * `minecraft:iron`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly IRON: TypedKey<TrimMaterial>;
  /**
   * `minecraft:lapis`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly LAPIS: TypedKey<TrimMaterial>;
  /**
   * `minecraft:netherite`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly NETHERITE: TypedKey<TrimMaterial>;
  /**
   * `minecraft:quartz`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly QUARTZ: TypedKey<TrimMaterial>;
  /**
   * `minecraft:redstone`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly REDSTONE: TypedKey<TrimMaterial>;
  /**
   * `minecraft:resin`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RESIN: TypedKey<TrimMaterial>;
  /**
   * Creates a key for {@link TrimMaterial} in the registry `minecraft:trim_material`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<TrimMaterial>;
}
/**
 * Vanilla keys for {@link RegistryKey#JUKEBOX_SONG}.
 *
 * @apiNote The fields provided here are a direct representation of
 * what is available from the vanilla game source. They may be
 * changed (including removals) on any Minecraft version
 * bump, so cross-version compatibility is not provided on the
 * same level as it is on most of the other API.
*/
export class JukeboxSongKeys {
  /**
   * `minecraft:11`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly ELEVEN: TypedKey<JukeboxSong>;
  /**
   * `minecraft:13`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly THIRTEEN: TypedKey<JukeboxSong>;
  /**
   * `minecraft:5`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FIVE: TypedKey<JukeboxSong>;
  /**
   * `minecraft:blocks`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly BLOCKS: TypedKey<JukeboxSong>;
  /**
   * `minecraft:cat`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CAT: TypedKey<JukeboxSong>;
  /**
   * `minecraft:chirp`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CHIRP: TypedKey<JukeboxSong>;
  /**
   * `minecraft:creator`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREATOR: TypedKey<JukeboxSong>;
  /**
   * `minecraft:creator_music_box`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly CREATOR_MUSIC_BOX: TypedKey<JukeboxSong>;
  /**
   * `minecraft:far`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly FAR: TypedKey<JukeboxSong>;
  /**
   * `minecraft:mall`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MALL: TypedKey<JukeboxSong>;
  /**
   * `minecraft:mellohi`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly MELLOHI: TypedKey<JukeboxSong>;
  /**
   * `minecraft:otherside`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly OTHERSIDE: TypedKey<JukeboxSong>;
  /**
   * `minecraft:pigstep`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PIGSTEP: TypedKey<JukeboxSong>;
  /**
   * `minecraft:precipice`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly PRECIPICE: TypedKey<JukeboxSong>;
  /**
   * `minecraft:relic`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly RELIC: TypedKey<JukeboxSong>;
  /**
   * `minecraft:stal`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STAL: TypedKey<JukeboxSong>;
  /**
   * `minecraft:strad`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly STRAD: TypedKey<JukeboxSong>;
  /**
   * `minecraft:wait`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WAIT: TypedKey<JukeboxSong>;
  /**
   * `minecraft:ward`
   *
   * @apiNote This field is version-dependant and may be removed in future Minecraft versions
  */
  static readonly WARD: TypedKey<JukeboxSong>;
  /**
   * Creates a key for {@link JukeboxSong} in the registry `minecraft:jukebox_song`.
   *
   * @param key the value's key in the registry
   * @return a new typed key
  */
  static create(key: Key): TypedKey<JukeboxSong>;
}

}
declare module 'io.papermc.paper.registry.event.type' {
import { PrioritizedLifecycleEventHandlerConfiguration } from 'io.papermc.paper.plugin.lifecycle.event.handler.configuration';
import { TypedKey, RegistryBuilder } from 'io.papermc.paper.registry';
import { LifecycleEventType } from 'io.papermc.paper.plugin.lifecycle.event.types';
import { BootstrapContext } from 'io.papermc.paper.plugin.bootstrap';
import { RegistryEntryAddEvent } from 'io.papermc.paper.registry.event';
import { Predicate } from 'java.util.function';
/**
 * Lifecycle event type for {@link RegistryEntryAddEvent}s.
 *
 * @param  registry entry type
 * @param  registry entry builder type
*/
export class RegistryEntryAddEventType<T> extends LifecycleEventType<BootstrapContext,RegistryEntryAddEvent<T,B>,RegistryEntryAddConfiguration<T>> {

}
/**
 * Specific configuration for {@link io.papermc.paper.registry.event.RegistryEntryAddEvent}s.
 *
 * @param  registry entry type
*/
export class RegistryEntryAddConfiguration<T> extends PrioritizedLifecycleEventHandlerConfiguration<BootstrapContext> {
  /**
   * Only call the handler if the value being added matches the specified key.
   *
   * @param key the key to match
   * @return this configuration
  */
  filter(key: TypedKey<T>): RegistryEntryAddConfiguration<T>;
  /**
   * Only call the handler if the value being added passes the provided filter.
   *
   * @param filter the predicate to match the key against
   * @return this configuration
  */
  filter(filter: Predicate<TypedKey<T>>): RegistryEntryAddConfiguration<T>;
  priority(priority: number): RegistryEntryAddConfiguration<T>;
  monitor(): RegistryEntryAddConfiguration<T>;
}

}
declare module 'io.papermc.paper.persistence' {
import { Set } from 'java.util';
import { PersistentDataAdapterContext, PersistentDataType, PersistentDataContainer } from 'org.bukkit.persistence';
import { NamespacedKey } from 'org.bukkit';
/**
 * This represents a view of a persistent data container. No
 * methods on this interface mutate the container.
 *
 * @see PersistentDataContainer
*/
export class PersistentDataContainerView {
  /**
   * Returns if the persistent metadata provider has metadata registered
   * matching the provided parameters.
   * 
   * This method will only return true if the found value has the same primitive
   * data type as the provided key.
   * 
   * Storing a value using a custom {@link PersistentDataType} implementation
   * will not store the complex data type. Therefore storing a UUID (by
   * storing a byte[]) will match has("key" ,
   * {@link PersistentDataType#BYTE_ARRAY}). Likewise a stored byte[] will
   * always match your UUID {@link PersistentDataType} even if it is not 16
   * bytes long.
   * 
   * This method is only usable for custom object keys. Overwriting existing
   * tags, like the display name, will not work as the values are stored
   * using your namespace.
   *
   * @param key the key the value is stored under
   * @param type the type the primative stored value has to match
   * @param  the generic type of the stored primitive
   * @param  the generic type of the eventually created complex object
   * @return if a value with the provided key and type exists
   * @throws IllegalArgumentException if the key to look up is null
   * @throws IllegalArgumentException if the type to cast the found object to is
   * null
  */
  has<P>(key: NamespacedKey, type: PersistentDataType<P,C>): boolean;
  /**
   * Returns if the persistent metadata provider has metadata registered matching
   * the provided parameters.
   * 
   * This method will return true as long as a value with the given key exists,
   * regardless of its type.
   * 
   * This method is only usable for custom object keys. Overwriting existing tags,
   * like the display name, will not work as the values are stored using your
   * namespace.
   *
   * @param key the key the value is stored under
   * @return if a value with the provided key exists
   * @throws IllegalArgumentException if the key to look up is null
  */
  has(key: NamespacedKey): boolean;
  /**
   * Returns the metadata value that is stored on the
   * {@link PersistentDataHolder} instance.
   *
   * @param key the key to look up in the custom tag map
   * @param type the type the value must have and will be casted to
   * @param  the generic type of the stored primitive
   * @param  the generic type of the eventually created complex object
   * @return the value or `null` if no value was mapped under the given
   * value
   * @throws IllegalArgumentException if the key to look up is null
   * @throws IllegalArgumentException if the type to cast the found object to is
   * null
   * @throws IllegalArgumentException if a value exists under the given key,
   * but cannot be accessed using the given type
   * @throws IllegalArgumentException if no suitable adapter was found for
   * the {@link
   * PersistentDataType#getPrimitiveType()}
  */
  get<P>(key: NamespacedKey, type: PersistentDataType<P,C>): C | null;
  /**
   * Returns the metadata value that is stored on the
   * {@link PersistentDataHolder} instance. If the value does not exist in the
   * container, the default value provided is returned.
   *
   * @param key the key to look up in the custom tag map
   * @param type the type the value must have and will be casted to
   * @param defaultValue the default value to return if no value was found for
   * the provided key
   * @param  the generic type of the stored primitive
   * @param  the generic type of the eventually created complex object
   * @return the value or the default value if no value was mapped under the
   * given key
   * @throws IllegalArgumentException if the key to look up is null
   * @throws IllegalArgumentException if the type to cast the found object to is
   * null
   * @throws IllegalArgumentException if a value exists under the given key,
   * but cannot be accessed using the given type
   * @throws IllegalArgumentException if no suitable adapter was found for
   * the {@link PersistentDataType#getPrimitiveType()}
  */
  getOrDefault<P>(key: NamespacedKey, type: PersistentDataType<P,C>, defaultValue: C): C;
  /**
   * Get the set of keys present on this {@link PersistentDataContainer}
   * instance.
   * 
   * Any changes made to the returned set will not be reflected on the
   * instance.
   *
   * @return the key set
  */
  get keys(): Set<NamespacedKey>;
  /**
   * Returns if the container instance is empty, therefore has no entries
   * inside it.
   *
   * @return the boolean
  */
  isEmpty(): boolean;
  /**
   * Copies all values from this {@link PersistentDataContainer} to the provided
   * container.
   * 
   * This method only copies custom object keys. Existing tags, like the display
   * name, will not be copied as the values are stored using your namespace.
   *
   * @param other the container to copy to
   * @param replace whether to replace any matching values in the target container
   * @throws IllegalArgumentException if the other container is null
  */
  copyTo(other: PersistentDataContainer, replace: boolean): void;
  /**
   * Returns the adapter context this tag container uses.
   *
   * @return the tag context
  */
  get adapterContext(): PersistentDataAdapterContext;
  /**
   * Serialize this {@link PersistentDataContainer} instance to a
   * byte array.
   *
   * @return a binary representation of this container
   * @throws java.io.IOException if we fail to write this container to a byte array
  */
  serializeToBytes(): number[];
}
/**
 * The {@link PersistentDataViewHolder} interface defines an object that can view
 * custom persistent data on it.
*/
export class PersistentDataViewHolder {
  /**
   * Returns a custom tag container view capable of viewing tags on the object.
   * 
   * Note that the tags stored on this container are all stored under their
   * own custom namespace therefore modifying default tags using this
   * {@link PersistentDataViewHolder} is impossible.
   *
   * @return the persistent data container view
  */
  get persistentDataContainer(): PersistentDataContainerView;
}

}
declare module 'io.papermc.paper.block.fluid.type' {
import { FluidData } from 'io.papermc.paper.block.fluid';
/**
 * A specific subtype of {@link FluidData} that is returned by the API for fluid data of potentially falling fluids.
*/
export class FallingFluidData extends FluidData {
  /**
   * Get if this liquid is falling.
   *
   * @return true if falling
  */
  isFalling(): boolean;
}
/**
 * A specific subtype of {@link FluidData} that is returned by the API for fluid data of potentially falling fluids.
*/
export class FlowingFluidData extends FallingFluidData {

}

}
declare module 'io.papermc.paper.annotation' {
/**
 * Annotation used to mark methods or constructors which should not be called.
 *
 * Separate from {@link Deprecated} to differentiate from the large amount of deprecations.
*/
export class DoNotUse {

}

}
declare module 'io.papermc.paper.datacomponent.item.ItemAttributeModifiers' {
import { Builder as io_papermc_paper_datacomponent_item_ShownInTooltip_Builder } from 'io.papermc.paper.datacomponent.item.ShownInTooltip';
import { ItemAttributeModifiers } from 'io.papermc.paper.datacomponent.item';
import { Attribute, AttributeModifier } from 'org.bukkit.attribute';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
import { EquipmentSlotGroup } from 'org.bukkit.inventory';
/**
 * Holds an attribute entry.
*/
export class Entry {
  /**
   * Gets the target attribute for the paired modifier.
   *
   * @return the attribute
  */
  attribute(): Attribute;
  /**
   * The modifier for the paired attribute.
   *
   * @return the modifier
  */
  modifier(): AttributeModifier;
  /**
   * Gets the slot group for this attribute.
   *
   * @return the slot group
  */
  get group(): EquipmentSlotGroup;
}
/**
 * Builder for {@link ItemAttributeModifiers}.
*/
export class Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder> {
  /**
   * Adds a modifier to this builder.
   *
   * @param attribute attribute
   * @param modifier  modifier
   * @return the builder for chaining
   * @see #modifiers()
  */
  addModifier(attribute: Attribute, modifier: AttributeModifier): Builder;
  /**
   * Adds a modifier to this builder.
   *
   * @param attribute          attribute
   * @param modifier           modifier
   * @param equipmentSlotGroup the slot group this modifier applies to (overrides any slot group in the modifier)
   * @return the builder for chaining
   * @see #modifiers()
  */
  addModifier(attribute: Attribute, modifier: AttributeModifier, equipmentSlotGroup: EquipmentSlotGroup): Builder;
}
export interface Builder extends io_papermc_paper_datacomponent_item_ShownInTooltip_Builder<Builder>, DataComponentBuilder<ItemAttributeModifiers> {}

}
declare module 'io.papermc.paper.datacomponent.item.WrittenBookContent' {
import { ComponentLike } from 'net.kyori.adventure.text';
import { List } from 'java.util';
import { Filtered } from 'io.papermc.paper.text';
import { WrittenBookContent } from 'io.papermc.paper.datacomponent.item';
import { DataComponentBuilder } from 'io.papermc.paper.datacomponent';
/**
 * Builder for {@link WrittenBookContent}.
*/
export class Builder extends DataComponentBuilder<WrittenBookContent> {
  /**
   * Sets the title of this book.
   *
   * @param title the title
   * @return the builder for chaining
   * @see #title()
  */
  title(title: string): Builder;
  /**
   * Sets the filterable title of this book.
   *
   * @param title the title
   * @return the builder for chaining
   * @see #title()
  */
  filteredTitle(title: Filtered<string>): Builder;
  /**
   * Sets the author of this book.
   *
   * @param author the author
   * @return the builder for chaining
   * @see #author()
  */
  author(author: string): Builder;
  /**
   * Sets the generation of this book.
   *
   * @param generation the generation, [0-3]
   * @return the builder for chaining
   * @see #generation()
  */
  generation(generation: number): Builder;
  /**
   * Sets if the chat components in this book have already been resolved (entity selectors, scores substituted).
   * If `false`, will be resolved when opened by a player.
   *
   * @param resolved resolved
   * @return the builder for chaining
   * @see #resolved()
  */
  resolved(resolved: boolean): Builder;
  /**
   * Adds a page to this book.
   *
   * @param page the page
   * @return the builder for chaining
   * @see #pages()
  */
  addPage(page: ComponentLike): Builder;
  /**
   * Adds pages to this book.
   *
   * @param page the pages
   * @return the builder for chaining
   * @see #pages()
  */
  addPages(page: ComponentLike[]): Builder;
  /**
   * Adds a filterable page to this book.
   *
   * @param page the page
   * @return the builder for chaining
   * @see #pages()
  */
  addFilteredPage(page: Filtered<ComponentLike>): Builder;
  /**
   * Adds filterable pages to this book.
   *
   * @param pages the pages
   * @return the builder for chaining
   * @see #pages()
  */
  addFilteredPages(pages: Filtered<ComponentLike>[]): Builder;
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.handler.configuration' {
import { LifecycleEventOwner } from 'io.papermc.paper.plugin.lifecycle.event';
/**
 * Base type for constructing configured event handlers for
 * lifecycle events. Usually created via {@link io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType#newHandler(LifecycleEventHandler)}
 * from event types in {@link io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents}
 *
 * @param 
*/
export class LifecycleEventHandlerConfiguration<O> {

}
/**
 * Handler configuration that allows both "monitor" and prioritized handlers.
 * The default priority is 0.
 *
 * @param  the required owner type
*/
export class PrioritizedLifecycleEventHandlerConfiguration<O> extends LifecycleEventHandlerConfiguration<O> {
  /**
   * Sets the priority for this handler. Resets
   * all previous calls to {@link #monitor()}. A
   * lower numeric value correlates to the handler
   * being run earlier.
   *
   * @param priority the numerical priority
   * @return this configuration for chaining
  */
  priority(priority: number): PrioritizedLifecycleEventHandlerConfiguration<O>;
  /**
   * Sets this handler configuration to be considered a "monitor".
   * These handlers will run last and should only be used by plugins
   * to observe any changes from previously ran handlers.
   *
   * @return this configuration for chaining
  */
  monitor(): PrioritizedLifecycleEventHandlerConfiguration<O>;
}
/**
 * Handler configuration for event types that allow "monitor" handlers.
 *
 * @param  the required owner type
*/
export class MonitorLifecycleEventHandlerConfiguration<O> extends LifecycleEventHandlerConfiguration<O> {
  /**
   * Sets this handler configuration to be considered a "monitor".
   * These handlers will run last and should only be used by plugins
   * to observe changes from previously run handlers.
   *
   * @return this configuration for chaining
  */
  monitor(): MonitorLifecycleEventHandlerConfiguration<O>;
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event' {
import { LifecycleEventHandlerConfiguration } from 'io.papermc.paper.plugin.lifecycle.event.handler.configuration';
import { LifecycleEventHandler } from 'io.papermc.paper.plugin.lifecycle.event.handler';
import { LifecycleEventType } from 'io.papermc.paper.plugin.lifecycle.event.types';
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
/**
 * Manages a plugin's lifecycle events. Can be obtained
 * from {@link org.bukkit.plugin.Plugin} or {@link io.papermc.paper.plugin.bootstrap.BootstrapContext}.
 *
 * @param  the owning type, {@link org.bukkit.plugin.Plugin} or {@link io.papermc.paper.plugin.bootstrap.BootstrapContext}
*/
export class LifecycleEventManager<O> {
  /**
   * Registers an event handler for a specific event type.
   * 
   * This is shorthand for creating a new {@link LifecycleEventHandlerConfiguration} and
   * just passing in the {@link LifecycleEventHandler}.
   * {@code
   * LifecycleEventHandler> handler = new Handler();
   * manager.registerEventHandler(LifecycleEvents.COMMANDS, handler);
   * }
   * is equivalent to
   * {@code
   * LifecycleEventHandler> handler = new Handler();
   * manager.registerEventHandler(LifecycleEvents.COMMANDS.newHandler(handler));
   * }
   *
   * @param eventType the event type to listen to
   * @param eventHandler the handler for that event
   * @param  the type of the event object
  */
  registerEventHandler<E>(eventType: LifecycleEventType<any,E,any>, eventHandler: LifecycleEventHandler<any>): void;
  /**
   * Registers an event handler configuration.
   * 
   * Configurations are created via {@link LifecycleEventType#newHandler(LifecycleEventHandler)}.
   * Event types may have different configurations options available on the builder-like object
   * returned by {@link LifecycleEventType#newHandler(LifecycleEventHandler)}.
   *
   * @param handlerConfiguration the handler configuration to register
  */
  registerEventHandler(handlerConfiguration: LifecycleEventHandlerConfiguration<any>): void;
}
/**
 * Implemented by types that are considered owners
 * of registered handlers for lifecycle events. Generally
 * the types that implement this interface also provide
 * a {@link LifecycleEventManager} where you can register
 * event handlers.
*/
export class LifecycleEventOwner {
  /**
   * Get the plugin meta for this plugin.
   *
   * @return the plugin meta
  */
  get pluginMeta(): PluginMeta;
}
/**
 * Base type for all Lifecycle Events.
 * 
 * Lifecycle events are generally fired when the older
 * event system is not available, like during early
 * server initialization.
 * @see LifecycleEvents
*/
export class LifecycleEvent {

}

}
declare module 'io.papermc.paper.block' {
import { TileState, BlockFace, Lockable } from 'org.bukkit.block';
import { BlockData } from 'org.bukkit.block.data';
import { BlockInventoryHolder, Inventory } from 'org.bukkit.inventory';
import { Nameable } from 'org.bukkit';
/**
 * Interface for tile entities that are lockable.
*/
export class LockableTileState extends TileState {

}
export interface LockableTileState extends TileState, Lockable, Nameable {}
/**
 * Represents a {@link TileState} block that has an inventory.
*/
export class TileStateInventoryHolder extends TileState {
  /**
   * Gets the inventory of the block represented by this block state.
   * 
   * If the block was changed to a different type in the meantime, the
   * returned inventory might no longer be valid.
   * 
   * If this block state is not placed this will return the captured inventory
   * snapshot instead.
   *
   * @return the inventory
  */
  get inventory(): Inventory;
  /**
   * Gets the captured inventory snapshot of this container.
   * 
   * The returned inventory is not linked to any block. Any modifications to
   * the returned inventory will not be applied to the block represented by
   * this block state up until {@link #update(boolean, boolean)} has been
   * called.
   *
   * @return the captured inventory snapshot
  */
  get snapshotInventory(): Inventory;
}
export interface TileStateInventoryHolder extends TileState, BlockInventoryHolder {}
export class MovingPiston extends TileState {
  /**
   * Gets the block that is being pushed
   *
   * @return the pushed block
  */
  get movingBlock(): BlockData;
  /**
   * The direction that the current moving piston
   * is pushing/pulling a block in.
   *
   * @return the direction
  */
  get direction(): BlockFace;
  /**
   * Gets if the piston is extending or not.
   * Returns false if the piston is retracting.
   *
   * @return is extending or not
  */
  isExtending(): boolean;
  /**
   * Returns if this moving piston represents the main piston head
   * from the original piston.
   *
   * @return is the piston head or not
  */
  isPistonHead(): boolean;
}

}
declare module 'io.papermc.paper.plugin.bootstrap' {
import { LifecycleEventOwner, LifecycleEventManager } from 'io.papermc.paper.plugin.lifecycle.event';
import { JavaPlugin } from 'org.bukkit.plugin.java';
import { ComponentLogger } from 'net.kyori.adventure.text.logger.slf4j';
import { Path } from 'java.nio.file';
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
/**
 * Represents the context provided to a {@link PluginBootstrap} during both the bootstrapping and plugin
 * instantiation logic.
 * A bootstrap context may be used to access data or logic usually provided to {@link org.bukkit.plugin.Plugin} instances
 * like the plugin's configuration or logger during the plugins bootstrap.
*/
export class BootstrapContext extends PluginProviderContext {
  /**
   * Get the lifecycle event manager for registering handlers
   * for lifecycle events allowed on the {@link BootstrapContext}.
   *
   * @return the lifecycle event manager
  */
  get lifecycleManager(): LifecycleEventManager<BootstrapContext>;
}
export interface BootstrapContext extends PluginProviderContext, LifecycleEventOwner {}
/**
 * Represents the context provided to a {@link PluginBootstrap} during both the bootstrapping and plugin
 * instantiation logic.
 * A bootstrap context may be used to access data or logic usually provided to {@link org.bukkit.plugin.Plugin} instances
 * like the plugin's configuration or logger during the plugins bootstrap.
*/
export class PluginProviderContext {
  /**
   * Provides the plugin's configuration.
   *
   * @return the plugin's configuration
  */
  get configuration(): PluginMeta;
  /**
   * Provides the path to the data directory of the plugin.
   *
   * @return the previously described path
  */
  get dataDirectory(): Path;
  /**
   * Provides the logger used for this plugin.
   *
   * @return the logger instance
  */
  get logger(): ComponentLogger;
  /**
   * Provides the path to the originating source of the plugin, such as the plugin's JAR file.
   *
   * @return the previously described path
  */
  get pluginSource(): Path;
}
/**
 * A plugin bootstrap is meant for loading certain parts of the plugin before the server is loaded.
 * 
 * Plugin bootstrapping allows values to be initialized in certain parts of the server that might not be allowed
 * when the server is running.
 * 
 * Your bootstrap class will be on the same classloader as your JavaPlugin.
 * 
 * All calls to Bukkit may throw a NullPointerExceptions or return null unexpectedly. You should only call api methods that are explicitly documented to work in the bootstrapper
*/
export class PluginBootstrap {
  /**
   * Called by the server, allowing you to bootstrap the plugin with a context that provides things like a logger and your shared plugin configuration file.
   *
   * @param context the server provided context
  */
  bootstrap(context: BootstrapContext): void;
  /**
   * Called by the server to instantiate your main class.
   * Plugins may override this logic to define custom creation logic for said instance, like passing addition
   * constructor arguments.
   *
   * @param context the server created bootstrap object
   * @return the server requested instance of the plugins main class.
  */
  createPlugin(context: PluginProviderContext): JavaPlugin;
}

}
declare module 'io.papermc.paper.plugin.provider.classloader' {
import { Class } from 'java.lang';
import { JavaPlugin, PluginClassLoader } from 'org.bukkit.plugin.java';
import { Closeable } from 'java.io';
import { PluginMeta } from 'io.papermc.paper.plugin.configuration';
/**
 * The class loader access interface is an internal representation of a class accesses' ability to see types
 * from other {@link ConfiguredPluginClassLoader}.
 * 
 * An example of this would be a class loader access representing a plugin. The class loader access in that case would
 * only return `true` on calls for {@link #canAccess(ConfiguredPluginClassLoader)} if the passed class loader
 * is owned by a direct or transitive dependency of the plugin, preventing the plugin for accidentally discovering and
 * using class types that are supplied by plugins/libraries the plugin did not actively define as a dependency.
*/
export class ClassLoaderAccess {
  /**
   * Evaluates if this class loader access is allowed to access types provided by the passed {@link
   * ConfiguredPluginClassLoader}.
   * 
   * This interface method does not offer any further contracts on the interface level, as the logic to determine
   * what class loaders this class loader access is allowed to retrieve types from depends heavily on the type of
   * access.
   * Legacy spigot types for example may access any class loader available on the server, while modern paper plugins
   * are properly limited to their dependency tree.
   *
   * @param classLoader the class loader for which access should be evaluated
   * @return a plain boolean flag, `true` indicating that this class loader access is allowed to access types
   * from the passed configured plugin class loader, `false` indicating otherwise.
  */
  canAccess(classLoader: ConfiguredPluginClassLoader): boolean;
}
/**
 * The plugin classloader storage is an internal type that is used to manage existing classloaders on the server.
 * 
 * The paper classloader storage is also responsible for storing added {@link ConfiguredPluginClassLoader}s into
 * {@link PluginClassLoaderGroup}s, via {@link #registerOpenGroup(ConfiguredPluginClassLoader)},
 * {@link #registerSpigotGroup(PluginClassLoader)} and {@link
 * #registerAccessBackedGroup(ConfiguredPluginClassLoader, ClassLoaderAccess)}.
 * 
 * Groups are differentiated into the global group or plugin owned groups.
 * 
 * The global group holds all registered class loaders and merely exists to maintain backwards compatibility with
 * spigots legacy classloader handling.
 * The plugin groups only contains the classloaders that each plugin has access to and hence serves to properly
 * separates unrelated classloaders.
 * 
*/
export class PaperClassLoaderStorage {
  /**
   * Access to the shared instance of the {@link PaperClassLoaderStorageAccess}.
   *
   * @return the singleton instance of the {@link PaperClassLoaderStorage} used throughout the server
  */
  static instance(): PaperClassLoaderStorage;
  /**
   * Registers a legacy spigot {@link PluginClassLoader} into the loader storage, creating a group wrapping
   * the single plugin class loader with transitive access to the global group.
   *
   * @param pluginClassLoader the legacy spigot plugin class loader to register
   * @return the group the plugin class loader was placed into
  */
  registerSpigotGroup(pluginClassLoader: PluginClassLoader): PluginClassLoaderGroup;
  /**
   * Registers a paper configured plugin classloader into a new open group, with full access to the global
   * plugin class loader group.
   * 
   * This method hence allows the configured plugin class loader to access all other class loaders registered in this
   * storage.
   *
   * @param classLoader the configured plugin class loader to register
   * @return the group the plugin class loader was placed into
  */
  registerOpenGroup(classLoader: ConfiguredPluginClassLoader): PluginClassLoaderGroup;
  /**
   * Registers a paper configured classloader into a new, access backed group.
   * The access backed classloader group, different from an open group, only has access to the classloaders
   * the passed {@link ClassLoaderAccess} grants access to.
   *
   * @param classLoader the configured plugin class loader to register
   * @param access      the class loader access that defines what other classloaders the passed plugin class loader
   *                    should be granted access to.
   * @return the group the plugin class loader was placed into.
  */
  registerAccessBackedGroup(classLoader: ConfiguredPluginClassLoader, access: ClassLoaderAccess): PluginClassLoaderGroup;
  /**
   * Unregisters a configured class loader from this storage.
   * This removes the passed class loaders from any group it may have been a part of, including the global group.
   * 
   * Note: this method is highly discouraged from being used, as mutation of the classloaders at runtime
   * is not encouraged
   *
   * @param configuredPluginClassLoader the class loader to remove from this storage.
  */
  unregisterClassloader(configuredPluginClassLoader: ConfiguredPluginClassLoader): void;
  /**
   * Registers a configured plugin class loader directly into the global group without adding it to
   * any existing groups.
   * 
   * Note: this method unsafely injects the plugin classloader directly into the global group, which bypasses the
   * group structure paper's plugin API introduced. This method should hence be used with caution.
   *
   * @param pluginLoader the configured plugin classloader instance that should be registered directly into the global
   *                     group.
   * @return a simple boolean flag, `true` if the classloader was registered or `false` if the classloader
   * was already part of the global group.
  */
  registerUnsafePlugin(pluginLoader: ConfiguredPluginClassLoader): boolean;
}
/**
 * The configured plugin class loader represents an internal abstraction over the classloaders used by the server
 * to load and access a plugins classes during runtime.
 * 
 * It implements {@link Closeable} to define the ability to shutdown and close the classloader that implements this
 * interface.
*/
export class ConfiguredPluginClassLoader extends Closeable {
  /**
   * Provides the configuration of the plugin that this plugin classloader provides type access to.
   *
   * @return the plugin meta instance, holding all meta information about the plugin instance.
  */
  get configuration(): PluginMeta;
  /**
   * Attempts to load a class from this plugin class loader using the passed fully qualified name.
   * This lookup logic can be configured through the following parameters to define how wide or how narrow the
   * class lookup should be.
   *
   * @param name           the fully qualified name of the class to load
   * @param resolve        whether the class should be resolved if needed or not
   * @param checkGlobal    whether this lookup should check transitive dependencies, including either the legacy spigot
   *                       global class loader or the paper {@link PluginClassLoaderGroup}
   * @param checkLibraries whether the defined libraries should be checked for the class or not
   * @return the class found at the fully qualified class name passed under the passed restrictions
   * @throws ClassNotFoundException if the class could not be found considering the passed restrictions
   * @see ClassLoader#loadClass(String)
   * @see Class#forName(String, boolean, ClassLoader)
  */
  loadClass(name: string, resolve: boolean, checkGlobal: boolean, checkLibraries: boolean): Class<any>;
  /**
   * Initializes both this configured plugin class loader and the java plugin passed to link to each other.
   * This logic is to be called exactly once when the initial setup between the class loader and the instantiated
   * {@link JavaPlugin} is loaded.
   *
   * @param plugin the {@link JavaPlugin} that should be interlinked with this class loader.
  */
  init(plugin: JavaPlugin): void;
  /**
   * Gets the plugin held by this class loader.
   *
   * @return the plugin or null if it doesn't exist yet
  */
  get plugin(): JavaPlugin | null;
  /**
   * Get the plugin classloader group
   * that is used by the underlying classloader
   * @return classloader
  */
  get group(): PluginClassLoaderGroup | null;
}
/**
 * A plugin classloader group represents a group of classloaders that a plugins classloader may access.
 * 
 * An example of this would be a classloader group that holds all direct and transitive dependencies a plugin declared,
 * allowing a plugins classloader to access classes included in these dependencies via this group.
*/
export class PluginClassLoaderGroup {
  /**
   * Attempts to find/load a class from this plugin class loader group using the passed fully qualified name
   * in any of the classloaders that are part of this group.
   * 
   * The lookup order across the contained loaders is not defined on the API level and depends purely on the
   * implementation.
   *
   * @param name      the fully qualified name of the class to load
   * @param resolve   whether the class should be resolved if needed or not
   * @param requester plugin classloader that is requesting the class from this loader group
   * @return the class found at the fully qualified class name passed. If the class could not be found, `null`
   * will be returned.
   * @see ConfiguredPluginClassLoader#loadClass(String, boolean, boolean, boolean)
  */
  getClassByName(name: string, resolve: boolean, requester: ConfiguredPluginClassLoader): Class<any> | null;
  /**
   * Removes a configured plugin classloader from this class loader group.
   * If the classloader is not currently in the list, this method will simply do nothing.
   *
   * @param configuredPluginClassLoader the plugin classloader to remove from the group
  */
  remove(configuredPluginClassLoader: ConfiguredPluginClassLoader): void;
  /**
   * Adds the passed plugin classloader to this group, allowing this group to use it during
   * {@link #getClassByName(String, boolean, ConfiguredPluginClassLoader)} lookups.
   * 
   * This method does not query the {@link ClassLoaderAccess} (exposed via {@link #getAccess()}) to ensure
   * if this group has access to the class loader passed.
   *
   * @param configuredPluginClassLoader the plugin classloader to add to this group.
  */
  add(configuredPluginClassLoader: ConfiguredPluginClassLoader): void;
  /**
   * Provides the class loader access that guards and defines the content of this classloader group.
   * While not guaranteed contractually (see {@link #add(ConfiguredPluginClassLoader)}), the access generally is
   * responsible for defining which {@link ConfiguredPluginClassLoader}s should be part of this group and which ones
   * should not.
   *
   * @return the classloader access governing which classloaders should be part of this group and which ones should
   * not.
  */
  get access(): ClassLoaderAccess;
}

}
declare module 'io.papermc.paper.plugin.lifecycle.event.types.LifecycleEventType' {
import { LifecycleEvent, LifecycleEventOwner } from 'io.papermc.paper.plugin.lifecycle.event';
import { MonitorLifecycleEventHandlerConfiguration, PrioritizedLifecycleEventHandlerConfiguration } from 'io.papermc.paper.plugin.lifecycle.event.handler.configuration';
import { LifecycleEventType } from 'io.papermc.paper.plugin.lifecycle.event.types';
/**
 * Lifecycle event type that supports separate registration
 * of handlers as "monitors" that are run last. Useful
 * if a plugin wants to only observe the changes other handlers
 * made.
 *
 * @param  the required owner type
 * @param  the event object type
*/
export class Monitorable<O, E> extends LifecycleEventType<O,E,MonitorLifecycleEventHandlerConfiguration<O>> {

}
/**
 * Lifecycle event type that supports both {@link Monitorable "monitors"} and
 * specific numeric-based priorities.
 *
 * @param  the required owner type
 * @param  the event object type
*/
export class Prioritizable<O, E> extends LifecycleEventType<O,E,PrioritizedLifecycleEventHandlerConfiguration<O>> {

}

}
declare module 'io.papermc.paper.event.player.PlayerOpenSignEvent' {
import { Enum } from 'java.lang';
/**
 * The cause of the {@link PlayerOpenSignEvent}.
*/
export class Cause extends Enum<Cause> {
  /**
   * The event was triggered by the placement of a sign.
  */
  static readonly PLACE: Cause;
  /**
   * The event was triggered by an interaction with a sign.
  */
  static readonly INTERACT: Cause;
  /**
   * The event was triggered via a plugin with {@link HumanEntity#openSign(Sign, Side)}
  */
  static readonly PLUGIN: Cause;
  /**
   * Fallback cause for any unknown cause.
  */
  static readonly UNKNOWN: Cause;
  static valueOf(name: string): Cause;
  static values(): Cause[];
}

}
