name: "🚀 Java build"
run-name: "🚀 Build and tag release for ${{ github.event.inputs.version }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 1.21.4-R0.1-SNAPSHOT)"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v2

      - name: "☕️ Set up Java 21"
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "21"

      - name: "🔖 Set VERSION env"
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: "🛠️ Gradle build"
        run: ./gradlew shadowJar

      - name: "📦 Download JDK sources"
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-21-source

      - name: "📝 Generate java.base types"
        run: java -jar build/libs/java-ts-bind-all.jar --packageJson java-core-types/package.json

      - name: "📝 Generate java.net.http types"
        run: java -jar build/libs/java-ts-bind-all.jar --packageJson httpclient-types/package.json

      - name: "📝 Generate paper types"
        run: java -jar build/libs/java-ts-bind-all.jar  --index --repo https://repo.papermc.io/repository/maven-public/ --artifact io.papermc.paper:paper-api:${{ github.event.inputs.version }} --out paper

      - name: "📦 Prepare release content"
        run: |
          mkdir -p release/paper
          mkdir -p release/httpclient-types
          mkdir -p release/java-core-types
          cp -r paper/* release/paper/
          cp -r httpclient-types/* release/httpclient-types/
          cp -r java-core-types/* release/java-core-types/

      - name: "🔧 Configure git"
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: "🏷️ Create or update tag with only release content"
        run: |
          TAG_NAME="$VERSION"
          # Remove tag locally and remotely if exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            git tag -d "$TAG_NAME"
            git push --delete origin "$TAG_NAME" || true
          fi
          # Remove everything except the release folder
          find . -mindepth 1 -maxdepth 1 ! -name release ! -name .git ! -name package.json -exec rm -rf {} +
          # Move release contents to root
          mv release/* .
          rmdir release
          git add .
          git commit -m "Release $TAG_NAME" || true
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME" --force
          cd ..
